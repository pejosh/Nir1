
Nir1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08009408  08009408  00019408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097bc  080097bc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080097bc  080097bc  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097bc  080097bc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c0  080097c0  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080097c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200001d8  0800999c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800999c  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140e3  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003337  00000000  00000000  00034327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00037660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1d  00000000  00000000  000388a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af61  00000000  00000000  000396bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178ec  00000000  00000000  0005461e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094354  00000000  00000000  0006bf0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c88  00000000  00000000  00100260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00105ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080093ec 	.word	0x080093ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080093ec 	.word	0x080093ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <DS18B20_Test>:




float DS18B20_Test()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    if (!DS18B20_TriggerConversion())
 8000fe8:	f000 f8a2 	bl	8001130 <DS18B20_TriggerConversion>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f083 0301 	eor.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <DS18B20_Test+0x1a>
    	return 0;
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e00e      	b.n	800101c <DS18B20_Test+0x38>

    // Conversion delay 800 ms
    HAL_Delay(800);
 8000ffe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001002:	f001 f933 	bl	800226c <HAL_Delay>

    if (DS18B20_GetScratchPad())
 8001006:	f000 f8a5 	bl	8001154 <DS18B20_GetScratchPad>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <DS18B20_Test+0x34>
    {
    	return DS18B20_CalculateTemperature();
 8001010:	f000 f806 	bl	8001020 <DS18B20_CalculateTemperature>
 8001014:	4603      	mov	r3, r0
 8001016:	e001      	b.n	800101c <DS18B20_Test+0x38>
    }
    else
    	return 0;;
 8001018:	f04f 0300 	mov.w	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}

08001020 <DS18B20_CalculateTemperature>:



float DS18B20_CalculateTemperature()
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
	float tp;

	//ScratchPad.TempMsb = 0b11111110;
	//ScratchPad.TempLsb = 0b01101111;

	TempSign = ScratchPad.TempMsb >> 7;
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <DS18B20_CalculateTemperature+0x108>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	09db      	lsrs	r3, r3, #7
 800102c:	71fb      	strb	r3, [r7, #7]
	TempInt = ((ScratchPad.TempMsb & 0x0f) << 4) | (ScratchPad.TempLsb >> 4);
 800102e:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <DS18B20_CalculateTemperature+0x108>)
 8001030:	785b      	ldrb	r3, [r3, #1]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	b25a      	sxtb	r2, r3
 8001036:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <DS18B20_CalculateTemperature+0x108>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	b2db      	uxtb	r3, r3
 800103e:	b25b      	sxtb	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b25b      	sxtb	r3, r3
 8001044:	73fb      	strb	r3, [r7, #15]
	TempFrac = ScratchPad.TempLsb & (uint8_t)0x0f;
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <DS18B20_CalculateTemperature+0x108>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	71bb      	strb	r3, [r7, #6]

	__NOP();
 8001050:	bf00      	nop

	if(TempSign != 0)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d03c      	beq.n	80010d2 <DS18B20_CalculateTemperature+0xb2>
	{
		// two's complement
		if (TempInt == 0b11111111)
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2bff      	cmp	r3, #255	; 0xff
 800105c:	d102      	bne.n	8001064 <DS18B20_CalculateTemperature+0x44>
			TempInt = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e005      	b.n	8001070 <DS18B20_CalculateTemperature+0x50>
		else
		{
			TempInt -= 1;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	3b01      	subs	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
			TempInt = ~TempInt;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	43db      	mvns	r3, r3
 800106e:	73fb      	strb	r3, [r7, #15]
		}

		TempFrac -= 1;
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	3b01      	subs	r3, #1
 8001074:	71bb      	strb	r3, [r7, #6]
		TempFrac = (~TempFrac) & 0x0f;
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	43db      	mvns	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	71bb      	strb	r3, [r7, #6]
		tp = ((float) TempInt + ((float) TempFrac * 0.0625)) * (-1);
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fe05 	bl	8000c94 <__aeabi_ui2f>
 800108a:	4603      	mov	r3, r0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f9cb 	bl	8000428 <__aeabi_f2d>
 8001092:	4604      	mov	r4, r0
 8001094:	460d      	mov	r5, r1
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fdfb 	bl	8000c94 <__aeabi_ui2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f9c1 	bl	8000428 <__aeabi_f2d>
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <DS18B20_CalculateTemperature+0x10c>)
 80010ac:	f7ff fa14 	bl	80004d8 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4620      	mov	r0, r4
 80010b6:	4629      	mov	r1, r5
 80010b8:	f7ff f858 	bl	800016c <__adddf3>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4610      	mov	r0, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	f7ff fce0 	bl	8000a88 <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	e024      	b.n	800111c <DS18B20_CalculateTemperature+0xfc>
	}
	else
	    tp = (float) TempInt + ((float) TempFrac * 0.0625);
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fddd 	bl	8000c94 <__aeabi_ui2f>
 80010da:	4603      	mov	r3, r0
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f9a3 	bl	8000428 <__aeabi_f2d>
 80010e2:	4604      	mov	r4, r0
 80010e4:	460d      	mov	r5, r1
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fdd3 	bl	8000c94 <__aeabi_ui2f>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f999 	bl	8000428 <__aeabi_f2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <DS18B20_CalculateTemperature+0x10c>)
 80010fc:	f7ff f9ec 	bl	80004d8 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4620      	mov	r0, r4
 8001106:	4629      	mov	r1, r5
 8001108:	f7ff f830 	bl	800016c <__adddf3>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fcb8 	bl	8000a88 <__aeabi_d2f>
 8001118:	4603      	mov	r3, r0
 800111a:	60bb      	str	r3, [r7, #8]

	return tp;
 800111c:	68bb      	ldr	r3, [r7, #8]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bdb0      	pop	{r4, r5, r7, pc}
 8001126:	bf00      	nop
 8001128:	200001f4 	.word	0x200001f4
 800112c:	3fb00000 	.word	0x3fb00000

08001130 <DS18B20_TriggerConversion>:




bool DS18B20_TriggerConversion()
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	if (DS18B20_ResetSequence())
 8001134:	f000 f8fe 	bl	8001334 <DS18B20_ResetSequence>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d007      	beq.n	800114e <DS18B20_TriggerConversion+0x1e>
	{
		DS18B20_WriteByte(COMMAND_SKIP_ROM);
 800113e:	20cc      	movs	r0, #204	; 0xcc
 8001140:	f000 f8a4 	bl	800128c <DS18B20_WriteByte>
		DS18B20_WriteByte(COMMAND_CONVERT_TEMP);
 8001144:	2044      	movs	r0, #68	; 0x44
 8001146:	f000 f8a1 	bl	800128c <DS18B20_WriteByte>
		return true;
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <DS18B20_TriggerConversion+0x20>
	}
	else
		return false;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	bd80      	pop	{r7, pc}

08001154 <DS18B20_GetScratchPad>:



bool DS18B20_GetScratchPad()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	if(DS18B20_ResetSequence())
 8001158:	f000 f8ec 	bl	8001334 <DS18B20_ResetSequence>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d03d      	beq.n	80011de <DS18B20_GetScratchPad+0x8a>
	{
		DS18B20_WriteByte(COMMAND_SKIP_ROM);
 8001162:	20cc      	movs	r0, #204	; 0xcc
 8001164:	f000 f892 	bl	800128c <DS18B20_WriteByte>
	    DS18B20_WriteByte(COMMAND_READ_SCRATCHPAD);
 8001168:	20be      	movs	r0, #190	; 0xbe
 800116a:	f000 f88f 	bl	800128c <DS18B20_WriteByte>
		ScratchPad.TempLsb = DS18B20_ReadByte();
 800116e:	f000 f83b 	bl	80011e8 <DS18B20_ReadByte>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <DS18B20_GetScratchPad+0x90>)
 8001178:	701a      	strb	r2, [r3, #0]
		ScratchPad.TempMsb = DS18B20_ReadByte();
 800117a:	f000 f835 	bl	80011e8 <DS18B20_ReadByte>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <DS18B20_GetScratchPad+0x90>)
 8001184:	705a      	strb	r2, [r3, #1]
		ScratchPad.TempHighReg = DS18B20_ReadByte();
 8001186:	f000 f82f 	bl	80011e8 <DS18B20_ReadByte>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <DS18B20_GetScratchPad+0x90>)
 8001190:	709a      	strb	r2, [r3, #2]
		ScratchPad.TempLowReg = DS18B20_ReadByte();
 8001192:	f000 f829 	bl	80011e8 <DS18B20_ReadByte>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <DS18B20_GetScratchPad+0x90>)
 800119c:	70da      	strb	r2, [r3, #3]
		ScratchPad.Config = DS18B20_ReadByte();
 800119e:	f000 f823 	bl	80011e8 <DS18B20_ReadByte>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <DS18B20_GetScratchPad+0x90>)
 80011a8:	711a      	strb	r2, [r3, #4]
		ScratchPad.Reserved1 = DS18B20_ReadByte();
 80011aa:	f000 f81d 	bl	80011e8 <DS18B20_ReadByte>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <DS18B20_GetScratchPad+0x90>)
 80011b4:	715a      	strb	r2, [r3, #5]
		ScratchPad.Reserved2 = DS18B20_ReadByte();
 80011b6:	f000 f817 	bl	80011e8 <DS18B20_ReadByte>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <DS18B20_GetScratchPad+0x90>)
 80011c0:	719a      	strb	r2, [r3, #6]
		ScratchPad.Reserved3 = DS18B20_ReadByte();
 80011c2:	f000 f811 	bl	80011e8 <DS18B20_ReadByte>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <DS18B20_GetScratchPad+0x90>)
 80011cc:	71da      	strb	r2, [r3, #7]
		ScratchPad.CrcReg = DS18B20_ReadByte();
 80011ce:	f000 f80b 	bl	80011e8 <DS18B20_ReadByte>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <DS18B20_GetScratchPad+0x90>)
 80011d8:	721a      	strb	r2, [r3, #8]
		return true;
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <DS18B20_GetScratchPad+0x8c>
	}
	else
		return false;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200001f4 	.word	0x200001f4

080011e8 <DS18B20_ReadByte>:


uint8_t DS18B20_ReadByte()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i < 8; i++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	e010      	b.n	800121a <DS18B20_ReadByte+0x32>
	{
		temp |= (DS18B20_ReadBit() << i);
 80011f8:	f000 f818 	bl	800122c <DS18B20_ReadBit>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	b25a      	sxtb	r2, r3
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4313      	orrs	r3, r2
 800120e:	b25b      	sxtb	r3, r3
 8001210:	71fb      	strb	r3, [r7, #7]
		__NOP();
 8001212:	bf00      	nop
	for (int i = 0; i < 8; i++)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b07      	cmp	r3, #7
 800121e:	ddeb      	ble.n	80011f8 <DS18B20_ReadByte+0x10>
	}

	return temp;
 8001220:	79fb      	ldrb	r3, [r7, #7]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <DS18B20_ReadBit>:



uint8_t DS18B20_ReadBit()
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	71fb      	strb	r3, [r7, #7]

	// Pull line down
	DS18B20_OutputSet();
 8001236:	f000 f8c3 	bl	80013c0 <DS18B20_OutputSet>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2102      	movs	r1, #2
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <DS18B20_ReadBit+0x5c>)
 8001240:	f002 f84b 	bl	80032da <HAL_GPIO_WritePin>
	// Release line
	DS18B20_InputSet();
 8001244:	f000 f8de 	bl	8001404 <DS18B20_InputSet>

	// Reset timer 2 counter and sample line until sample time elapses
	TIM2->CNT = 0;
 8001248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT < READTIMESLOT_SAMPLETIME)
 8001250:	e005      	b.n	800125e <DS18B20_ReadBit+0x32>
	{
		temp = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001252:	2102      	movs	r1, #2
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <DS18B20_ReadBit+0x5c>)
 8001256:	f002 f829 	bl	80032ac <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
	while(TIM2->CNT < READTIMESLOT_SAMPLETIME)
 800125e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	2b0d      	cmp	r3, #13
 8001266:	d9f4      	bls.n	8001252 <DS18B20_ReadBit+0x26>
	}

	// Reset timer 2 counter to complete slot time...No need for recovery time
	TIM2->CNT = 0;
 8001268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT < READTIMESLOT_SLOTTIME);
 8001270:	bf00      	nop
 8001272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	2b31      	cmp	r3, #49	; 0x31
 800127a:	d9fa      	bls.n	8001272 <DS18B20_ReadBit+0x46>


	return temp;
 800127c:	79fb      	ldrb	r3, [r7, #7]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40011000 	.word	0x40011000

0800128c <DS18B20_WriteByte>:




void DS18B20_WriteByte(uint8_t CommandValue)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = CommandValue;
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < 8; i++)
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	e00c      	b.n	80012ba <DS18B20_WriteByte+0x2e>
	{
		DS18B20_WriteBit(temp & 1);
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f80f 	bl	80012cc <DS18B20_WriteBit>
		temp >>= 1;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	3301      	adds	r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2b07      	cmp	r3, #7
 80012be:	ddef      	ble.n	80012a0 <DS18B20_WriteByte+0x14>
	}
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <DS18B20_WriteBit>:



void DS18B20_WriteBit(uint8_t bitValue)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	if (bitValue == 0)
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d111      	bne.n	8001300 <DS18B20_WriteBit+0x34>
	{
		DS18B20_OutputSet();
 80012dc:	f000 f870 	bl	80013c0 <DS18B20_OutputSet>
		// Pull line down
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2102      	movs	r1, #2
 80012e4:	4812      	ldr	r0, [pc, #72]	; (8001330 <DS18B20_WriteBit+0x64>)
 80012e6:	f001 fff8 	bl	80032da <HAL_GPIO_WritePin>
		//Tim2Delay_us(WRITETIMESLOT_LOWTIME);
		Tim2Delay_us(WRITETIMESLOT_SAMPLETIME);
 80012ea:	2046      	movs	r0, #70	; 0x46
 80012ec:	f000 fe4e 	bl	8001f8c <Tim2Delay_us>
		DS18B20_InputSet();
 80012f0:	f000 f888 	bl	8001404 <DS18B20_InputSet>
		Tim2Delay_us(WRITETIMESLOT_RECOVERYTIME);
 80012f4:	2005      	movs	r0, #5
 80012f6:	f000 fe49 	bl	8001f8c <Tim2Delay_us>
		DS18B20_InputSet();
 80012fa:	f000 f883 	bl	8001404 <DS18B20_InputSet>
		DS18B20_InputSet();
		Tim2Delay_us(WRITETIMESLOT_SAMPLETIME);
		Tim2Delay_us(WRITETIMESLOT_RECOVERYTIME);
		DS18B20_InputSet();
	}
}
 80012fe:	e013      	b.n	8001328 <DS18B20_WriteBit+0x5c>
	else if (bitValue == 1)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d110      	bne.n	8001328 <DS18B20_WriteBit+0x5c>
		DS18B20_OutputSet();
 8001306:	f000 f85b 	bl	80013c0 <DS18B20_OutputSet>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2102      	movs	r1, #2
 800130e:	4808      	ldr	r0, [pc, #32]	; (8001330 <DS18B20_WriteBit+0x64>)
 8001310:	f001 ffe3 	bl	80032da <HAL_GPIO_WritePin>
		DS18B20_InputSet();
 8001314:	f000 f876 	bl	8001404 <DS18B20_InputSet>
		Tim2Delay_us(WRITETIMESLOT_SAMPLETIME);
 8001318:	2046      	movs	r0, #70	; 0x46
 800131a:	f000 fe37 	bl	8001f8c <Tim2Delay_us>
		Tim2Delay_us(WRITETIMESLOT_RECOVERYTIME);
 800131e:	2005      	movs	r0, #5
 8001320:	f000 fe34 	bl	8001f8c <Tim2Delay_us>
		DS18B20_InputSet();
 8001324:	f000 f86e 	bl	8001404 <DS18B20_InputSet>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40011000 	.word	0x40011000

08001334 <DS18B20_ResetSequence>:




bool DS18B20_ResetSequence()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	int i;

	// Pull line low
	DS18B20_OutputSet();
 800133a:	f000 f841 	bl	80013c0 <DS18B20_OutputSet>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2102      	movs	r1, #2
 8001342:	481e      	ldr	r0, [pc, #120]	; (80013bc <DS18B20_ResetSequence+0x88>)
 8001344:	f001 ffc9 	bl	80032da <HAL_GPIO_WritePin>

	// Wait at least 500 us
	Tim2Delay_us(500);
 8001348:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134c:	f000 fe1e 	bl	8001f8c <Tim2Delay_us>

	// Release bus to wait for presence pulse
	DS18B20_InputSet();
 8001350:	f000 f858 	bl	8001404 <DS18B20_InputSet>

	// Wait for sensor to pull line low
	i = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) ==  GPIO_PIN_SET)
 8001358:	e00b      	b.n	8001372 <DS18B20_ResetSequence+0x3e>
	{
		if(i > 500)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001360:	dd01      	ble.n	8001366 <DS18B20_ResetSequence+0x32>
		{
			// Sensor not responding after 500 us wait...error
			return false;
 8001362:	2300      	movs	r3, #0
 8001364:	e026      	b.n	80013b4 <DS18B20_ResetSequence+0x80>
		}
		Tim2Delay_us(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 fe10 	bl	8001f8c <Tim2Delay_us>
		i++;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3301      	adds	r3, #1
 8001370:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) ==  GPIO_PIN_SET)
 8001372:	2102      	movs	r1, #2
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <DS18B20_ResetSequence+0x88>)
 8001376:	f001 ff99 	bl	80032ac <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d0ec      	beq.n	800135a <DS18B20_ResetSequence+0x26>
	}

	// Sensor pulled line low... Wait for sensor to release line
	i = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) ==  GPIO_PIN_RESET)
 8001384:	e00b      	b.n	800139e <DS18B20_ResetSequence+0x6a>
	{
		if(i > 500)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800138c:	dd01      	ble.n	8001392 <DS18B20_ResetSequence+0x5e>
		{
			// Sensor not responding after 500 us wait...error
			return false;
 800138e:	2300      	movs	r3, #0
 8001390:	e010      	b.n	80013b4 <DS18B20_ResetSequence+0x80>
		}
		Tim2Delay_us(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f000 fdfa 	bl	8001f8c <Tim2Delay_us>
		i++;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) ==  GPIO_PIN_RESET)
 800139e:	2102      	movs	r1, #2
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <DS18B20_ResetSequence+0x88>)
 80013a2:	f001 ff83 	bl	80032ac <HAL_GPIO_ReadPin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0ec      	beq.n	8001386 <DS18B20_ResetSequence+0x52>
	}

	Tim2Delay_us(WRITETIMESLOT_RECOVERYTIME);
 80013ac:	2005      	movs	r0, #5
 80013ae:	f000 fded 	bl	8001f8c <Tim2Delay_us>

	return true;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40011000 	.word	0x40011000

080013c0 <DS18B20_OutputSet>:




void DS18B20_OutputSet()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2102      	movs	r1, #2
 80013d6:	480a      	ldr	r0, [pc, #40]	; (8001400 <DS18B20_OutputSet+0x40>)
 80013d8:	f001 ff7f 	bl	80032da <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013dc:	2302      	movs	r3, #2
 80013de:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2302      	movs	r3, #2
 80013ea:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <DS18B20_OutputSet+0x40>)
 80013f2:	f001 fdd7 	bl	8002fa4 <HAL_GPIO_Init>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40011000 	.word	0x40011000

08001404 <DS18B20_InputSet>:



void DS18B20_InputSet()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001416:	2302      	movs	r3, #2
 8001418:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141e:	2301      	movs	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <DS18B20_InputSet+0x30>)
 8001428:	f001 fdbc 	bl	8002fa4 <HAL_GPIO_Init>
}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40011000 	.word	0x40011000

08001438 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_ADC1_Init+0x74>)
 800144a:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <MX_ADC1_Init+0x78>)
 800144c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_ADC1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_ADC1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_ADC1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_ADC1_Init+0x74>)
 8001462:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001466:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_ADC1_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_ADC1_Init+0x74>)
 8001470:	2201      	movs	r2, #1
 8001472:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_ADC1_Init+0x74>)
 8001476:	f000 ff1d 	bl	80022b4 <HAL_ADC_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001480:	f000 fa67 	bl	8001952 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001488:	2301      	movs	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_ADC1_Init+0x74>)
 8001496:	f001 fa29 	bl	80028ec <HAL_ADC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80014a0:	f000 fa57 	bl	8001952 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000200 	.word	0x20000200
 80014b0:	40012400 	.word	0x40012400

080014b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_ADC_MspInit+0x7c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d129      	bne.n	8001528 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a16      	ldr	r2, [pc, #88]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_ADC_MspInit+0x80>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001504:	2301      	movs	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001508:	2303      	movs	r3, #3
 800150a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	4619      	mov	r1, r3
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <HAL_ADC_MspInit+0x84>)
 8001514:	f001 fd46 	bl	8002fa4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2012      	movs	r0, #18
 800151e:	f001 fc58 	bl	8002dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001522:	2012      	movs	r0, #18
 8001524:	f001 fc71 	bl	8002e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40012400 	.word	0x40012400
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800

0800153c <TriggerAdcInt>:
  }
}

/* USER CODE BEGIN 1 */
void TriggerAdcInt()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TriggerAdcInt+0x10>)
 8001542:	f001 f837 	bl	80025b4 <HAL_ADC_Start_IT>
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000200 	.word	0x20000200

08001550 <AdcConvertValue>:


float AdcConvertValue(uint16_t inputValue)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
    float outputValue;

    outputValue = ((float) inputValue) * 3.3 / 4095;
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fb99 	bl	8000c94 <__aeabi_ui2f>
 8001562:	4603      	mov	r3, r0
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ff5f 	bl	8000428 <__aeabi_f2d>
 800156a:	a30d      	add	r3, pc, #52	; (adr r3, 80015a0 <AdcConvertValue+0x50>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7fe ffb2 	bl	80004d8 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	a30a      	add	r3, pc, #40	; (adr r3, 80015a8 <AdcConvertValue+0x58>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff f8d3 	bl	800072c <__aeabi_ddiv>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa7b 	bl	8000a88 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	60fb      	str	r3, [r7, #12]

    return outputValue;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	66666666 	.word	0x66666666
 80015a4:	400a6666 	.word	0x400a6666
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40affe00 	.word	0x40affe00

080015b0 <AdcConversionCallback>:



void AdcConversionCallback(ADC_HandleTypeDef *hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	AdcSampleValue = ADC1->DR & 0x0000FFFF;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <AdcConversionCallback+0x24>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <AdcConversionCallback+0x28>)
 80015c0:	801a      	strh	r2, [r3, #0]
	AdcValueReady = true;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <AdcConversionCallback+0x2c>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40012400 	.word	0x40012400
 80015d8:	200001fe 	.word	0x200001fe
 80015dc:	200001fd 	.word	0x200001fd

080015e0 <ConsoleDebugDataFormat>:

bool DebugOutputEnabled = true;


void ConsoleDebugDataFormat()
{
 80015e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af04      	add	r7, sp, #16
	__NOP();
 80015e8:	bf00      	nop
	sprintf((char*)UartTxBuffer, "#DBG: %.2f, %.2f ,%.2f\r",
			 ConsoleDataStream.AdcValue, ConsoleDataStream.SpiValue, ConsoleDataStream.DS18B20Value);
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <ConsoleDebugDataFormat+0x50>)
 80015ec:	681b      	ldr	r3, [r3, #0]
	sprintf((char*)UartTxBuffer, "#DBG: %.2f, %.2f ,%.2f\r",
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff1a 	bl	8000428 <__aeabi_f2d>
 80015f4:	4680      	mov	r8, r0
 80015f6:	4689      	mov	r9, r1
			 ConsoleDataStream.AdcValue, ConsoleDataStream.SpiValue, ConsoleDataStream.DS18B20Value);
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <ConsoleDebugDataFormat+0x50>)
 80015fa:	685b      	ldr	r3, [r3, #4]
	sprintf((char*)UartTxBuffer, "#DBG: %.2f, %.2f ,%.2f\r",
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff13 	bl	8000428 <__aeabi_f2d>
 8001602:	4604      	mov	r4, r0
 8001604:	460d      	mov	r5, r1
			 ConsoleDataStream.AdcValue, ConsoleDataStream.SpiValue, ConsoleDataStream.DS18B20Value);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <ConsoleDebugDataFormat+0x50>)
 8001608:	689b      	ldr	r3, [r3, #8]
	sprintf((char*)UartTxBuffer, "#DBG: %.2f, %.2f ,%.2f\r",
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff0c 	bl	8000428 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001618:	e9cd 4500 	strd	r4, r5, [sp]
 800161c:	4642      	mov	r2, r8
 800161e:	464b      	mov	r3, r9
 8001620:	4904      	ldr	r1, [pc, #16]	; (8001634 <ConsoleDebugDataFormat+0x54>)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <ConsoleDebugDataFormat+0x58>)
 8001624:	f005 fd94 	bl	8007150 <siprintf>
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001630:	2000024c 	.word	0x2000024c
 8001634:	08009408 	.word	0x08009408
 8001638:	200003c8 	.word	0x200003c8

0800163c <ConsoleDebugDataSend>:



void ConsoleDebugDataSend()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	if(DebugOutputEnabled)
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <ConsoleDebugDataSend+0x28>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00b      	beq.n	8001660 <ConsoleDebugDataSend+0x24>
	{
		ConsoleDebugDataFormat();
 8001648:	f7ff ffca 	bl	80015e0 <ConsoleDebugDataFormat>
		HAL_UART_Transmit(&huart3, UartTxBuffer, strlen((char*)UartTxBuffer), 100);
 800164c:	4806      	ldr	r0, [pc, #24]	; (8001668 <ConsoleDebugDataSend+0x2c>)
 800164e:	f7fe fd7f 	bl	8000150 <strlen>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	2364      	movs	r3, #100	; 0x64
 8001658:	4903      	ldr	r1, [pc, #12]	; (8001668 <ConsoleDebugDataSend+0x2c>)
 800165a:	4804      	ldr	r0, [pc, #16]	; (800166c <ConsoleDebugDataSend+0x30>)
 800165c:	f004 f9ba 	bl	80059d4 <HAL_UART_Transmit>
	}
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	200003c8 	.word	0x200003c8
 800166c:	20000430 	.word	0x20000430

08001670 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <MX_GPIO_Init+0xe8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a33      	ldr	r2, [pc, #204]	; (8001758 <MX_GPIO_Init+0xe8>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b31      	ldr	r3, [pc, #196]	; (8001758 <MX_GPIO_Init+0xe8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <MX_GPIO_Init+0xe8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a2d      	ldr	r2, [pc, #180]	; (8001758 <MX_GPIO_Init+0xe8>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <MX_GPIO_Init+0xe8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_GPIO_Init+0xe8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <MX_GPIO_Init+0xe8>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_GPIO_Init+0xe8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2120      	movs	r1, #32
 80016d0:	4822      	ldr	r0, [pc, #136]	; (800175c <MX_GPIO_Init+0xec>)
 80016d2:	f001 fe02 	bl	80032da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016dc:	4820      	ldr	r0, [pc, #128]	; (8001760 <MX_GPIO_Init+0xf0>)
 80016de:	f001 fdfc 	bl	80032da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4619      	mov	r1, r3
 80016f6:	481b      	ldr	r0, [pc, #108]	; (8001764 <MX_GPIO_Init+0xf4>)
 80016f8:	f001 fc54 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016fc:	2303      	movs	r3, #3
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001704:	2301      	movs	r3, #1
 8001706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4619      	mov	r1, r3
 800170e:	4815      	ldr	r0, [pc, #84]	; (8001764 <MX_GPIO_Init+0xf4>)
 8001710:	f001 fc48 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001714:	2320      	movs	r3, #32
 8001716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2302      	movs	r3, #2
 8001722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	4619      	mov	r1, r3
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <MX_GPIO_Init+0xec>)
 800172c:	f001 fc3a 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2302      	movs	r3, #2
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_GPIO_Init+0xf0>)
 800174a:	f001 fc2b 	bl	8002fa4 <HAL_GPIO_Init>

}
 800174e:	bf00      	nop
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	40010800 	.word	0x40010800
 8001760:	40010c00 	.word	0x40010c00
 8001764:	40011000 	.word	0x40011000

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176e:	f000 fd1b 	bl	80021a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001772:	f000 f897 	bl	80018a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f7ff ff7b 	bl	8001670 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800177a:	f000 fc2b 	bl	8001fd4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800177e:	f7ff fe5b 	bl	8001438 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001782:	f000 f8eb 	bl	800195c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001786:	f000 fb91 	bl	8001eac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID,  Tim2RolloverCallback);
 800178a:	4a35      	ldr	r2, [pc, #212]	; (8001860 <main+0xf8>)
 800178c:	210e      	movs	r1, #14
 800178e:	4835      	ldr	r0, [pc, #212]	; (8001864 <main+0xfc>)
 8001790:	f003 fd28 	bl	80051e4 <HAL_TIM_RegisterCallback>
  // ADC callback
  HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, AdcConversionCallback);
 8001794:	4a34      	ldr	r2, [pc, #208]	; (8001868 <main+0x100>)
 8001796:	2100      	movs	r1, #0
 8001798:	4834      	ldr	r0, [pc, #208]	; (800186c <main+0x104>)
 800179a:	f000 fe87 	bl	80024ac <HAL_ADC_RegisterCallback>
  // UART callbacks
  HAL_UART_RegisterCallback(&huart3, HAL_UART_RX_COMPLETE_CB_ID, UartRxCallback);
 800179e:	4a34      	ldr	r2, [pc, #208]	; (8001870 <main+0x108>)
 80017a0:	2103      	movs	r1, #3
 80017a2:	4834      	ldr	r0, [pc, #208]	; (8001874 <main+0x10c>)
 80017a4:	f004 f880 	bl	80058a8 <HAL_UART_RegisterCallback>
  HAL_UART_RegisterCallback(&huart3, HAL_UART_TX_COMPLETE_CB_ID, UartTxCallback);
 80017a8:	4a33      	ldr	r2, [pc, #204]	; (8001878 <main+0x110>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	4831      	ldr	r0, [pc, #196]	; (8001874 <main+0x10c>)
 80017ae:	f004 f87b 	bl	80058a8 <HAL_UART_RegisterCallback>
  // SPI callback
  HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_RX_COMPLETE_CB_ID, SpiRxCallback);
 80017b2:	4a32      	ldr	r2, [pc, #200]	; (800187c <main+0x114>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	4832      	ldr	r0, [pc, #200]	; (8001880 <main+0x118>)
 80017b8:	f002 fb3c 	bl	8003e34 <HAL_SPI_RegisterCallback>
  HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_TX_COMPLETE_CB_ID, SpiTxCallback);
 80017bc:	4a31      	ldr	r2, [pc, #196]	; (8001884 <main+0x11c>)
 80017be:	2100      	movs	r1, #0
 80017c0:	482f      	ldr	r0, [pc, #188]	; (8001880 <main+0x118>)
 80017c2:	f002 fb37 	bl	8003e34 <HAL_SPI_RegisterCallback>
  HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_TX_RX_COMPLETE_CB_ID, SpiTxRxCallback);
 80017c6:	4a30      	ldr	r2, [pc, #192]	; (8001888 <main+0x120>)
 80017c8:	2102      	movs	r1, #2
 80017ca:	482d      	ldr	r0, [pc, #180]	; (8001880 <main+0x118>)
 80017cc:	f002 fb32 	bl	8003e34 <HAL_SPI_RegisterCallback>
  // Enable RX interrupt
  HAL_UART_Receive_IT(&huart3, &UartRxValue, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	492e      	ldr	r1, [pc, #184]	; (800188c <main+0x124>)
 80017d4:	4827      	ldr	r0, [pc, #156]	; (8001874 <main+0x10c>)
 80017d6:	f004 f980 	bl	8005ada <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Disable SPI CS
  SpiChipSelectDisable();
 80017da:	f000 f9a9 	bl	8001b30 <SpiChipSelectDisable>
  // Trigger AD conversion
  TriggerAdcInt();
 80017de:	f7ff fead 	bl	800153c <TriggerAdcInt>
  // Start Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 80017e2:	4820      	ldr	r0, [pc, #128]	; (8001864 <main+0xfc>)
 80017e4:	f003 fa62 	bl	8004cac <HAL_TIM_Base_Start_IT>

  DS18B20_Test();
 80017e8:	f7ff fbfc 	bl	8000fe4 <DS18B20_Test>

  while (1)
  {

	  if(AdcValueReady)
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <main+0x128>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00c      	beq.n	800180e <main+0xa6>
	  {
		  AdcValueReady = false;
 80017f4:	4b26      	ldr	r3, [pc, #152]	; (8001890 <main+0x128>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
		  // Buffer AD converted value
		  ConsoleDataStream.AdcValue = AdcConvertValue(AdcSampleValue);
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <main+0x12c>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fea6 	bl	8001550 <AdcConvertValue>
 8001804:	4603      	mov	r3, r0
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <main+0x130>)
 8001808:	6013      	str	r3, [r2, #0]
		  // Trigger ADC conversion
		  TriggerAdcInt();
 800180a:	f7ff fe97 	bl	800153c <TriggerAdcInt>
	  }

	  // Read SPI value, convert it and buffer it
	  ConsoleDataStream.SpiValue = SpiConvertValue(TestSpi());
 800180e:	f000 f92f 	bl	8001a70 <TestSpi>
 8001812:	4603      	mov	r3, r0
 8001814:	b29b      	uxth	r3, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f960 	bl	8001adc <SpiConvertValue>
 800181c:	4603      	mov	r3, r0
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <main+0x130>)
 8001820:	6053      	str	r3, [r2, #4]

	  // Read temperature from DS18B20
	  ConsoleDataStream.DS18B20Value = DS18B20_Test();
 8001822:	f7ff fbdf 	bl	8000fe4 <DS18B20_Test>
 8001826:	4603      	mov	r3, r0
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <main+0x130>)
 800182a:	6093      	str	r3, [r2, #8]

	  // Print data
	  ConsoleDebugDataSend();
 800182c:	f7ff ff06 	bl	800163c <ConsoleDebugDataSend>

      // USER button
	  button1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001834:	4819      	ldr	r0, [pc, #100]	; (800189c <main+0x134>)
 8001836:	f001 fd39 	bl	80032ac <HAL_GPIO_ReadPin>
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	  button2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800183e:	2101      	movs	r1, #1
 8001840:	4816      	ldr	r0, [pc, #88]	; (800189c <main+0x134>)
 8001842:	f001 fd33 	bl	80032ac <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	71bb      	strb	r3, [r7, #6]
	  if((button1 == GPIO_PIN_RESET) || (button2 == GPIO_PIN_RESET))
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <main+0xee>
 8001850:	79bb      	ldrb	r3, [r7, #6]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ca      	bne.n	80017ec <main+0x84>
	  {
		  // USER led
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001856:	2120      	movs	r1, #32
 8001858:	4811      	ldr	r0, [pc, #68]	; (80018a0 <main+0x138>)
 800185a:	f001 fd56 	bl	800330a <HAL_GPIO_TogglePin>
	  if(AdcValueReady)
 800185e:	e7c5      	b.n	80017ec <main+0x84>
 8001860:	08001fb9 	.word	0x08001fb9
 8001864:	20000314 	.word	0x20000314
 8001868:	080015b1 	.word	0x080015b1
 800186c:	20000200 	.word	0x20000200
 8001870:	08002109 	.word	0x08002109
 8001874:	20000430 	.word	0x20000430
 8001878:	08002131 	.word	0x08002131
 800187c:	08001c11 	.word	0x08001c11
 8001880:	2000028c 	.word	0x2000028c
 8001884:	08001c1f 	.word	0x08001c1f
 8001888:	08001c2d 	.word	0x08001c2d
 800188c:	2000042c 	.word	0x2000042c
 8001890:	200001fd 	.word	0x200001fd
 8001894:	200001fe 	.word	0x200001fe
 8001898:	2000024c 	.word	0x2000024c
 800189c:	40011000 	.word	0x40011000
 80018a0:	40010800 	.word	0x40010800

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	; 0x50
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ae:	2228      	movs	r2, #40	; 0x28
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 fcaf 	bl	8007216 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d4:	2302      	movs	r3, #2
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d8:	2301      	movs	r3, #1
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018dc:	2310      	movs	r3, #16
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e0:	2302      	movs	r3, #2
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018e4:	2300      	movs	r3, #0
 80018e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018e8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80018ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fd22 	bl	800333c <HAL_RCC_OscConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80018fe:	f000 f828 	bl	8001952 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001902:	230f      	movs	r3, #15
 8001904:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001906:	2302      	movs	r3, #2
 8001908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001912:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2102      	movs	r1, #2
 800191e:	4618      	mov	r0, r3
 8001920:	f001 ff8e 	bl	8003840 <HAL_RCC_ClockConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800192a:	f000 f812 	bl	8001952 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800192e:	2302      	movs	r3, #2
 8001930:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001936:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	4618      	mov	r0, r3
 800193c:	f002 f90e 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001946:	f000 f804 	bl	8001952 <Error_Handler>
  }
}
 800194a:	bf00      	nop
 800194c:	3750      	adds	r7, #80	; 0x50
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001956:	b672      	cpsid	i
}
 8001958:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195a:	e7fe      	b.n	800195a <Error_Handler+0x8>

0800195c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001962:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <MX_SPI2_Init+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800196c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_SPI2_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001990:	2210      	movs	r2, #16
 8001992:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <MX_SPI2_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_SPI2_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <MX_SPI2_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_SPI2_Init+0x64>)
 80019a8:	220a      	movs	r2, #10
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_SPI2_Init+0x64>)
 80019ae:	f002 f98b 	bl	8003cc8 <HAL_SPI_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019b8:	f7ff ffcb 	bl	8001952 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000028c 	.word	0x2000028c
 80019c4:	40003800 	.word	0x40003800

080019c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <HAL_SPI_MspInit+0x9c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d139      	bne.n	8001a5c <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_SPI_MspInit+0xa0>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_SPI_MspInit+0xa0>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f2:	61d3      	str	r3, [r2, #28]
 80019f4:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_SPI_MspInit+0xa0>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_SPI_MspInit+0xa0>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a18      	ldr	r2, [pc, #96]	; (8001a68 <HAL_SPI_MspInit+0xa0>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_SPI_MspInit+0xa0>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a18:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480f      	ldr	r0, [pc, #60]	; (8001a6c <HAL_SPI_MspInit+0xa4>)
 8001a2e:	f001 fab9 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4619      	mov	r1, r3
 8001a46:	4809      	ldr	r0, [pc, #36]	; (8001a6c <HAL_SPI_MspInit+0xa4>)
 8001a48:	f001 faac 	bl	8002fa4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2024      	movs	r0, #36	; 0x24
 8001a52:	f001 f9be 	bl	8002dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001a56:	2024      	movs	r0, #36	; 0x24
 8001a58:	f001 f9d7 	bl	8002e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40003800 	.word	0x40003800
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010c00 	.word	0x40010c00

08001a70 <TestSpi>:
  }
}

/* USER CODE BEGIN 1 */
int16_t TestSpi()
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
	uint8_t address;
	uint8_t value[2];
	int16_t temperature;

	// READ ID
	address = ADD_ID;
 8001a76:	23d0      	movs	r3, #208	; 0xd0
 8001a78:	717b      	strb	r3, [r7, #5]
	SpiRead(address, value, 1);
 8001a7a:	797b      	ldrb	r3, [r7, #5]
 8001a7c:	4639      	mov	r1, r7
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f861 	bl	8001b48 <SpiRead>

    // WRITE HUMIDITY CONFIG
	address = ADD_CTRHUM;
 8001a86:	23f2      	movs	r3, #242	; 0xf2
 8001a88:	717b      	strb	r3, [r7, #5]
	value[0] = 0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	703b      	strb	r3, [r7, #0]
	SpiWrite(&address, value, 1);
 8001a8e:	4639      	mov	r1, r7
 8001a90:	1d7b      	adds	r3, r7, #5
 8001a92:	2201      	movs	r2, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 f87d 	bl	8001b94 <SpiWrite>

    // WRITE TEMPERATURE CONFIG | WRITE PRESSURE CONFIG | MODE
	address = ADD_CTRMEAS;
 8001a9a:	23f4      	movs	r3, #244	; 0xf4
 8001a9c:	717b      	strb	r3, [r7, #5]
	value[0] = 0b00100000 | 0b00000000 | 0b00000011;
 8001a9e:	2323      	movs	r3, #35	; 0x23
 8001aa0:	703b      	strb	r3, [r7, #0]
	SpiWrite(&address, value, 1);
 8001aa2:	4639      	mov	r1, r7
 8001aa4:	1d7b      	adds	r3, r7, #5
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f873 	bl	8001b94 <SpiWrite>

	// READ TEMPERATURE
	address = ADD_TEMPMSB;
 8001aae:	23fa      	movs	r3, #250	; 0xfa
 8001ab0:	717b      	strb	r3, [r7, #5]
	SpiRead(address, value, 2);
 8001ab2:	797b      	ldrb	r3, [r7, #5]
 8001ab4:	4639      	mov	r1, r7
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 f845 	bl	8001b48 <SpiRead>

	temperature = (value[0] << 8) + value[1];
 8001abe:	783b      	ldrb	r3, [r7, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	787b      	ldrb	r3, [r7, #1]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	80fb      	strh	r3, [r7, #6]

	return (temperature);
 8001ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <SpiConvertValue>:


float SpiConvertValue(uint16_t inputValue)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
	float outputValue;

	outputValue = ((float)inputValue) * 50 / 65535;
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f8d3 	bl	8000c94 <__aeabi_ui2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <SpiConvertValue+0x34>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f926 	bl	8000d44 <__aeabi_fmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4906      	ldr	r1, [pc, #24]	; (8001b14 <SpiConvertValue+0x38>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f9d5 	bl	8000eac <__aeabi_fdiv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	60fb      	str	r3, [r7, #12]

	return outputValue;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	42480000 	.word	0x42480000
 8001b14:	477fff00 	.word	0x477fff00

08001b18 <SpiChipSelectEnable>:


void SpiChipSelectEnable()
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b22:	4802      	ldr	r0, [pc, #8]	; (8001b2c <SpiChipSelectEnable+0x14>)
 8001b24:	f001 fbd9 	bl	80032da <HAL_GPIO_WritePin>
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40010c00 	.word	0x40010c00

08001b30 <SpiChipSelectDisable>:


void SpiChipSelectDisable()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b34:	2201      	movs	r2, #1
 8001b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3a:	4802      	ldr	r0, [pc, #8]	; (8001b44 <SpiChipSelectDisable+0x14>)
 8001b3c:	f001 fbcd 	bl	80032da <HAL_GPIO_WritePin>
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40010c00 	.word	0x40010c00

08001b48 <SpiRead>:


void SpiRead(uint8_t address, uint8_t *pData, uint16_t numBytes)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
 8001b54:	4613      	mov	r3, r2
 8001b56:	80bb      	strh	r3, [r7, #4]
	if(numBytes > 0)
 8001b58:	88bb      	ldrh	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d012      	beq.n	8001b84 <SpiRead+0x3c>
	{
		SpiBuffer[0] = address & SPI_READ_BIT_MASK;
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <SpiRead+0x44>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	7013      	strb	r3, [r2, #0]
		SpiChipSelectEnable();
 8001b64:	f7ff ffd8 	bl	8001b18 <SpiChipSelectEnable>
		HAL_SPI_Transmit(&hspi2, SpiBuffer, 1, 1);
 8001b68:	2301      	movs	r3, #1
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <SpiRead+0x44>)
 8001b6e:	4808      	ldr	r0, [pc, #32]	; (8001b90 <SpiRead+0x48>)
 8001b70:	f002 fa00 	bl	8003f74 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, pData, (uint16_t) numBytes, 5);
 8001b74:	88ba      	ldrh	r2, [r7, #4]
 8001b76:	2305      	movs	r3, #5
 8001b78:	6839      	ldr	r1, [r7, #0]
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <SpiRead+0x48>)
 8001b7c:	f002 fb3d 	bl	80041fa <HAL_SPI_Receive>
		SpiChipSelectDisable();
 8001b80:	f7ff ffd6 	bl	8001b30 <SpiChipSelectDisable>
	}
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000258 	.word	0x20000258
 8001b90:	2000028c 	.word	0x2000028c

08001b94 <SpiWrite>:



void SpiWrite(uint8_t *pAddress, uint8_t *pData, uint8_t numBytes)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	71fb      	strb	r3, [r7, #7]
	if(numBytes > 0)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d02b      	beq.n	8001c00 <SpiWrite+0x6c>
	{
		uint8_t j = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	75fb      	strb	r3, [r7, #23]
        for (uint8_t i = 0; i < numBytes; i++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	75bb      	strb	r3, [r7, #22]
 8001bb0:	e017      	b.n	8001be2 <SpiWrite+0x4e>
        {
        	SpiBuffer[j] = pAddress[i] & SPI_WRITE_BIT_MASK;
 8001bb2:	7dbb      	ldrb	r3, [r7, #22]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bc0:	b2d1      	uxtb	r1, r2
 8001bc2:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <SpiWrite+0x74>)
 8001bc4:	54d1      	strb	r1, [r2, r3]
        	SpiBuffer[j + 1] = pData[i];
 8001bc6:	7dbb      	ldrb	r3, [r7, #22]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	441a      	add	r2, r3
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	7811      	ldrb	r1, [r2, #0]
 8001bd2:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <SpiWrite+0x74>)
 8001bd4:	54d1      	strb	r1, [r2, r3]
        	j += 2;
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	75fb      	strb	r3, [r7, #23]
        for (uint8_t i = 0; i < numBytes; i++)
 8001bdc:	7dbb      	ldrb	r3, [r7, #22]
 8001bde:	3301      	adds	r3, #1
 8001be0:	75bb      	strb	r3, [r7, #22]
 8001be2:	7dba      	ldrb	r2, [r7, #22]
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d3e3      	bcc.n	8001bb2 <SpiWrite+0x1e>
        }
        SpiChipSelectEnable();
 8001bea:	f7ff ff95 	bl	8001b18 <SpiChipSelectEnable>
        HAL_SPI_Transmit(&hspi2, SpiBuffer, j, 2);
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	4904      	ldr	r1, [pc, #16]	; (8001c08 <SpiWrite+0x74>)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <SpiWrite+0x78>)
 8001bf8:	f002 f9bc 	bl	8003f74 <HAL_SPI_Transmit>
        SpiChipSelectDisable();
 8001bfc:	f7ff ff98 	bl	8001b30 <SpiChipSelectDisable>
	}
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000258 	.word	0x20000258
 8001c0c:	2000028c 	.word	0x2000028c

08001c10 <SpiRxCallback>:



void SpiRxCallback()
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	__NOP();
 8001c14:	bf00      	nop
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <SpiTxCallback>:

void SpiTxCallback()
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
	__NOP();
 8001c22:	bf00      	nop
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <SpiTxRxCallback>:

void SpiTxRxCallback()
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
	__NOP();
 8001c30:	bf00      	nop
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_MspInit+0x40>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <HAL_MspInit+0x40>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6193      	str	r3, [r2, #24]
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_MspInit+0x40>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_MspInit+0x40>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_MspInit+0x40>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61d3      	str	r3, [r2, #28]
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_MspInit+0x40>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	40021000 	.word	0x40021000

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <NMI_Handler+0x4>

08001c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <HardFault_Handler+0x4>

08001c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <MemManage_Handler+0x4>

08001c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <BusFault_Handler+0x4>

08001c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <UsageFault_Handler+0x4>

08001c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc6:	f000 fab5 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <ADC1_2_IRQHandler+0x10>)
 8001cd6:	f000 fd23 	bl	8002720 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000200 	.word	0x20000200

08001ce4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <TIM2_IRQHandler+0x10>)
 8001cea:	f003 f831 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000314 	.word	0x20000314

08001cf8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <SPI2_IRQHandler+0x10>)
 8001cfe:	f002 fd45 	bl	800478c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000028c 	.word	0x2000028c

08001d0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <USART3_IRQHandler+0x10>)
 8001d12:	f003 ff07 	bl	8005b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000430 	.word	0x20000430

08001d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <_kill>:

int _kill(int pid, int sig)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d38:	f005 fac0 	bl	80072bc <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2216      	movs	r2, #22
 8001d40:	601a      	str	r2, [r3, #0]
  return -1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_exit>:

void _exit (int status)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d56:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffe7 	bl	8001d2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d60:	e7fe      	b.n	8001d60 <_exit+0x12>

08001d62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e00a      	b.n	8001d8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d74:	f3af 8000 	nop.w
 8001d78:	4601      	mov	r1, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	b2ca      	uxtb	r2, r1
 8001d82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3301      	adds	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	dbf0      	blt.n	8001d74 <_read+0x12>
  }

  return len;
 8001d92:	687b      	ldr	r3, [r7, #4]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e009      	b.n	8001dc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	60ba      	str	r2, [r7, #8]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf1      	blt.n	8001dae <_write+0x12>
  }
  return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_close>:

int _close(int file)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfa:	605a      	str	r2, [r3, #4]
  return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <_isatty>:

int _isatty(int file)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <_sbrk+0x5c>)
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <_sbrk+0x60>)
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <_sbrk+0x64>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <_sbrk+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d207      	bcs.n	8001e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e64:	f005 fa2a 	bl	80072bc <__errno>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e009      	b.n	8001e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <_sbrk+0x64>)
 8001e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e86:	68fb      	ldr	r3, [r7, #12]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20005000 	.word	0x20005000
 8001e94:	00000400 	.word	0x00000400
 8001e98:	2000030c 	.word	0x2000030c
 8001e9c:	200005f8 	.word	0x200005f8

08001ea0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_TIM2_Init+0x94>)
 8001eca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ece:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_TIM2_Init+0x94>)
 8001ed2:	223f      	movs	r2, #63	; 0x3f
 8001ed4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_TIM2_Init+0x94>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <MX_TIM2_Init+0x94>)
 8001ede:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ee2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <MX_TIM2_Init+0x94>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_TIM2_Init+0x94>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef0:	4813      	ldr	r0, [pc, #76]	; (8001f40 <MX_TIM2_Init+0x94>)
 8001ef2:	f002 fe7f 	bl	8004bf4 <HAL_TIM_Base_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001efc:	f7ff fd29 	bl	8001952 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <MX_TIM2_Init+0x94>)
 8001f0e:	f003 f847 	bl	8004fa0 <HAL_TIM_ConfigClockSource>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f18:	f7ff fd1b 	bl	8001952 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f24:	463b      	mov	r3, r7
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_TIM2_Init+0x94>)
 8001f2a:	f003 fbe5 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f7ff fd0d 	bl	8001952 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000314 	.word	0x20000314

08001f44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d113      	bne.n	8001f7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_TIM_Base_MspInit+0x44>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <HAL_TIM_Base_MspInit+0x44>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_TIM_Base_MspInit+0x44>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	201c      	movs	r0, #28
 8001f74:	f000 ff2d 	bl	8002dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f78:	201c      	movs	r0, #28
 8001f7a:	f000 ff46 	bl	8002e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000

08001f8c <Tim2Delay_us>:




void Tim2Delay_us(uint32_t us)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0;
 8001f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < us);
 8001f9c:	bf00      	nop
 8001f9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d8f9      	bhi.n	8001f9e <Tim2Delay_us+0x12>
}
 8001faa:	bf00      	nop
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <Tim2RolloverCallback>:



void Tim2RolloverCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	Timer2Ticked = true;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <Tim2RolloverCallback+0x18>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	20000310 	.word	0x20000310

08001fd4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_USART3_UART_Init+0x5c>)
 8001fda:	4a16      	ldr	r2, [pc, #88]	; (8002034 <MX_USART3_UART_Init+0x60>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <MX_USART3_UART_Init+0x5c>)
 8001fe0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fe4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_USART3_UART_Init+0x5c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <MX_USART3_UART_Init+0x5c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_USART3_UART_Init+0x5c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <MX_USART3_UART_Init+0x5c>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_USART3_UART_Init+0x5c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <MX_USART3_UART_Init+0x5c>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800200a:	4809      	ldr	r0, [pc, #36]	; (8002030 <MX_USART3_UART_Init+0x5c>)
 800200c:	f003 fbee 	bl	80057ec <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002016:	f7ff fc9c 	bl	8001952 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  USART3->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE | USART_CR1_TCIE);
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_USART3_UART_Init+0x60>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <MX_USART3_UART_Init+0x60>)
 8002020:	f443 5301 	orr.w	r3, r3, #8256	; 0x2040
 8002024:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8002028:	60d3      	str	r3, [r2, #12]
  /* USER CODE END USART3_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000430 	.word	0x20000430
 8002034:	40004800 	.word	0x40004800

08002038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a29      	ldr	r2, [pc, #164]	; (80020f8 <HAL_UART_MspInit+0xc0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d14b      	bne.n	80020f0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_UART_MspInit+0xc4>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	4a27      	ldr	r2, [pc, #156]	; (80020fc <HAL_UART_MspInit+0xc4>)
 800205e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002062:	61d3      	str	r3, [r2, #28]
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_UART_MspInit+0xc4>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_UART_MspInit+0xc4>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a21      	ldr	r2, [pc, #132]	; (80020fc <HAL_UART_MspInit+0xc4>)
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_UART_MspInit+0xc4>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4818      	ldr	r0, [pc, #96]	; (8002100 <HAL_UART_MspInit+0xc8>)
 800209e:	f000 ff81 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4812      	ldr	r0, [pc, #72]	; (8002100 <HAL_UART_MspInit+0xc8>)
 80020b8:	f000 ff74 	bl	8002fa4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_UART_MspInit+0xcc>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	f043 0310 	orr.w	r3, r3, #16
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_UART_MspInit+0xcc>)
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2027      	movs	r0, #39	; 0x27
 80020e6:	f000 fe74 	bl	8002dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020ea:	2027      	movs	r0, #39	; 0x27
 80020ec:	f000 fe8d 	bl	8002e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40004800 	.word	0x40004800
 80020fc:	40021000 	.word	0x40021000
 8002100:	40011000 	.word	0x40011000
 8002104:	40010000 	.word	0x40010000

08002108 <UartRxCallback>:
	HAL_UART_Receive_IT(&huart3, &UartRxValue, 1);
}


void UartRxCallback(UART_HandleTypeDef *huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	UartRxReceived = true;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <UartRxCallback+0x20>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
    // Toggle led
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002116:	2120      	movs	r1, #32
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <UartRxCallback+0x24>)
 800211a:	f001 f8f6 	bl	800330a <HAL_GPIO_TogglePin>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000042d 	.word	0x2000042d
 800212c:	40010800 	.word	0x40010800

08002130 <UartTxCallback>:



void UartTxCallback(UART_HandleTypeDef *huart)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
    // Enable transfer complete interrupt
    USART3->CR1 |= USART_CR1_TCIE;
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <UartTxCallback+0x28>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a06      	ldr	r2, [pc, #24]	; (8002158 <UartTxCallback+0x28>)
 800213e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002142:	60d3      	str	r3, [r2, #12]
    // Reset transfer complete flag
    USART3->SR &= !USART_SR_TC_Msk;
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <UartTxCallback+0x28>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <UartTxCallback+0x28>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40004800 	.word	0x40004800

0800215c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800215c:	f7ff fea0 	bl	8001ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002160:	480b      	ldr	r0, [pc, #44]	; (8002190 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002162:	490c      	ldr	r1, [pc, #48]	; (8002194 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002164:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002168:	e002      	b.n	8002170 <LoopCopyDataInit>

0800216a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800216c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216e:	3304      	adds	r3, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002174:	d3f9      	bcc.n	800216a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002178:	4c09      	ldr	r4, [pc, #36]	; (80021a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800217c:	e001      	b.n	8002182 <LoopFillZerobss>

0800217e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002180:	3204      	adds	r2, #4

08002182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002184:	d3fb      	bcc.n	800217e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002186:	f005 f89f 	bl	80072c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800218a:	f7ff faed 	bl	8001768 <main>
  bx lr
 800218e:	4770      	bx	lr
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002198:	080097c4 	.word	0x080097c4
  ldr r2, =_sbss
 800219c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021a0:	200005f8 	.word	0x200005f8

080021a4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <CAN1_RX1_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_Init+0x28>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_Init+0x28>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 fdff 	bl	8002dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	200f      	movs	r0, #15
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7ff fd3a 	bl	8001c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40022000 	.word	0x40022000

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fe17 	bl	8002e26 <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f000 fddf 	bl	8002dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000004 	.word	0x20000004
 800222c:	2000000c 	.word	0x2000000c
 8002230:	20000008 	.word	0x20000008

08002234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_IncTick+0x1c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_IncTick+0x20>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_IncTick+0x20>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	2000000c 	.word	0x2000000c
 8002254:	200004a8 	.word	0x200004a8

08002258 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_GetTick+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	200004a8 	.word	0x200004a8

0800226c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff fff0 	bl	8002258 <HAL_GetTick>
 8002278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d005      	beq.n	8002292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_Delay+0x44>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002292:	bf00      	nop
 8002294:	f7ff ffe0 	bl	8002258 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d8f7      	bhi.n	8002294 <HAL_Delay+0x28>
  {
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000000c 	.word	0x2000000c

080022b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0d5      	b.n	8002482 <HAL_ADC_Init+0x1ce>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d120      	bne.n	8002326 <HAL_ADC_Init+0x72>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a65      	ldr	r2, [pc, #404]	; (800248c <HAL_ADC_Init+0x1d8>)
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a65      	ldr	r2, [pc, #404]	; (8002490 <HAL_ADC_Init+0x1dc>)
 80022fc:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a64      	ldr	r2, [pc, #400]	; (8002494 <HAL_ADC_Init+0x1e0>)
 8002302:	639a      	str	r2, [r3, #56]	; 0x38
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a64      	ldr	r2, [pc, #400]	; (8002498 <HAL_ADC_Init+0x1e4>)
 8002308:	63da      	str	r2, [r3, #60]	; 0x3c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a63      	ldr	r2, [pc, #396]	; (800249c <HAL_ADC_Init+0x1e8>)
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (hadc->MspInitCallback == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a61      	ldr	r2, [pc, #388]	; (80024a0 <HAL_ADC_Init+0x1ec>)
 800231c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fc32 	bl	8002b90 <ADC_ConversionStop_Disable>
 800232c:	4603      	mov	r3, r0
 800232e:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 8099 	bne.w	8002470 <HAL_ADC_Init+0x1bc>
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 8095 	bne.w	8002470 <HAL_ADC_Init+0x1bc>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800234e:	f023 0302 	bic.w	r3, r3, #2
 8002352:	f043 0202 	orr.w	r2, r3, #2
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002362:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7b1b      	ldrb	r3, [r3, #12]
 8002368:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800236a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	4313      	orrs	r3, r2
 8002370:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237a:	d003      	beq.n	8002384 <HAL_ADC_Init+0xd0>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d102      	bne.n	800238a <HAL_ADC_Init+0xd6>
 8002384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002388:	e000      	b.n	800238c <HAL_ADC_Init+0xd8>
 800238a:	2300      	movs	r3, #0
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7d1b      	ldrb	r3, [r3, #20]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d119      	bne.n	80023ce <HAL_ADC_Init+0x11a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	7b1b      	ldrb	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_ADC_Init+0x102>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	035a      	lsls	r2, r3, #13
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	e00b      	b.n	80023ce <HAL_ADC_Init+0x11a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	f043 0220 	orr.w	r2, r3, #32
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_ADC_Init+0x1f0>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	430b      	orrs	r3, r1
 80023f4:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fe:	d003      	beq.n	8002408 <HAL_ADC_Init+0x154>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d104      	bne.n	8002412 <HAL_ADC_Init+0x15e>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	3b01      	subs	r3, #1
 800240e:	051b      	lsls	r3, r3, #20
 8002410:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	430a      	orrs	r2, r1
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_ADC_Init+0x1f4>)
 800242e:	4013      	ands	r3, r2
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	d10b      	bne.n	800244e <HAL_ADC_Init+0x19a>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f023 0303 	bic.w	r3, r3, #3
 8002444:	f043 0201 	orr.w	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800244c:	e018      	b.n	8002480 <HAL_ADC_Init+0x1cc>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	f023 0312 	bic.w	r3, r3, #18
 8002456:	f043 0210 	orr.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800246e:	e007      	b.n	8002480 <HAL_ADC_Init+0x1cc>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	f043 0210 	orr.w	r2, r3, #16
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002480:	7dfb      	ldrb	r3, [r7, #23]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	080028a5 	.word	0x080028a5
 8002490:	080028b7 	.word	0x080028b7
 8002494:	080028c9 	.word	0x080028c9
 8002498:	080028db 	.word	0x080028db
 800249c:	08002c13 	.word	0x08002c13
 80024a0:	080014b5 	.word	0x080014b5
 80024a4:	ffe1f7fd 	.word	0xffe1f7fd
 80024a8:	ff1f0efe 	.word	0xff1f0efe

080024ac <HAL_ADC_RegisterCallback>:
  *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID, pADC_CallbackTypeDef pCallback)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	460b      	mov	r3, r1
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]
  
  if (pCallback == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d107      	bne.n	80024d4 <HAL_ADC_RegisterCallback+0x28>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	f043 0210 	orr.w	r2, r3, #16
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c

    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e06a      	b.n	80025aa <HAL_ADC_RegisterCallback+0xfe>
  }
  
  if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d040      	beq.n	8002562 <HAL_ADC_RegisterCallback+0xb6>
  {
    switch (CallbackID)
 80024e0:	7afb      	ldrb	r3, [r7, #11]
 80024e2:	2b0a      	cmp	r3, #10
 80024e4:	d834      	bhi.n	8002550 <HAL_ADC_RegisterCallback+0xa4>
 80024e6:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <HAL_ADC_RegisterCallback+0x40>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	08002519 	.word	0x08002519
 80024f0:	08002521 	.word	0x08002521
 80024f4:	08002529 	.word	0x08002529
 80024f8:	08002531 	.word	0x08002531
 80024fc:	08002539 	.word	0x08002539
 8002500:	08002551 	.word	0x08002551
 8002504:	08002551 	.word	0x08002551
 8002508:	08002551 	.word	0x08002551
 800250c:	08002551 	.word	0x08002551
 8002510:	08002541 	.word	0x08002541
 8002514:	08002549 	.word	0x08002549
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800251e:	e043      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8002526:	e03f      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800252e:	e03b      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 8002536:	e037      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
        hadc->InjectedConvCpltCallback = pCallback;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 800253e:	e033      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8002546:	e02f      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800254e:	e02b      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
      
      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f043 0210 	orr.w	r2, r3, #16
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Return error status */
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	75fb      	strb	r3, [r7, #23]
        break;
 8002560:	e022      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <HAL_ADC_RegisterCallback+0xec>
  {
    switch (CallbackID)
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	2b09      	cmp	r3, #9
 800256e:	d002      	beq.n	8002576 <HAL_ADC_RegisterCallback+0xca>
 8002570:	2b0a      	cmp	r3, #10
 8002572:	d004      	beq.n	800257e <HAL_ADC_RegisterCallback+0xd2>
 8002574:	e007      	b.n	8002586 <HAL_ADC_RegisterCallback+0xda>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800257c:	e014      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
      
      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8002584:	e010      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
      
      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	f043 0210 	orr.w	r2, r3, #16
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
      
        /* Return error status */
        status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
        break;
 8002596:	e007      	b.n	80025a8 <HAL_ADC_RegisterCallback+0xfc>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Return error status */
    status =  HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Start_IT+0x1a>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0a0      	b.n	8002710 <HAL_ADC_Start_IT+0x15c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fa80 	bl	8002adc <ADC_Enable>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 808f 	bne.w	8002706 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a45      	ldr	r2, [pc, #276]	; (8002718 <HAL_ADC_Start_IT+0x164>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d105      	bne.n	8002612 <HAL_ADC_Start_IT+0x5e>
 8002606:	4b45      	ldr	r3, [pc, #276]	; (800271c <HAL_ADC_Start_IT+0x168>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d115      	bne.n	800263e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d026      	beq.n	800267a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800263c:	e01d      	b.n	800267a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a33      	ldr	r2, [pc, #204]	; (800271c <HAL_ADC_Start_IT+0x168>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d004      	beq.n	800265e <HAL_ADC_Start_IT+0xaa>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2f      	ldr	r2, [pc, #188]	; (8002718 <HAL_ADC_Start_IT+0x164>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10d      	bne.n	800267a <HAL_ADC_Start_IT+0xc6>
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_ADC_Start_IT+0x168>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002672:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	f023 0206 	bic.w	r2, r3, #6
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c
 8002692:	e002      	b.n	800269a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f06f 0202 	mvn.w	r2, #2
 80026aa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0220 	orr.w	r2, r2, #32
 80026ba:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026ca:	d113      	bne.n	80026f4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026d0:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_ADC_Start_IT+0x164>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d105      	bne.n	80026e2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_ADC_Start_IT+0x168>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	e00c      	b.n	800270e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	e003      	b.n	800270e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40012800 	.word	0x40012800
 800271c:	40012400 	.word	0x40012400

08002720 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d03f      	beq.n	80027c2 <HAL_ADC_IRQHandler+0xa2>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d03a      	beq.n	80027c2 <HAL_ADC_IRQHandler+0xa2>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800276e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002772:	d11d      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002778:	2b00      	cmp	r3, #0
 800277a:	d119      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0220 	bic.w	r2, r2, #32
 800278a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
#else
      HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0212 	mvn.w	r2, #18
 80027c0:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d04e      	beq.n	800286a <HAL_ADC_IRQHandler+0x14a>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d049      	beq.n	800286a <HAL_ADC_IRQHandler+0x14a>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_ADC_IRQHandler+0xce>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80027f8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80027fc:	d012      	beq.n	8002824 <HAL_ADC_IRQHandler+0x104>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002808:	2b00      	cmp	r3, #0
 800280a:	d125      	bne.n	8002858 <HAL_ADC_IRQHandler+0x138>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002816:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800281a:	d11d      	bne.n	8002858 <HAL_ADC_IRQHandler+0x138>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002820:	2b00      	cmp	r3, #0
 8002822:	d119      	bne.n	8002858 <HAL_ADC_IRQHandler+0x138>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002832:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <HAL_ADC_IRQHandler+0x138>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 020c 	mvn.w	r2, #12
 8002868:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00e      	beq.n	800289c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f06f 0201 	mvn.w	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x20>
 8002908:	2302      	movs	r3, #2
 800290a:	e0dc      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x1da>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b06      	cmp	r3, #6
 800291a:	d81c      	bhi.n	8002956 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	3b05      	subs	r3, #5
 800292e:	221f      	movs	r2, #31
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	4019      	ands	r1, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3b05      	subs	r3, #5
 8002948:	fa00 f203 	lsl.w	r2, r0, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	635a      	str	r2, [r3, #52]	; 0x34
 8002954:	e03c      	b.n	80029d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d81c      	bhi.n	8002998 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	3b23      	subs	r3, #35	; 0x23
 8002970:	221f      	movs	r2, #31
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	4019      	ands	r1, r3
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	3b23      	subs	r3, #35	; 0x23
 800298a:	fa00 f203 	lsl.w	r2, r0, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
 8002996:	e01b      	b.n	80029d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	3b41      	subs	r3, #65	; 0x41
 80029aa:	221f      	movs	r2, #31
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	4019      	ands	r1, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b41      	subs	r3, #65	; 0x41
 80029c4:	fa00 f203 	lsl.w	r2, r0, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b09      	cmp	r3, #9
 80029d6:	d91c      	bls.n	8002a12 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68d9      	ldr	r1, [r3, #12]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	3b1e      	subs	r3, #30
 80029ea:	2207      	movs	r2, #7
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	4019      	ands	r1, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6898      	ldr	r0, [r3, #8]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	3b1e      	subs	r3, #30
 8002a04:	fa00 f203 	lsl.w	r2, r0, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	e019      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6919      	ldr	r1, [r3, #16]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	2207      	movs	r2, #7
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4019      	ands	r1, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6898      	ldr	r0, [r3, #8]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d003      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a52:	2b11      	cmp	r3, #17
 8002a54:	d132      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d125      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d126      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a7c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d11a      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	0c9a      	lsrs	r2, r3, #18
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a9c:	e002      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f9      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x1b2>
 8002aaa:	e007      	b.n	8002abc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	40012400 	.word	0x40012400
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	431bde83 	.word	0x431bde83

08002adc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d040      	beq.n	8002b7c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <ADC_Enable+0xac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <ADC_Enable+0xb0>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	0c9b      	lsrs	r3, r3, #18
 8002b16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b18:	e002      	b.n	8002b20 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b26:	f7ff fb97 	bl	8002258 <HAL_GetTick>
 8002b2a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b2c:	e01f      	b.n	8002b6e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b2e:	f7ff fb93 	bl	8002258 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d918      	bls.n	8002b6e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d011      	beq.n	8002b6e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e007      	b.n	8002b7e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d1d8      	bne.n	8002b2e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	431bde83 	.word	0x431bde83

08002b90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d12e      	bne.n	8002c08 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bba:	f7ff fb4d 	bl	8002258 <HAL_GetTick>
 8002bbe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bc0:	e01b      	b.n	8002bfa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bc2:	f7ff fb49 	bl	8002258 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d914      	bls.n	8002bfa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10d      	bne.n	8002bfa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f043 0210 	orr.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e007      	b.n	8002c0a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d0dc      	beq.n	8002bc2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c40:	4013      	ands	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c56:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60d3      	str	r3, [r2, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <__NVIC_GetPriorityGrouping+0x18>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	f003 0307 	and.w	r3, r3, #7
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db0b      	blt.n	8002cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	4906      	ldr	r1, [pc, #24]	; (8002cbc <__NVIC_EnableIRQ+0x34>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2001      	movs	r0, #1
 8002caa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	db0a      	blt.n	8002cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	490c      	ldr	r1, [pc, #48]	; (8002d0c <__NVIC_SetPriority+0x4c>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce8:	e00a      	b.n	8002d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4908      	ldr	r1, [pc, #32]	; (8002d10 <__NVIC_SetPriority+0x50>)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	761a      	strb	r2, [r3, #24]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000e100 	.word	0xe000e100
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f1c3 0307 	rsb	r3, r3, #7
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	bf28      	it	cs
 8002d32:	2304      	movcs	r3, #4
 8002d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d902      	bls.n	8002d44 <NVIC_EncodePriority+0x30>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3b03      	subs	r3, #3
 8002d42:	e000      	b.n	8002d46 <NVIC_EncodePriority+0x32>
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	401a      	ands	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43d9      	mvns	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	4313      	orrs	r3, r2
         );
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	; 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d88:	d301      	bcc.n	8002d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00f      	b.n	8002dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <SysTick_Config+0x40>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d96:	210f      	movs	r1, #15
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	f7ff ff90 	bl	8002cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <SysTick_Config+0x40>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <SysTick_Config+0x40>)
 8002da8:	2207      	movs	r2, #7
 8002daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	e000e010 	.word	0xe000e010

08002dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff2d 	bl	8002c24 <__NVIC_SetPriorityGrouping>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de4:	f7ff ff42 	bl	8002c6c <__NVIC_GetPriorityGrouping>
 8002de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f7ff ff90 	bl	8002d14 <NVIC_EncodePriority>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff5f 	bl	8002cc0 <__NVIC_SetPriority>
}
 8002e02:	bf00      	nop
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff35 	bl	8002c88 <__NVIC_EnableIRQ>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ffa2 	bl	8002d78 <SysTick_Config>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d008      	beq.n	8002e68 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e020      	b.n	8002eaa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 020e 	bic.w	r2, r2, #14
 8002e76:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d005      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e051      	b.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 020e 	bic.w	r2, r2, #14
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <HAL_DMA_Abort_IT+0xd4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d029      	beq.n	8002f56 <HAL_DMA_Abort_IT+0xa2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a21      	ldr	r2, [pc, #132]	; (8002f8c <HAL_DMA_Abort_IT+0xd8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x9e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_DMA_Abort_IT+0xdc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01a      	beq.n	8002f4c <HAL_DMA_Abort_IT+0x98>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_DMA_Abort_IT+0xe0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d012      	beq.n	8002f46 <HAL_DMA_Abort_IT+0x92>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_DMA_Abort_IT+0xe4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00a      	beq.n	8002f40 <HAL_DMA_Abort_IT+0x8c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <HAL_DMA_Abort_IT+0xe8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d102      	bne.n	8002f3a <HAL_DMA_Abort_IT+0x86>
 8002f34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f38:	e00e      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f3e:	e00b      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f44:	e008      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f4a:	e005      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f50:	e002      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f52:	2310      	movs	r3, #16
 8002f54:	e000      	b.n	8002f58 <HAL_DMA_Abort_IT+0xa4>
 8002f56:	2301      	movs	r3, #1
 8002f58:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <HAL_DMA_Abort_IT+0xec>)
 8002f5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
    } 
  }
  return status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40020008 	.word	0x40020008
 8002f8c:	4002001c 	.word	0x4002001c
 8002f90:	40020030 	.word	0x40020030
 8002f94:	40020044 	.word	0x40020044
 8002f98:	40020058 	.word	0x40020058
 8002f9c:	4002006c 	.word	0x4002006c
 8002fa0:	40020000 	.word	0x40020000

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b08b      	sub	sp, #44	; 0x2c
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	e169      	b.n	800328c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	f040 8158 	bne.w	8003286 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a9a      	ldr	r2, [pc, #616]	; (8003244 <HAL_GPIO_Init+0x2a0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d05e      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002fe0:	4a98      	ldr	r2, [pc, #608]	; (8003244 <HAL_GPIO_Init+0x2a0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d875      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002fe6:	4a98      	ldr	r2, [pc, #608]	; (8003248 <HAL_GPIO_Init+0x2a4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d058      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002fec:	4a96      	ldr	r2, [pc, #600]	; (8003248 <HAL_GPIO_Init+0x2a4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d86f      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002ff2:	4a96      	ldr	r2, [pc, #600]	; (800324c <HAL_GPIO_Init+0x2a8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d052      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8002ff8:	4a94      	ldr	r2, [pc, #592]	; (800324c <HAL_GPIO_Init+0x2a8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d869      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8002ffe:	4a94      	ldr	r2, [pc, #592]	; (8003250 <HAL_GPIO_Init+0x2ac>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d04c      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8003004:	4a92      	ldr	r2, [pc, #584]	; (8003250 <HAL_GPIO_Init+0x2ac>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d863      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 800300a:	4a92      	ldr	r2, [pc, #584]	; (8003254 <HAL_GPIO_Init+0x2b0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d046      	beq.n	800309e <HAL_GPIO_Init+0xfa>
 8003010:	4a90      	ldr	r2, [pc, #576]	; (8003254 <HAL_GPIO_Init+0x2b0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d85d      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 8003016:	2b12      	cmp	r3, #18
 8003018:	d82a      	bhi.n	8003070 <HAL_GPIO_Init+0xcc>
 800301a:	2b12      	cmp	r3, #18
 800301c:	d859      	bhi.n	80030d2 <HAL_GPIO_Init+0x12e>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_GPIO_Init+0x80>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	0800309f 	.word	0x0800309f
 8003028:	08003079 	.word	0x08003079
 800302c:	0800308b 	.word	0x0800308b
 8003030:	080030cd 	.word	0x080030cd
 8003034:	080030d3 	.word	0x080030d3
 8003038:	080030d3 	.word	0x080030d3
 800303c:	080030d3 	.word	0x080030d3
 8003040:	080030d3 	.word	0x080030d3
 8003044:	080030d3 	.word	0x080030d3
 8003048:	080030d3 	.word	0x080030d3
 800304c:	080030d3 	.word	0x080030d3
 8003050:	080030d3 	.word	0x080030d3
 8003054:	080030d3 	.word	0x080030d3
 8003058:	080030d3 	.word	0x080030d3
 800305c:	080030d3 	.word	0x080030d3
 8003060:	080030d3 	.word	0x080030d3
 8003064:	080030d3 	.word	0x080030d3
 8003068:	08003081 	.word	0x08003081
 800306c:	08003095 	.word	0x08003095
 8003070:	4a79      	ldr	r2, [pc, #484]	; (8003258 <HAL_GPIO_Init+0x2b4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003076:	e02c      	b.n	80030d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	623b      	str	r3, [r7, #32]
          break;
 800307e:	e029      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	3304      	adds	r3, #4
 8003086:	623b      	str	r3, [r7, #32]
          break;
 8003088:	e024      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	3308      	adds	r3, #8
 8003090:	623b      	str	r3, [r7, #32]
          break;
 8003092:	e01f      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	330c      	adds	r3, #12
 800309a:	623b      	str	r3, [r7, #32]
          break;
 800309c:	e01a      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030a6:	2304      	movs	r3, #4
 80030a8:	623b      	str	r3, [r7, #32]
          break;
 80030aa:	e013      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030b4:	2308      	movs	r3, #8
 80030b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	611a      	str	r2, [r3, #16]
          break;
 80030be:	e009      	b.n	80030d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c0:	2308      	movs	r3, #8
 80030c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	615a      	str	r2, [r3, #20]
          break;
 80030ca:	e003      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
          break;
 80030d0:	e000      	b.n	80030d4 <HAL_GPIO_Init+0x130>
          break;
 80030d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2bff      	cmp	r3, #255	; 0xff
 80030d8:	d801      	bhi.n	80030de <HAL_GPIO_Init+0x13a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	e001      	b.n	80030e2 <HAL_GPIO_Init+0x13e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2bff      	cmp	r3, #255	; 0xff
 80030e8:	d802      	bhi.n	80030f0 <HAL_GPIO_Init+0x14c>
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	e002      	b.n	80030f6 <HAL_GPIO_Init+0x152>
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	3b08      	subs	r3, #8
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	210f      	movs	r1, #15
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	401a      	ands	r2, r3
 8003108:	6a39      	ldr	r1, [r7, #32]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80b1 	beq.w	8003286 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003124:	4b4d      	ldr	r3, [pc, #308]	; (800325c <HAL_GPIO_Init+0x2b8>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_GPIO_Init+0x2b8>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6193      	str	r3, [r2, #24]
 8003130:	4b4a      	ldr	r3, [pc, #296]	; (800325c <HAL_GPIO_Init+0x2b8>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800313c:	4a48      	ldr	r2, [pc, #288]	; (8003260 <HAL_GPIO_Init+0x2bc>)
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	089b      	lsrs	r3, r3, #2
 8003142:	3302      	adds	r3, #2
 8003144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003148:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	220f      	movs	r2, #15
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a40      	ldr	r2, [pc, #256]	; (8003264 <HAL_GPIO_Init+0x2c0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_GPIO_Init+0x1ec>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3f      	ldr	r2, [pc, #252]	; (8003268 <HAL_GPIO_Init+0x2c4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00d      	beq.n	800318c <HAL_GPIO_Init+0x1e8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3e      	ldr	r2, [pc, #248]	; (800326c <HAL_GPIO_Init+0x2c8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <HAL_GPIO_Init+0x1e4>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3d      	ldr	r2, [pc, #244]	; (8003270 <HAL_GPIO_Init+0x2cc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_GPIO_Init+0x1e0>
 8003180:	2303      	movs	r3, #3
 8003182:	e006      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 8003184:	2304      	movs	r3, #4
 8003186:	e004      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 8003188:	2302      	movs	r3, #2
 800318a:	e002      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_GPIO_Init+0x1ee>
 8003190:	2300      	movs	r3, #0
 8003192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003194:	f002 0203 	and.w	r2, r2, #3
 8003198:	0092      	lsls	r2, r2, #2
 800319a:	4093      	lsls	r3, r2
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031a2:	492f      	ldr	r1, [pc, #188]	; (8003260 <HAL_GPIO_Init+0x2bc>)
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3302      	adds	r3, #2
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	492c      	ldr	r1, [pc, #176]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
 80031c8:	e006      	b.n	80031d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4928      	ldr	r1, [pc, #160]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031e4:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4922      	ldr	r1, [pc, #136]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
 80031f0:	e006      	b.n	8003200 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	491e      	ldr	r1, [pc, #120]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4918      	ldr	r1, [pc, #96]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	43db      	mvns	r3, r3
 8003222:	4914      	ldr	r1, [pc, #80]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 8003224:	4013      	ands	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d021      	beq.n	8003278 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	490e      	ldr	r1, [pc, #56]	; (8003274 <HAL_GPIO_Init+0x2d0>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]
 8003240:	e021      	b.n	8003286 <HAL_GPIO_Init+0x2e2>
 8003242:	bf00      	nop
 8003244:	10320000 	.word	0x10320000
 8003248:	10310000 	.word	0x10310000
 800324c:	10220000 	.word	0x10220000
 8003250:	10210000 	.word	0x10210000
 8003254:	10120000 	.word	0x10120000
 8003258:	10110000 	.word	0x10110000
 800325c:	40021000 	.word	0x40021000
 8003260:	40010000 	.word	0x40010000
 8003264:	40010800 	.word	0x40010800
 8003268:	40010c00 	.word	0x40010c00
 800326c:	40011000 	.word	0x40011000
 8003270:	40011400 	.word	0x40011400
 8003274:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_GPIO_Init+0x304>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	43db      	mvns	r3, r3
 8003280:	4909      	ldr	r1, [pc, #36]	; (80032a8 <HAL_GPIO_Init+0x304>)
 8003282:	4013      	ands	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	3301      	adds	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	f47f ae8e 	bne.w	8002fb8 <HAL_GPIO_Init+0x14>
  }
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	372c      	adds	r7, #44	; 0x2c
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	40010400 	.word	0x40010400

080032ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e001      	b.n	80032ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	807b      	strh	r3, [r7, #2]
 80032e6:	4613      	mov	r3, r2
 80032e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ea:	787b      	ldrb	r3, [r7, #1]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f0:	887a      	ldrh	r2, [r7, #2]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032f6:	e003      	b.n	8003300 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032f8:	887b      	ldrh	r3, [r7, #2]
 80032fa:	041a      	lsls	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	611a      	str	r2, [r3, #16]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800331c:	887a      	ldrh	r2, [r7, #2]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	041a      	lsls	r2, r3, #16
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43d9      	mvns	r1, r3
 8003328:	887b      	ldrh	r3, [r7, #2]
 800332a:	400b      	ands	r3, r1
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	611a      	str	r2, [r3, #16]
}
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e272      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8087 	beq.w	800346a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800335c:	4b92      	ldr	r3, [pc, #584]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b04      	cmp	r3, #4
 8003366:	d00c      	beq.n	8003382 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003368:	4b8f      	ldr	r3, [pc, #572]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b08      	cmp	r3, #8
 8003372:	d112      	bne.n	800339a <HAL_RCC_OscConfig+0x5e>
 8003374:	4b8c      	ldr	r3, [pc, #560]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	d10b      	bne.n	800339a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003382:	4b89      	ldr	r3, [pc, #548]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d06c      	beq.n	8003468 <HAL_RCC_OscConfig+0x12c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d168      	bne.n	8003468 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e24c      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a2:	d106      	bne.n	80033b2 <HAL_RCC_OscConfig+0x76>
 80033a4:	4b80      	ldr	r3, [pc, #512]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a7f      	ldr	r2, [pc, #508]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	e02e      	b.n	8003410 <HAL_RCC_OscConfig+0xd4>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x98>
 80033ba:	4b7b      	ldr	r3, [pc, #492]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a7a      	ldr	r2, [pc, #488]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b78      	ldr	r3, [pc, #480]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a77      	ldr	r2, [pc, #476]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e01d      	b.n	8003410 <HAL_RCC_OscConfig+0xd4>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0xbc>
 80033de:	4b72      	ldr	r3, [pc, #456]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a71      	ldr	r2, [pc, #452]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b6f      	ldr	r3, [pc, #444]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6e      	ldr	r2, [pc, #440]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0xd4>
 80033f8:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a6a      	ldr	r2, [pc, #424]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80033fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a67      	ldr	r2, [pc, #412]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 800340a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d013      	beq.n	8003440 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fe ff1e 	bl	8002258 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003420:	f7fe ff1a 	bl	8002258 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	; 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e200      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	4b5d      	ldr	r3, [pc, #372]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0xe4>
 800343e:	e014      	b.n	800346a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe ff0a 	bl	8002258 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe ff06 	bl	8002258 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e1ec      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x10c>
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d063      	beq.n	800353e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003476:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003482:	4b49      	ldr	r3, [pc, #292]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b08      	cmp	r3, #8
 800348c:	d11c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x18c>
 800348e:	4b46      	ldr	r3, [pc, #280]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d116      	bne.n	80034c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_RCC_OscConfig+0x176>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d001      	beq.n	80034b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e1c0      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b2:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4939      	ldr	r1, [pc, #228]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	e03a      	b.n	800353e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d0:	4b36      	ldr	r3, [pc, #216]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fe febf 	bl	8002258 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034de:	f7fe febb 	bl	8002258 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e1a1      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4927      	ldr	r1, [pc, #156]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
 8003510:	e015      	b.n	800353e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe fe9e 	bl	8002258 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003520:	f7fe fe9a 	bl	8002258 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e180      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d03a      	beq.n	80035c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d019      	beq.n	8003586 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <HAL_RCC_OscConfig+0x274>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003558:	f7fe fe7e 	bl	8002258 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003560:	f7fe fe7a 	bl	8002258 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e160      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <HAL_RCC_OscConfig+0x26c>)
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800357e:	2001      	movs	r0, #1
 8003580:	f000 face 	bl	8003b20 <RCC_Delay>
 8003584:	e01c      	b.n	80035c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003586:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_RCC_OscConfig+0x274>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358c:	f7fe fe64 	bl	8002258 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003592:	e00f      	b.n	80035b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003594:	f7fe fe60 	bl	8002258 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d908      	bls.n	80035b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e146      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000
 80035ac:	42420000 	.word	0x42420000
 80035b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	4b92      	ldr	r3, [pc, #584]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e9      	bne.n	8003594 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a6 	beq.w	800371a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b8b      	ldr	r3, [pc, #556]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	4b88      	ldr	r3, [pc, #544]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	4a87      	ldr	r2, [pc, #540]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e8:	61d3      	str	r3, [r2, #28]
 80035ea:	4b85      	ldr	r3, [pc, #532]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b82      	ldr	r3, [pc, #520]	; (8003804 <HAL_RCC_OscConfig+0x4c8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	4b7f      	ldr	r3, [pc, #508]	; (8003804 <HAL_RCC_OscConfig+0x4c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a7e      	ldr	r2, [pc, #504]	; (8003804 <HAL_RCC_OscConfig+0x4c8>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fe fe21 	bl	8002258 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fe fe1d 	bl	8002258 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b64      	cmp	r3, #100	; 0x64
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e103      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	4b75      	ldr	r3, [pc, #468]	; (8003804 <HAL_RCC_OscConfig+0x4c8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x312>
 8003640:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4a6e      	ldr	r2, [pc, #440]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6213      	str	r3, [r2, #32]
 800364c:	e02d      	b.n	80036aa <HAL_RCC_OscConfig+0x36e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x334>
 8003656:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4a69      	ldr	r2, [pc, #420]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	6213      	str	r3, [r2, #32]
 8003662:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	4a66      	ldr	r2, [pc, #408]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	6213      	str	r3, [r2, #32]
 800366e:	e01c      	b.n	80036aa <HAL_RCC_OscConfig+0x36e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b05      	cmp	r3, #5
 8003676:	d10c      	bne.n	8003692 <HAL_RCC_OscConfig+0x356>
 8003678:	4b61      	ldr	r3, [pc, #388]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4a60      	ldr	r2, [pc, #384]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	6213      	str	r3, [r2, #32]
 8003684:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4a5d      	ldr	r2, [pc, #372]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6213      	str	r3, [r2, #32]
 8003690:	e00b      	b.n	80036aa <HAL_RCC_OscConfig+0x36e>
 8003692:	4b5b      	ldr	r3, [pc, #364]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a5a      	ldr	r2, [pc, #360]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6213      	str	r3, [r2, #32]
 800369e:	4b58      	ldr	r3, [pc, #352]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4a57      	ldr	r2, [pc, #348]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d015      	beq.n	80036de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b2:	f7fe fdd1 	bl	8002258 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ba:	f7fe fdcd 	bl	8002258 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0b1      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	4b4b      	ldr	r3, [pc, #300]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ee      	beq.n	80036ba <HAL_RCC_OscConfig+0x37e>
 80036dc:	e014      	b.n	8003708 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036de:	f7fe fdbb 	bl	8002258 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e6:	f7fe fdb7 	bl	8002258 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e09b      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fc:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ee      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d105      	bne.n	800371a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370e:	4b3c      	ldr	r3, [pc, #240]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	4a3b      	ldr	r2, [pc, #236]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003718:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8087 	beq.w	8003832 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003724:	4b36      	ldr	r3, [pc, #216]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d061      	beq.n	80037f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d146      	bne.n	80037c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003738:	4b33      	ldr	r3, [pc, #204]	; (8003808 <HAL_RCC_OscConfig+0x4cc>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fe fd8b 	bl	8002258 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003746:	f7fe fd87 	bl	8002258 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e06d      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003758:	4b29      	ldr	r3, [pc, #164]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f0      	bne.n	8003746 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376c:	d108      	bne.n	8003780 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4921      	ldr	r1, [pc, #132]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a19      	ldr	r1, [r3, #32]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	430b      	orrs	r3, r1
 8003792:	491b      	ldr	r1, [pc, #108]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <HAL_RCC_OscConfig+0x4cc>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379e:	f7fe fd5b 	bl	8002258 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a6:	f7fe fd57 	bl	8002258 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e03d      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x46a>
 80037c4:	e035      	b.n	8003832 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <HAL_RCC_OscConfig+0x4cc>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe fd44 	bl	8002258 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fe fd40 	bl	8002258 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e026      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x498>
 80037f2:	e01e      	b.n	8003832 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d107      	bne.n	800380c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e019      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
 8003808:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_OscConfig+0x500>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	429a      	cmp	r2, r3
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d001      	beq.n	8003832 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000

08003840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0d0      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003854:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d910      	bls.n	8003884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b67      	ldr	r3, [pc, #412]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 0207 	bic.w	r2, r3, #7
 800386a:	4965      	ldr	r1, [pc, #404]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b63      	ldr	r3, [pc, #396]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0b8      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d020      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800389c:	4b59      	ldr	r3, [pc, #356]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a58      	ldr	r2, [pc, #352]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b4:	4b53      	ldr	r3, [pc, #332]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a52      	ldr	r2, [pc, #328]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c0:	4b50      	ldr	r3, [pc, #320]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	494d      	ldr	r1, [pc, #308]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d040      	beq.n	8003960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	4b47      	ldr	r3, [pc, #284]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d115      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e07f      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	4b41      	ldr	r3, [pc, #260]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e073      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	4b3d      	ldr	r3, [pc, #244]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e06b      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391e:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4936      	ldr	r1, [pc, #216]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003930:	f7fe fc92 	bl	8002258 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fe fc8e 	bl	8002258 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e053      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	4b2d      	ldr	r3, [pc, #180]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 020c 	and.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	429a      	cmp	r2, r3
 800395e:	d1eb      	bne.n	8003938 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003960:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d210      	bcs.n	8003990 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 0207 	bic.w	r2, r3, #7
 8003976:	4922      	ldr	r1, [pc, #136]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d001      	beq.n	8003990 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e032      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399c:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4916      	ldr	r1, [pc, #88]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	490e      	ldr	r1, [pc, #56]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ce:	f000 f821 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80039d2:	4602      	mov	r2, r0
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	490a      	ldr	r1, [pc, #40]	; (8003a08 <HAL_RCC_ClockConfig+0x1c8>)
 80039e0:	5ccb      	ldrb	r3, [r1, r3]
 80039e2:	fa22 f303 	lsr.w	r3, r2, r3
 80039e6:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <HAL_RCC_ClockConfig+0x1cc>)
 80039e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_RCC_ClockConfig+0x1d0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fbf0 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40022000 	.word	0x40022000
 8003a04:	40021000 	.word	0x40021000
 8003a08:	08009420 	.word	0x08009420
 8003a0c:	20000004 	.word	0x20000004
 8003a10:	20000008 	.word	0x20000008

08003a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d002      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x30>
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_GetSysClockFreq+0x36>
 8003a42:	e027      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_RCC_GetSysClockFreq+0x98>)
 8003a46:	613b      	str	r3, [r7, #16]
      break;
 8003a48:	e027      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	0c9b      	lsrs	r3, r3, #18
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a54:	5cd3      	ldrb	r3, [r2, r3]
 8003a56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d010      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a62:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	0c5b      	lsrs	r3, r3, #17
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	4a11      	ldr	r2, [pc, #68]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a6e:	5cd3      	ldrb	r3, [r2, r3]
 8003a70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <HAL_RCC_GetSysClockFreq+0x98>)
 8003a76:	fb03 f202 	mul.w	r2, r3, r2
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e004      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0c      	ldr	r2, [pc, #48]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	613b      	str	r3, [r7, #16]
      break;
 8003a92:	e002      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCC_GetSysClockFreq+0x98>)
 8003a96:	613b      	str	r3, [r7, #16]
      break;
 8003a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9a:	693b      	ldr	r3, [r7, #16]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	371c      	adds	r7, #28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	007a1200 	.word	0x007a1200
 8003ab0:	08009438 	.word	0x08009438
 8003ab4:	08009448 	.word	0x08009448
 8003ab8:	003d0900 	.word	0x003d0900

08003abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac0:	4b02      	ldr	r3, [pc, #8]	; (8003acc <HAL_RCC_GetHCLKFreq+0x10>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	20000004 	.word	0x20000004

08003ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad4:	f7ff fff2 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4903      	ldr	r1, [pc, #12]	; (8003af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40021000 	.word	0x40021000
 8003af4:	08009430 	.word	0x08009430

08003af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003afc:	f7ff ffde 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	0adb      	lsrs	r3, r3, #11
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4903      	ldr	r1, [pc, #12]	; (8003b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0e:	5ccb      	ldrb	r3, [r1, r3]
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	08009430 	.word	0x08009430

08003b20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <RCC_Delay+0x34>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0a      	ldr	r2, [pc, #40]	; (8003b58 <RCC_Delay+0x38>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	0a5b      	lsrs	r3, r3, #9
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b3c:	bf00      	nop
  }
  while (Delay --);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1e5a      	subs	r2, r3, #1
 8003b42:	60fa      	str	r2, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f9      	bne.n	8003b3c <RCC_Delay+0x1c>
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	20000004 	.word	0x20000004
 8003b58:	10624dd3 	.word	0x10624dd3

08003b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d07d      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7c:	4b4f      	ldr	r3, [pc, #316]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10d      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b88:	4b4c      	ldr	r3, [pc, #304]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	4a4b      	ldr	r2, [pc, #300]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b92:	61d3      	str	r3, [r2, #28]
 8003b94:	4b49      	ldr	r3, [pc, #292]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	4b46      	ldr	r3, [pc, #280]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d118      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb0:	4b43      	ldr	r3, [pc, #268]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a42      	ldr	r2, [pc, #264]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bbc:	f7fe fb4c 	bl	8002258 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc4:	f7fe fb48 	bl	8002258 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e06d      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd6:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003be2:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d02e      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d027      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c00:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c10:	4b2c      	ldr	r3, [pc, #176]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c16:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d014      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c26:	f7fe fb17 	bl	8002258 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fe fb13 	bl	8002258 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e036      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ee      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4917      	ldr	r1, [pc, #92]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c68:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c80:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	490b      	ldr	r1, [pc, #44]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	4904      	ldr	r1, [pc, #16]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40007000 	.word	0x40007000
 8003cc4:	42420440 	.word	0x42420440

08003cc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e096      	b.n	8003e08 <HAL_SPI_Init+0x140>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cea:	d009      	beq.n	8003d00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
 8003cf2:	e005      	b.n	8003d00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d126      	bne.n	8003d60 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a3c      	ldr	r2, [pc, #240]	; (8003e10 <HAL_SPI_Init+0x148>)
 8003d1e:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3c      	ldr	r2, [pc, #240]	; (8003e14 <HAL_SPI_Init+0x14c>)
 8003d24:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a3b      	ldr	r2, [pc, #236]	; (8003e18 <HAL_SPI_Init+0x150>)
 8003d2a:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a3b      	ldr	r2, [pc, #236]	; (8003e1c <HAL_SPI_Init+0x154>)
 8003d30:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a3a      	ldr	r2, [pc, #232]	; (8003e20 <HAL_SPI_Init+0x158>)
 8003d36:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3a      	ldr	r2, [pc, #232]	; (8003e24 <HAL_SPI_Init+0x15c>)
 8003d3c:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a39      	ldr	r2, [pc, #228]	; (8003e28 <HAL_SPI_Init+0x160>)
 8003d42:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a39      	ldr	r2, [pc, #228]	; (8003e2c <HAL_SPI_Init+0x164>)
 8003d48:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a36      	ldr	r2, [pc, #216]	; (8003e30 <HAL_SPI_Init+0x168>)
 8003d56:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	ea42 0103 	orr.w	r1, r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	0c1a      	lsrs	r2, r3, #16
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f002 0204 	and.w	r2, r2, #4
 8003de6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	08004949 	.word	0x08004949
 8003e14:	0800495b 	.word	0x0800495b
 8003e18:	0800496d 	.word	0x0800496d
 8003e1c:	0800497f 	.word	0x0800497f
 8003e20:	08004991 	.word	0x08004991
 8003e24:	080049a3 	.word	0x080049a3
 8003e28:	080049b5 	.word	0x080049b5
 8003e2c:	080049c7 	.word	0x080049c7
 8003e30:	080019c9 	.word	0x080019c9

08003e34 <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d107      	bne.n	8003e5c <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e086      	b.n	8003f6a <HAL_SPI_RegisterCallback+0x136>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_SPI_RegisterCallback+0x36>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e07f      	b.n	8003f6a <HAL_SPI_RegisterCallback+0x136>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (HAL_SPI_STATE_READY == hspi->State)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d14b      	bne.n	8003f16 <HAL_SPI_RegisterCallback+0xe2>
  {
    switch (CallbackID)
 8003e7e:	7afb      	ldrb	r3, [r7, #11]
 8003e80:	2b09      	cmp	r3, #9
 8003e82:	d83f      	bhi.n	8003f04 <HAL_SPI_RegisterCallback+0xd0>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <HAL_SPI_RegisterCallback+0x58>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003eb5 	.word	0x08003eb5
 8003e90:	08003ebd 	.word	0x08003ebd
 8003e94:	08003ec5 	.word	0x08003ec5
 8003e98:	08003ecd 	.word	0x08003ecd
 8003e9c:	08003ed5 	.word	0x08003ed5
 8003ea0:	08003edd 	.word	0x08003edd
 8003ea4:	08003ee5 	.word	0x08003ee5
 8003ea8:	08003eed 	.word	0x08003eed
 8003eac:	08003ef5 	.word	0x08003ef5
 8003eb0:	08003efd 	.word	0x08003efd
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003eba:	e051      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003ec2:	e04d      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003eca:	e049      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003ed2:	e045      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003eda:	e041      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003ee2:	e03d      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003eea:	e039      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003ef2:	e035      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003efa:	e031      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003f02:	e02d      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Return error status */
        status =  HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	75fb      	strb	r3, [r7, #23]
        break;
 8003f14:	e024      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d116      	bne.n	8003f50 <HAL_SPI_RegisterCallback+0x11c>
  {
    switch (CallbackID)
 8003f22:	7afb      	ldrb	r3, [r7, #11]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d002      	beq.n	8003f2e <HAL_SPI_RegisterCallback+0xfa>
 8003f28:	2b09      	cmp	r3, #9
 8003f2a:	d004      	beq.n	8003f36 <HAL_SPI_RegisterCallback+0x102>
 8003f2c:	e007      	b.n	8003f3e <HAL_SPI_RegisterCallback+0x10a>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003f34:	e014      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003f3c:	e010      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54

        /* Return error status */
        status =  HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
        break;
 8003f4e:	e007      	b.n	8003f60 <HAL_SPI_RegisterCallback+0x12c>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status =  HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return status;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_SPI_Transmit+0x22>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e12d      	b.n	80041f2 <HAL_SPI_Transmit+0x27e>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f9e:	f7fe f95b 	bl	8002258 <HAL_GetTick>
 8003fa2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d002      	beq.n	8003fba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fb8:	e116      	b.n	80041e8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_SPI_Transmit+0x52>
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fca:	e10d      	b.n	80041e8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2203      	movs	r2, #3
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004012:	d10f      	bne.n	8004034 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004022:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004032:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d007      	beq.n	8004052 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004050:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405a:	d14f      	bne.n	80040fc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_SPI_Transmit+0xf6>
 8004064:	8afb      	ldrh	r3, [r7, #22]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d142      	bne.n	80040f0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	881a      	ldrh	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800408e:	e02f      	b.n	80040f0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b02      	cmp	r3, #2
 800409c:	d112      	bne.n	80040c4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	881a      	ldrh	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80040c2:	e015      	b.n	80040f0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c4:	f7fe f8c8 	bl	8002258 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d803      	bhi.n	80040dc <HAL_SPI_Transmit+0x168>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d102      	bne.n	80040e2 <HAL_SPI_Transmit+0x16e>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80040ee:	e07b      	b.n	80041e8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1ca      	bne.n	8004090 <HAL_SPI_Transmit+0x11c>
 80040fa:	e050      	b.n	800419e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_SPI_Transmit+0x196>
 8004104:	8afb      	ldrh	r3, [r7, #22]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d144      	bne.n	8004194 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	7812      	ldrb	r2, [r2, #0]
 8004116:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004130:	e030      	b.n	8004194 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b02      	cmp	r3, #2
 800413e:	d113      	bne.n	8004168 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	7812      	ldrb	r2, [r2, #0]
 800414c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	86da      	strh	r2, [r3, #54]	; 0x36
 8004166:	e015      	b.n	8004194 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004168:	f7fe f876 	bl	8002258 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d803      	bhi.n	8004180 <HAL_SPI_Transmit+0x20c>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d102      	bne.n	8004186 <HAL_SPI_Transmit+0x212>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004192:	e029      	b.n	80041e8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1c9      	bne.n	8004132 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	6839      	ldr	r1, [r7, #0]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fd08 	bl	8004bb8 <SPI_EndRxTxTransaction>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e003      	b.n	80041e8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b088      	sub	sp, #32
 80041fe:	af02      	add	r7, sp, #8
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d002      	beq.n	8004220 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800421a:	2302      	movs	r3, #2
 800421c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800421e:	e0fb      	b.n	8004418 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004228:	d112      	bne.n	8004250 <HAL_SPI_Receive+0x56>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10e      	bne.n	8004250 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2204      	movs	r2, #4
 8004236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800423a:	88fa      	ldrh	r2, [r7, #6]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f8ef 	bl	800442a <HAL_SPI_TransmitReceive>
 800424c:	4603      	mov	r3, r0
 800424e:	e0e8      	b.n	8004422 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_SPI_Receive+0x64>
 800425a:	2302      	movs	r3, #2
 800425c:	e0e1      	b.n	8004422 <HAL_SPI_Receive+0x228>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004266:	f7fd fff7 	bl	8002258 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_SPI_Receive+0x7e>
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800427c:	e0cc      	b.n	8004418 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2204      	movs	r2, #4
 8004282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c4:	d10f      	bne.n	80042e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d007      	beq.n	8004304 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d16a      	bne.n	80043e2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800430c:	e032      	b.n	8004374 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d115      	bne.n	8004348 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f103 020c 	add.w	r2, r3, #12
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	7812      	ldrb	r2, [r2, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004346:	e015      	b.n	8004374 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004348:	f7fd ff86 	bl	8002258 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d803      	bhi.n	8004360 <HAL_SPI_Receive+0x166>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d102      	bne.n	8004366 <HAL_SPI_Receive+0x16c>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004372:	e051      	b.n	8004418 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1c7      	bne.n	800430e <HAL_SPI_Receive+0x114>
 800437e:	e035      	b.n	80043ec <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d113      	bne.n	80043b6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	b292      	uxth	r2, r2
 800439a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	1c9a      	adds	r2, r3, #2
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043b4:	e015      	b.n	80043e2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b6:	f7fd ff4f 	bl	8002258 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d803      	bhi.n	80043ce <HAL_SPI_Receive+0x1d4>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d102      	bne.n	80043d4 <HAL_SPI_Receive+0x1da>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80043e0:	e01a      	b.n	8004418 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1c9      	bne.n	8004380 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fb8f 	bl	8004b14 <SPI_EndRxTransaction>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	75fb      	strb	r3, [r7, #23]
 800440e:	e003      	b.n	8004418 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004420:	7dfb      	ldrb	r3, [r7, #23]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b08c      	sub	sp, #48	; 0x30
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004438:	2301      	movs	r3, #1
 800443a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x26>
 800444c:	2302      	movs	r3, #2
 800444e:	e198      	b.n	8004782 <HAL_SPI_TransmitReceive+0x358>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004458:	f7fd fefe 	bl	8002258 <HAL_GetTick>
 800445c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800446e:	887b      	ldrh	r3, [r7, #2]
 8004470:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004476:	2b01      	cmp	r3, #1
 8004478:	d00f      	beq.n	800449a <HAL_SPI_TransmitReceive+0x70>
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004480:	d107      	bne.n	8004492 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <HAL_SPI_TransmitReceive+0x68>
 800448a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800448e:	2b04      	cmp	r3, #4
 8004490:	d003      	beq.n	800449a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004492:	2302      	movs	r3, #2
 8004494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004498:	e16d      	b.n	8004776 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x82>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x82>
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d103      	bne.n	80044b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044b2:	e160      	b.n	8004776 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d003      	beq.n	80044c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2205      	movs	r2, #5
 80044c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	887a      	ldrh	r2, [r7, #2]
 80044de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	887a      	ldrh	r2, [r7, #2]
 80044ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	887a      	ldrh	r2, [r7, #2]
 80044f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d007      	beq.n	800451c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004524:	d17c      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_SPI_TransmitReceive+0x10a>
 800452e:	8b7b      	ldrh	r3, [r7, #26]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d16a      	bne.n	800460a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	1c9a      	adds	r2, r3, #2
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004558:	e057      	b.n	800460a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b02      	cmp	r3, #2
 8004566:	d11b      	bne.n	80045a0 <HAL_SPI_TransmitReceive+0x176>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_SPI_TransmitReceive+0x176>
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d113      	bne.n	80045a0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	881a      	ldrh	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	1c9a      	adds	r2, r3, #2
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d119      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x1b8>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d014      	beq.n	80045e2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	b292      	uxth	r2, r2
 80045c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	1c9a      	adds	r2, r3, #2
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045de:	2301      	movs	r3, #1
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045e2:	f7fd fe39 	bl	8002258 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d80b      	bhi.n	800460a <HAL_SPI_TransmitReceive+0x1e0>
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d007      	beq.n	800460a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004608:	e0b5      	b.n	8004776 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1a2      	bne.n	800455a <HAL_SPI_TransmitReceive+0x130>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d19d      	bne.n	800455a <HAL_SPI_TransmitReceive+0x130>
 800461e:	e080      	b.n	8004722 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_SPI_TransmitReceive+0x204>
 8004628:	8b7b      	ldrh	r3, [r7, #26]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d16f      	bne.n	800470e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004654:	e05b      	b.n	800470e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b02      	cmp	r3, #2
 8004662:	d11c      	bne.n	800469e <HAL_SPI_TransmitReceive+0x274>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d017      	beq.n	800469e <HAL_SPI_TransmitReceive+0x274>
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d114      	bne.n	800469e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	7812      	ldrb	r2, [r2, #0]
 8004680:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d119      	bne.n	80046e0 <HAL_SPI_TransmitReceive+0x2b6>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d014      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046dc:	2301      	movs	r3, #1
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046e0:	f7fd fdba 	bl	8002258 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d803      	bhi.n	80046f8 <HAL_SPI_TransmitReceive+0x2ce>
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d102      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x2d4>
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d107      	bne.n	800470e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800470c:	e033      	b.n	8004776 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d19e      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x22c>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d199      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004724:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fa46 	bl	8004bb8 <SPI_EndRxTxTransaction>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d006      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800473e:	e01a      	b.n	8004776 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800476c:	e003      	b.n	8004776 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800477e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004782:	4618      	mov	r0, r3
 8004784:	3730      	adds	r7, #48	; 0x30
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10e      	bne.n	80047cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4798      	blx	r3
    return;
 80047ca:	e0b8      	b.n	800493e <HAL_SPI_IRQHandler+0x1b2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_SPI_IRQHandler+0x5e>
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
    return;
 80047e8:	e0a9      	b.n	800493e <HAL_SPI_IRQHandler+0x1b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <HAL_SPI_IRQHandler+0x74>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 809f 	beq.w	800493e <HAL_SPI_IRQHandler+0x1b2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8099 	beq.w	800493e <HAL_SPI_IRQHandler+0x1b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d023      	beq.n	800485e <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b03      	cmp	r3, #3
 8004820:	d011      	beq.n	8004846 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	f043 0204 	orr.w	r2, r3, #4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	e00b      	b.n	800485e <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	693b      	ldr	r3, [r7, #16]
        return;
 800485c:	e06f      	b.n	800493e <HAL_SPI_IRQHandler+0x1b2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d014      	beq.n	8004892 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f043 0201 	orr.w	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004896:	2b00      	cmp	r3, #0
 8004898:	d050      	beq.n	800493c <HAL_SPI_IRQHandler+0x1b0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <HAL_SPI_IRQHandler+0x13a>
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d034      	beq.n	8004930 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0203 	bic.w	r2, r2, #3
 80048d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d011      	beq.n	8004902 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	4a18      	ldr	r2, [pc, #96]	; (8004944 <HAL_SPI_IRQHandler+0x1b8>)
 80048e4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fae2 	bl	8002eb4 <HAL_DMA_Abort_IT>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004906:	2b00      	cmp	r3, #0
 8004908:	d017      	beq.n	800493a <HAL_SPI_IRQHandler+0x1ae>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490e:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <HAL_SPI_IRQHandler+0x1b8>)
 8004910:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe facc 	bl	8002eb4 <HAL_DMA_Abort_IT>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <HAL_SPI_IRQHandler+0x1ae>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800492e:	e004      	b.n	800493a <HAL_SPI_IRQHandler+0x1ae>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004938:	e000      	b.n	800493c <HAL_SPI_IRQHandler+0x1b0>
        if (hspi->hdmatx != NULL)
 800493a:	bf00      	nop
    return;
 800493c:	bf00      	nop
  }
}
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	080049d9 	.word	0x080049d9

08004948 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr

0800497e <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr

080049c6 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a14:	f7fd fc20 	bl	8002258 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	4413      	add	r3, r2
 8004a22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a24:	f7fd fc18 	bl	8002258 <HAL_GetTick>
 8004a28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a2a:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	015b      	lsls	r3, r3, #5
 8004a30:	0d1b      	lsrs	r3, r3, #20
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
 8004a38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a3a:	e054      	b.n	8004ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a42:	d050      	beq.n	8004ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a44:	f7fd fc08 	bl	8002258 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d902      	bls.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d13d      	bne.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a72:	d111      	bne.n	8004a98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7c:	d004      	beq.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a86:	d107      	bne.n	8004a98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa0:	d10f      	bne.n	8004ac2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e017      	b.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4013      	ands	r3, r2
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	bf0c      	ite	eq
 8004af6:	2301      	moveq	r3, #1
 8004af8:	2300      	movne	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d19b      	bne.n	8004a3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000004 	.word	0x20000004

08004b14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b28:	d111      	bne.n	8004b4e <SPI_EndRxTransaction+0x3a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b32:	d004      	beq.n	8004b3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3c:	d107      	bne.n	8004b4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b56:	d117      	bne.n	8004b88 <SPI_EndRxTransaction+0x74>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b60:	d112      	bne.n	8004b88 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7ff ff49 	bl	8004a04 <SPI_WaitFlagStateUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01a      	beq.n	8004bae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e013      	b.n	8004bb0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7ff ff36 	bl	8004a04 <SPI_WaitFlagStateUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e000      	b.n	8004bb0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2180      	movs	r1, #128	; 0x80
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff ff18 	bl	8004a04 <SPI_WaitFlagStateUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f043 0220 	orr.w	r2, r3, #32
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e000      	b.n	8004bec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e04c      	b.n	8004ca0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d111      	bne.n	8004c36 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fd14 	bl	8005648 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d102      	bne.n	8004c2e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <HAL_TIM_Base_Init+0xb4>)
 8004c2c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f000 fc05 	bl	8005458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	08001f45 	.word	0x08001f45

08004cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e03a      	b.n	8004d3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <HAL_TIM_Base_Start_IT+0x98>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00e      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x58>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cee:	d009      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x58>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <HAL_TIM_Base_Start_IT+0x9c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0x58>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <HAL_TIM_Base_Start_IT+0xa0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d111      	bne.n	8004d28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b06      	cmp	r3, #6
 8004d14:	d010      	beq.n	8004d38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d26:	e007      	b.n	8004d38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800

08004d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d128      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d121      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0202 	mvn.w	r2, #2
 8004d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4798      	blx	r3
 8004d9c:	e009      	b.n	8004db2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d128      	bne.n	8004e18 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d121      	bne.n	8004e18 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0204 	mvn.w	r2, #4
 8004ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
 8004dfc:	e009      	b.n	8004e12 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d128      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d121      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0208 	mvn.w	r2, #8
 8004e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2204      	movs	r2, #4
 8004e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	4798      	blx	r3
 8004e5c:	e009      	b.n	8004e72 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d128      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d121      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0210 	mvn.w	r2, #16
 8004e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3
 8004ebc:	e009      	b.n	8004ed2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d110      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d109      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0201 	mvn.w	r2, #1
 8004efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d110      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b80      	cmp	r3, #128	; 0x80
 8004f22:	d109      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d110      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	d109      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d110      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d109      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0220 	mvn.w	r2, #32
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_TIM_ConfigClockSource+0x1c>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0b4      	b.n	8005126 <HAL_TIM_ConfigClockSource+0x186>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff4:	d03e      	beq.n	8005074 <HAL_TIM_ConfigClockSource+0xd4>
 8004ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffa:	f200 8087 	bhi.w	800510c <HAL_TIM_ConfigClockSource+0x16c>
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005002:	f000 8086 	beq.w	8005112 <HAL_TIM_ConfigClockSource+0x172>
 8005006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500a:	d87f      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 800500c:	2b70      	cmp	r3, #112	; 0x70
 800500e:	d01a      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0xa6>
 8005010:	2b70      	cmp	r3, #112	; 0x70
 8005012:	d87b      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 8005014:	2b60      	cmp	r3, #96	; 0x60
 8005016:	d050      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0x11a>
 8005018:	2b60      	cmp	r3, #96	; 0x60
 800501a:	d877      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 800501c:	2b50      	cmp	r3, #80	; 0x50
 800501e:	d03c      	beq.n	800509a <HAL_TIM_ConfigClockSource+0xfa>
 8005020:	2b50      	cmp	r3, #80	; 0x50
 8005022:	d873      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d058      	beq.n	80050da <HAL_TIM_ConfigClockSource+0x13a>
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d86f      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 800502c:	2b30      	cmp	r3, #48	; 0x30
 800502e:	d064      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x15a>
 8005030:	2b30      	cmp	r3, #48	; 0x30
 8005032:	d86b      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 8005034:	2b20      	cmp	r3, #32
 8005036:	d060      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x15a>
 8005038:	2b20      	cmp	r3, #32
 800503a:	d867      	bhi.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d05c      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x15a>
 8005040:	2b10      	cmp	r3, #16
 8005042:	d05a      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0x15a>
 8005044:	e062      	b.n	800510c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005056:	f000 fad8 	bl	800560a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	609a      	str	r2, [r3, #8]
      break;
 8005072:	e04f      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005084:	f000 fac1 	bl	800560a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005096:	609a      	str	r2, [r3, #8]
      break;
 8005098:	e03c      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a6:	461a      	mov	r2, r3
 80050a8:	f000 fa38 	bl	800551c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2150      	movs	r1, #80	; 0x50
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fa8f 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 80050b8:	e02c      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050c6:	461a      	mov	r2, r3
 80050c8:	f000 fa56 	bl	8005578 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2160      	movs	r1, #96	; 0x60
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fa7f 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 80050d8:	e01c      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e6:	461a      	mov	r2, r3
 80050e8:	f000 fa18 	bl	800551c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2140      	movs	r1, #64	; 0x40
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fa6f 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 80050f8:	e00c      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f000 fa66 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 800510a:	e003      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
      break;
 8005110:	e000      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr
	...

080051e4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	460b      	mov	r3, r1
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e125      	b.n	800544c <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	f040 80b9 	bne.w	8005380 <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 800520e:	7afb      	ldrb	r3, [r7, #11]
 8005210:	2b1a      	cmp	r3, #26
 8005212:	f200 80b2 	bhi.w	800537a <HAL_TIM_RegisterCallback+0x196>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <HAL_TIM_RegisterCallback+0x38>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005289 	.word	0x08005289
 8005220:	08005291 	.word	0x08005291
 8005224:	08005299 	.word	0x08005299
 8005228:	080052a1 	.word	0x080052a1
 800522c:	080052a9 	.word	0x080052a9
 8005230:	080052b1 	.word	0x080052b1
 8005234:	080052b9 	.word	0x080052b9
 8005238:	080052c1 	.word	0x080052c1
 800523c:	080052c9 	.word	0x080052c9
 8005240:	080052d1 	.word	0x080052d1
 8005244:	080052d9 	.word	0x080052d9
 8005248:	080052e1 	.word	0x080052e1
 800524c:	080052e9 	.word	0x080052e9
 8005250:	080052f1 	.word	0x080052f1
 8005254:	080052f9 	.word	0x080052f9
 8005258:	08005303 	.word	0x08005303
 800525c:	0800530d 	.word	0x0800530d
 8005260:	08005317 	.word	0x08005317
 8005264:	08005321 	.word	0x08005321
 8005268:	0800532b 	.word	0x0800532b
 800526c:	08005335 	.word	0x08005335
 8005270:	0800533f 	.word	0x0800533f
 8005274:	08005349 	.word	0x08005349
 8005278:	08005353 	.word	0x08005353
 800527c:	0800535d 	.word	0x0800535d
 8005280:	08005367 	.word	0x08005367
 8005284:	08005371 	.word	0x08005371
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800528e:	e0dc      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8005296:	e0d8      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800529e:	e0d4      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80052a6:	e0d0      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80052ae:	e0cc      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80052b6:	e0c8      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80052be:	e0c4      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80052c6:	e0c0      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80052ce:	e0bc      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80052d6:	e0b8      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80052de:	e0b4      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80052e6:	e0b0      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80052ee:	e0ac      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80052f6:	e0a8      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8005300:	e0a3      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800530a:	e09e      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8005314:	e099      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800531e:	e094      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8005328:	e08f      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8005332:	e08a      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800533c:	e085      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8005346:	e080      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8005350:	e07b      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800535a:	e076      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8005364:	e071      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800536e:	e06c      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8005378:	e067      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	75fb      	strb	r3, [r7, #23]
        break;
 800537e:	e064      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d15c      	bne.n	8005446 <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 800538c:	7afb      	ldrb	r3, [r7, #11]
 800538e:	2b0d      	cmp	r3, #13
 8005390:	d856      	bhi.n	8005440 <HAL_TIM_RegisterCallback+0x25c>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <HAL_TIM_RegisterCallback+0x1b4>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053d1 	.word	0x080053d1
 800539c:	080053d9 	.word	0x080053d9
 80053a0:	080053e1 	.word	0x080053e1
 80053a4:	080053e9 	.word	0x080053e9
 80053a8:	080053f1 	.word	0x080053f1
 80053ac:	080053f9 	.word	0x080053f9
 80053b0:	08005401 	.word	0x08005401
 80053b4:	08005409 	.word	0x08005409
 80053b8:	08005411 	.word	0x08005411
 80053bc:	08005419 	.word	0x08005419
 80053c0:	08005421 	.word	0x08005421
 80053c4:	08005429 	.word	0x08005429
 80053c8:	08005431 	.word	0x08005431
 80053cc:	08005439 	.word	0x08005439
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80053d6:	e038      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80053de:	e034      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80053e6:	e030      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80053ee:	e02c      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80053f6:	e028      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80053fe:	e024      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005406:	e020      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800540e:	e01c      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8005416:	e018      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800541e:	e014      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005426:	e010      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800542e:	e00c      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005436:	e008      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800543e:	e004      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	75fb      	strb	r3, [r7, #23]
        break;
 8005444:	e001      	b.n	800544a <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop

08005458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a29      	ldr	r2, [pc, #164]	; (8005510 <TIM_Base_SetConfig+0xb8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00b      	beq.n	8005488 <TIM_Base_SetConfig+0x30>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005476:	d007      	beq.n	8005488 <TIM_Base_SetConfig+0x30>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a26      	ldr	r2, [pc, #152]	; (8005514 <TIM_Base_SetConfig+0xbc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_Base_SetConfig+0x30>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a25      	ldr	r2, [pc, #148]	; (8005518 <TIM_Base_SetConfig+0xc0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d108      	bne.n	800549a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <TIM_Base_SetConfig+0xb8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00b      	beq.n	80054ba <TIM_Base_SetConfig+0x62>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a8:	d007      	beq.n	80054ba <TIM_Base_SetConfig+0x62>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a19      	ldr	r2, [pc, #100]	; (8005514 <TIM_Base_SetConfig+0xbc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_Base_SetConfig+0x62>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a18      	ldr	r2, [pc, #96]	; (8005518 <TIM_Base_SetConfig+0xc0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d108      	bne.n	80054cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a07      	ldr	r2, [pc, #28]	; (8005510 <TIM_Base_SetConfig+0xb8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d103      	bne.n	8005500 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	615a      	str	r2, [r3, #20]
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800

0800551c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0201 	bic.w	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 030a 	bic.w	r3, r3, #10
 8005558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr

08005578 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0210 	bic.w	r2, r3, #16
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	031b      	lsls	r3, r3, #12
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	621a      	str	r2, [r3, #32]
}
 80055cc:	bf00      	nop
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bc80      	pop	{r7}
 80055d4:	4770      	bx	lr

080055d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f043 0307 	orr.w	r3, r3, #7
 80055f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	609a      	str	r2, [r3, #8]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800560a:	b480      	push	{r7}
 800560c:	b087      	sub	sp, #28
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005624:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	021a      	lsls	r2, r3, #8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	431a      	orrs	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	4313      	orrs	r3, r2
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	609a      	str	r2, [r3, #8]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <TIM_ResetCallback+0x7c>)
 8005654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <TIM_ResetCallback+0x80>)
 800565c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a1a      	ldr	r2, [pc, #104]	; (80056cc <TIM_ResetCallback+0x84>)
 8005664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a19      	ldr	r2, [pc, #100]	; (80056d0 <TIM_ResetCallback+0x88>)
 800566c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <TIM_ResetCallback+0x8c>)
 8005674:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <TIM_ResetCallback+0x90>)
 800567c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a16      	ldr	r2, [pc, #88]	; (80056dc <TIM_ResetCallback+0x94>)
 8005684:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <TIM_ResetCallback+0x98>)
 800568c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <TIM_ResetCallback+0x9c>)
 8005694:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <TIM_ResetCallback+0xa0>)
 800569c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a12      	ldr	r2, [pc, #72]	; (80056ec <TIM_ResetCallback+0xa4>)
 80056a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a11      	ldr	r2, [pc, #68]	; (80056f0 <TIM_ResetCallback+0xa8>)
 80056ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a10      	ldr	r2, [pc, #64]	; (80056f4 <TIM_ResetCallback+0xac>)
 80056b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	0800512f 	.word	0x0800512f
 80056c8:	08005141 	.word	0x08005141
 80056cc:	080051ad 	.word	0x080051ad
 80056d0:	080051bf 	.word	0x080051bf
 80056d4:	08005165 	.word	0x08005165
 80056d8:	08005177 	.word	0x08005177
 80056dc:	08005153 	.word	0x08005153
 80056e0:	08005189 	.word	0x08005189
 80056e4:	0800519b 	.word	0x0800519b
 80056e8:	080051d1 	.word	0x080051d1
 80056ec:	080057b5 	.word	0x080057b5
 80056f0:	080057c7 	.word	0x080057c7
 80056f4:	080057d9 	.word	0x080057d9

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e046      	b.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00e      	beq.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575c:	d009      	beq.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a12      	ldr	r2, [pc, #72]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d10c      	bne.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	4313      	orrs	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800

080057b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr

080057c6 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr
	...

080057ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e04d      	b.n	800589a <HAL_UART_Init+0xae>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d111      	bne.n	800582e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fc72 	bl	80060fc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a20      	ldr	r2, [pc, #128]	; (80058a4 <HAL_UART_Init+0xb8>)
 8005824:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2224      	movs	r2, #36	; 0x24
 8005832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005844:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fed4 	bl	80065f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800585a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800586a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800587a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	08002039 	.word	0x08002039

080058a8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	460b      	mov	r3, r1
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d107      	bne.n	80058d0 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c4:	f043 0220 	orr.w	r2, r3, #32
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	645a      	str	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e07c      	b.n	80059ca <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d150      	bne.n	800597e <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 80058dc:	7afb      	ldrb	r3, [r7, #11]
 80058de:	2b0c      	cmp	r3, #12
 80058e0:	d844      	bhi.n	800596c <HAL_UART_RegisterCallback+0xc4>
 80058e2:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <HAL_UART_RegisterCallback+0x40>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	0800591d 	.word	0x0800591d
 80058ec:	08005925 	.word	0x08005925
 80058f0:	0800592d 	.word	0x0800592d
 80058f4:	08005935 	.word	0x08005935
 80058f8:	0800593d 	.word	0x0800593d
 80058fc:	08005945 	.word	0x08005945
 8005900:	0800594d 	.word	0x0800594d
 8005904:	08005955 	.word	0x08005955
 8005908:	0800596d 	.word	0x0800596d
 800590c:	0800596d 	.word	0x0800596d
 8005910:	0800596d 	.word	0x0800596d
 8005914:	0800595d 	.word	0x0800595d
 8005918:	08005965 	.word	0x08005965
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005922:	e051      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800592a:	e04d      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005932:	e049      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800593a:	e045      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005942:	e041      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800594a:	e03d      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005952:	e039      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800595a:	e035      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005962:	e031      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800596a:	e02d      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005970:	f043 0220 	orr.w	r2, r3, #32
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
        break;
 800597c:	e024      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d116      	bne.n	80059b8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800598a:	7afb      	ldrb	r3, [r7, #11]
 800598c:	2b0b      	cmp	r3, #11
 800598e:	d002      	beq.n	8005996 <HAL_UART_RegisterCallback+0xee>
 8005990:	2b0c      	cmp	r3, #12
 8005992:	d004      	beq.n	800599e <HAL_UART_RegisterCallback+0xf6>
 8005994:	e007      	b.n	80059a6 <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800599c:	e014      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80059a4:	e010      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
        break;
 80059b6:	e007      	b.n	80059c8 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059bc:	f043 0220 	orr.w	r2, r3, #32
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Return error status */
    status =  HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	; 0x28
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d16d      	bne.n	8005ad0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <HAL_UART_Transmit+0x2c>
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e066      	b.n	8005ad2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2221      	movs	r2, #33	; 0x21
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a12:	f7fc fc21 	bl	8002258 <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	88fa      	ldrh	r2, [r7, #6]
 8005a1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	88fa      	ldrh	r2, [r7, #6]
 8005a22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2c:	d108      	bne.n	8005a40 <HAL_UART_Transmit+0x6c>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e003      	b.n	8005a48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a48:	e02a      	b.n	8005aa0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2200      	movs	r2, #0
 8005a52:	2180      	movs	r1, #128	; 0x80
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fb87 	bl	8006168 <UART_WaitOnFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e036      	b.n	8005ad2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10b      	bne.n	8005a82 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	3302      	adds	r3, #2
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	e007      	b.n	8005a92 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	781a      	ldrb	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1cf      	bne.n	8005a4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2140      	movs	r1, #64	; 0x40
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fb57 	bl	8006168 <UART_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e006      	b.n	8005ad2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e000      	b.n	8005ad2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005ad0:	2302      	movs	r3, #2
  }
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d112      	bne.n	8005b1a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_UART_Receive_IT+0x26>
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e00b      	b.n	8005b1c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fb97 	bl	8006244 <UART_Start_Receive_IT>
 8005b16:	4603      	mov	r3, r0
 8005b18:	e000      	b.n	8005b1c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
  }
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b0ba      	sub	sp, #232	; 0xe8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10f      	bne.n	8005b8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <HAL_UART_IRQHandler+0x66>
 8005b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fc76 	bl	8006474 <UART_Receive_IT>
      return;
 8005b88:	e260      	b.n	800604c <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80e1 	beq.w	8005d56 <HAL_UART_IRQHandler+0x232>
 8005b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d106      	bne.n	8005bae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80d4 	beq.w	8005d56 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <HAL_UART_IRQHandler+0xae>
 8005bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d005      	beq.n	8005bd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	f043 0201 	orr.w	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <HAL_UART_IRQHandler+0xd2>
 8005bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f043 0202 	orr.w	r2, r3, #2
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00b      	beq.n	8005c1a <HAL_UART_IRQHandler+0xf6>
 8005c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c12:	f043 0204 	orr.w	r2, r3, #4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d011      	beq.n	8005c4a <HAL_UART_IRQHandler+0x126>
 8005c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	f043 0208 	orr.w	r2, r3, #8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 81f7 	beq.w	8006042 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_UART_IRQHandler+0x14e>
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fc01 	bl	8006474 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bf14      	ite	ne
 8005c80:	2301      	movne	r3, #1
 8005c82:	2300      	moveq	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d103      	bne.n	8005c9e <HAL_UART_IRQHandler+0x17a>
 8005c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d051      	beq.n	8005d42 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fb09 	bl	80062b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d042      	beq.n	8005d38 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3314      	adds	r3, #20
 8005cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3314      	adds	r3, #20
 8005cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1d9      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d013      	beq.n	8005d2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	4a80      	ldr	r2, [pc, #512]	; (8005f0c <HAL_UART_IRQHandler+0x3e8>)
 8005d0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fd f8ce 	bl	8002eb4 <HAL_DMA_Abort_IT>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d019      	beq.n	8005d52 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2c:	e011      	b.n	8005d52 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d36:	e00c      	b.n	8005d52 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	e007      	b.n	8005d52 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005d50:	e177      	b.n	8006042 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d52:	bf00      	nop
    return;
 8005d54:	e175      	b.n	8006042 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	f040 8151 	bne.w	8006002 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 814a 	beq.w	8006002 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8143 	beq.w	8006002 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60bb      	str	r3, [r7, #8]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80b7 	beq.w	8005f10 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 8147 	beq.w	8006046 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	f080 8140 	bcs.w	8006046 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dcc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	f000 8088 	beq.w	8005eea <HAL_UART_IRQHandler+0x3c6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	330c      	adds	r3, #12
 8005de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1d9      	bne.n	8005dda <HAL_UART_IRQHandler+0x2b6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3314      	adds	r3, #20
 8005e2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e38:	f023 0301 	bic.w	r3, r3, #1
 8005e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e1      	bne.n	8005e26 <HAL_UART_IRQHandler+0x302>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3314      	adds	r3, #20
 8005e82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e3      	bne.n	8005e62 <HAL_UART_IRQHandler+0x33e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	330c      	adds	r3, #12
 8005eae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eba:	f023 0310 	bic.w	r3, r3, #16
 8005ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	330c      	adds	r3, #12
 8005ec8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ecc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ece:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ed2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e3      	bne.n	8005ea8 <HAL_UART_IRQHandler+0x384>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fc ffaa 	bl	8002e3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2202      	movs	r2, #2
 8005eee:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8005efc:	b292      	uxth	r2, r2
 8005efe:	1a8a      	subs	r2, r1, r2
 8005f00:	b292      	uxth	r2, r2
 8005f02:	4611      	mov	r1, r2
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f08:	e09d      	b.n	8006046 <HAL_UART_IRQHandler+0x522>
 8005f0a:	bf00      	nop
 8005f0c:	0800637b 	.word	0x0800637b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 808f 	beq.w	800604a <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8005f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 808a 	beq.w	800604a <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e3      	bne.n	8005f36 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3314      	adds	r3, #20
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f92:	633a      	str	r2, [r7, #48]	; 0x30
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e3      	bne.n	8005f6e <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0310 	bic.w	r3, r3, #16
 8005fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fd8:	61fa      	str	r2, [r7, #28]
 8005fda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e3      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006000:	e023      	b.n	800604a <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <HAL_UART_IRQHandler+0x4fe>
 800600e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f9c2 	bl	80063a4 <UART_Transmit_IT>
    return;
 8006020:	e014      	b.n	800604c <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00e      	beq.n	800604c <HAL_UART_IRQHandler+0x528>
 800602e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa01 	bl	8006442 <UART_EndTransmit_IT>
    return;
 8006040:	e004      	b.n	800604c <HAL_UART_IRQHandler+0x528>
    return;
 8006042:	bf00      	nop
 8006044:	e002      	b.n	800604c <HAL_UART_IRQHandler+0x528>
      return;
 8006046:	bf00      	nop
 8006048:	e000      	b.n	800604c <HAL_UART_IRQHandler+0x528>
      return;
 800604a:	bf00      	nop
  }
}
 800604c:	37e8      	adds	r7, #232	; 0xe8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop

08006054 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr

08006066 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr

0800608a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr

080060ae <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr

080060c0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr

080060d2 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr

080060e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr
	...

080060fc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a0f      	ldr	r2, [pc, #60]	; (8006144 <UART_InitCallbacksToDefault+0x48>)
 8006108:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a0e      	ldr	r2, [pc, #56]	; (8006148 <UART_InitCallbacksToDefault+0x4c>)
 800610e:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a0e      	ldr	r2, [pc, #56]	; (800614c <UART_InitCallbacksToDefault+0x50>)
 8006114:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a0d      	ldr	r2, [pc, #52]	; (8006150 <UART_InitCallbacksToDefault+0x54>)
 800611a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a0d      	ldr	r2, [pc, #52]	; (8006154 <UART_InitCallbacksToDefault+0x58>)
 8006120:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a0c      	ldr	r2, [pc, #48]	; (8006158 <UART_InitCallbacksToDefault+0x5c>)
 8006126:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a0c      	ldr	r2, [pc, #48]	; (800615c <UART_InitCallbacksToDefault+0x60>)
 800612c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a0b      	ldr	r2, [pc, #44]	; (8006160 <UART_InitCallbacksToDefault+0x64>)
 8006132:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a0b      	ldr	r2, [pc, #44]	; (8006164 <UART_InitCallbacksToDefault+0x68>)
 8006138:	66da      	str	r2, [r3, #108]	; 0x6c

}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	08006067 	.word	0x08006067
 8006148:	08006055 	.word	0x08006055
 800614c:	0800608b 	.word	0x0800608b
 8006150:	08006079 	.word	0x08006079
 8006154:	0800609d 	.word	0x0800609d
 8006158:	080060af 	.word	0x080060af
 800615c:	080060c1 	.word	0x080060c1
 8006160:	080060d3 	.word	0x080060d3
 8006164:	080060e5 	.word	0x080060e5

08006168 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b090      	sub	sp, #64	; 0x40
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	4613      	mov	r3, r2
 8006176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006178:	e050      	b.n	800621c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800617a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006180:	d04c      	beq.n	800621c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <UART_WaitOnFlagUntilTimeout+0x30>
 8006188:	f7fc f866 	bl	8002258 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006194:	429a      	cmp	r2, r3
 8006196:	d241      	bcs.n	800621c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061b8:	637a      	str	r2, [r7, #52]	; 0x34
 80061ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e5      	bne.n	8006198 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3314      	adds	r3, #20
 80061d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	613b      	str	r3, [r7, #16]
   return(result);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3314      	adds	r3, #20
 80061ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ec:	623a      	str	r2, [r7, #32]
 80061ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	69f9      	ldr	r1, [r7, #28]
 80061f2:	6a3a      	ldr	r2, [r7, #32]
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e5      	bne.n	80061cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e00f      	b.n	800623c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	4013      	ands	r3, r2
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	429a      	cmp	r2, r3
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	429a      	cmp	r2, r3
 8006238:	d09f      	beq.n	800617a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3740      	adds	r7, #64	; 0x40
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2222      	movs	r2, #34	; 0x22
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006288:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695a      	ldr	r2, [r3, #20]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0201 	orr.w	r2, r2, #1
 8006298:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0220 	orr.w	r2, r2, #32
 80062a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b095      	sub	sp, #84	; 0x54
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	330c      	adds	r3, #12
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062de:	643a      	str	r2, [r7, #64]	; 0x40
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e5      	bne.n	80062be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3314      	adds	r3, #20
 80062f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	61fb      	str	r3, [r7, #28]
   return(result);
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	64bb      	str	r3, [r7, #72]	; 0x48
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3314      	adds	r3, #20
 8006310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006312:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	2b01      	cmp	r3, #1
 800632c:	d119      	bne.n	8006362 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	330c      	adds	r3, #12
 8006334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	60bb      	str	r3, [r7, #8]
   return(result);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f023 0310 	bic.w	r3, r3, #16
 8006344:	647b      	str	r3, [r7, #68]	; 0x44
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	330c      	adds	r3, #12
 800634c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800634e:	61ba      	str	r2, [r7, #24]
 8006350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6979      	ldr	r1, [r7, #20]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	613b      	str	r3, [r7, #16]
   return(result);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e5      	bne.n	800632e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006370:	bf00      	nop
 8006372:	3754      	adds	r7, #84	; 0x54
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr

0800637a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800639c:	bf00      	nop
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b21      	cmp	r3, #33	; 0x21
 80063b6:	d13e      	bne.n	8006436 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c0:	d114      	bne.n	80063ec <UART_Transmit_IT+0x48>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d110      	bne.n	80063ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	1c9a      	adds	r2, r3, #2
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	621a      	str	r2, [r3, #32]
 80063ea:	e008      	b.n	80063fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	1c59      	adds	r1, r3, #1
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6211      	str	r1, [r2, #32]
 80063f6:	781a      	ldrb	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4619      	mov	r1, r3
 800640c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10f      	bne.n	8006432 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006420:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006430:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	e000      	b.n	8006438 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006436:	2302      	movs	r3, #2
  }
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006458:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08c      	sub	sp, #48	; 0x30
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b22      	cmp	r3, #34	; 0x22
 8006486:	f040 80b0 	bne.w	80065ea <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006492:	d117      	bne.n	80064c4 <UART_Receive_IT+0x50>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d113      	bne.n	80064c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	1c9a      	adds	r2, r3, #2
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28
 80064c2:	e026      	b.n	8006512 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	d007      	beq.n	80064e8 <UART_Receive_IT+0x74>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <UART_Receive_IT+0x82>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	e008      	b.n	8006508 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006502:	b2da      	uxtb	r2, r3
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29b      	uxth	r3, r3
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4619      	mov	r1, r3
 8006520:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006522:	2b00      	cmp	r3, #0
 8006524:	d15f      	bne.n	80065e6 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0220 	bic.w	r2, r2, #32
 8006534:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006544:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695a      	ldr	r2, [r3, #20]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0201 	bic.w	r2, r2, #1
 8006554:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	2b01      	cmp	r3, #1
 800656a:	d136      	bne.n	80065da <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	330c      	adds	r3, #12
 8006578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	613b      	str	r3, [r7, #16]
   return(result);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f023 0310 	bic.w	r3, r3, #16
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006592:	623a      	str	r2, [r7, #32]
 8006594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	69f9      	ldr	r1, [r7, #28]
 8006598:	6a3a      	ldr	r2, [r7, #32]
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	61bb      	str	r3, [r7, #24]
   return(result);
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e5      	bne.n	8006572 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b10      	cmp	r3, #16
 80065b2:	d10a      	bne.n	80065ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80065d2:	4611      	mov	r1, r2
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
 80065d8:	e003      	b.n	80065e2 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e002      	b.n	80065ec <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	e000      	b.n	80065ec <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80065ea:	2302      	movs	r3, #2
  }
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3730      	adds	r7, #48	; 0x30
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800662e:	f023 030c 	bic.w	r3, r3, #12
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	430b      	orrs	r3, r1
 800663a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a2c      	ldr	r2, [pc, #176]	; (8006708 <UART_SetConfig+0x114>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d103      	bne.n	8006664 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800665c:	f7fd fa4c 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	e002      	b.n	800666a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006664:	f7fd fa34 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8006668:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009a      	lsls	r2, r3, #2
 8006674:	441a      	add	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006680:	4a22      	ldr	r2, [pc, #136]	; (800670c <UART_SetConfig+0x118>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	0119      	lsls	r1, r3, #4
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	009a      	lsls	r2, r3, #2
 8006694:	441a      	add	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	fbb2 f2f3 	udiv	r2, r2, r3
 80066a0:	4b1a      	ldr	r3, [pc, #104]	; (800670c <UART_SetConfig+0x118>)
 80066a2:	fba3 0302 	umull	r0, r3, r3, r2
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	2064      	movs	r0, #100	; 0x64
 80066aa:	fb00 f303 	mul.w	r3, r0, r3
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	3332      	adds	r3, #50	; 0x32
 80066b4:	4a15      	ldr	r2, [pc, #84]	; (800670c <UART_SetConfig+0x118>)
 80066b6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066c0:	4419      	add	r1, r3
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009a      	lsls	r2, r3, #2
 80066cc:	441a      	add	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <UART_SetConfig+0x118>)
 80066da:	fba3 0302 	umull	r0, r3, r3, r2
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	2064      	movs	r0, #100	; 0x64
 80066e2:	fb00 f303 	mul.w	r3, r0, r3
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	3332      	adds	r3, #50	; 0x32
 80066ec:	4a07      	ldr	r2, [pc, #28]	; (800670c <UART_SetConfig+0x118>)
 80066ee:	fba2 2303 	umull	r2, r3, r2, r3
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	f003 020f 	and.w	r2, r3, #15
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	440a      	add	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40013800 	.word	0x40013800
 800670c:	51eb851f 	.word	0x51eb851f

08006710 <__cvt>:
 8006710:	2b00      	cmp	r3, #0
 8006712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006716:	461f      	mov	r7, r3
 8006718:	bfbb      	ittet	lt
 800671a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800671e:	461f      	movlt	r7, r3
 8006720:	2300      	movge	r3, #0
 8006722:	232d      	movlt	r3, #45	; 0x2d
 8006724:	b088      	sub	sp, #32
 8006726:	4614      	mov	r4, r2
 8006728:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800672a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800672c:	7013      	strb	r3, [r2, #0]
 800672e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006730:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006734:	f023 0820 	bic.w	r8, r3, #32
 8006738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800673c:	d005      	beq.n	800674a <__cvt+0x3a>
 800673e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006742:	d100      	bne.n	8006746 <__cvt+0x36>
 8006744:	3501      	adds	r5, #1
 8006746:	2302      	movs	r3, #2
 8006748:	e000      	b.n	800674c <__cvt+0x3c>
 800674a:	2303      	movs	r3, #3
 800674c:	aa07      	add	r2, sp, #28
 800674e:	9204      	str	r2, [sp, #16]
 8006750:	aa06      	add	r2, sp, #24
 8006752:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006756:	e9cd 3500 	strd	r3, r5, [sp]
 800675a:	4622      	mov	r2, r4
 800675c:	463b      	mov	r3, r7
 800675e:	f000 fe73 	bl	8007448 <_dtoa_r>
 8006762:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006766:	4606      	mov	r6, r0
 8006768:	d102      	bne.n	8006770 <__cvt+0x60>
 800676a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800676c:	07db      	lsls	r3, r3, #31
 800676e:	d522      	bpl.n	80067b6 <__cvt+0xa6>
 8006770:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006774:	eb06 0905 	add.w	r9, r6, r5
 8006778:	d110      	bne.n	800679c <__cvt+0x8c>
 800677a:	7833      	ldrb	r3, [r6, #0]
 800677c:	2b30      	cmp	r3, #48	; 0x30
 800677e:	d10a      	bne.n	8006796 <__cvt+0x86>
 8006780:	2200      	movs	r2, #0
 8006782:	2300      	movs	r3, #0
 8006784:	4620      	mov	r0, r4
 8006786:	4639      	mov	r1, r7
 8006788:	f7fa f90e 	bl	80009a8 <__aeabi_dcmpeq>
 800678c:	b918      	cbnz	r0, 8006796 <__cvt+0x86>
 800678e:	f1c5 0501 	rsb	r5, r5, #1
 8006792:	f8ca 5000 	str.w	r5, [sl]
 8006796:	f8da 3000 	ldr.w	r3, [sl]
 800679a:	4499      	add	r9, r3
 800679c:	2200      	movs	r2, #0
 800679e:	2300      	movs	r3, #0
 80067a0:	4620      	mov	r0, r4
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7fa f900 	bl	80009a8 <__aeabi_dcmpeq>
 80067a8:	b108      	cbz	r0, 80067ae <__cvt+0x9e>
 80067aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80067ae:	2230      	movs	r2, #48	; 0x30
 80067b0:	9b07      	ldr	r3, [sp, #28]
 80067b2:	454b      	cmp	r3, r9
 80067b4:	d307      	bcc.n	80067c6 <__cvt+0xb6>
 80067b6:	4630      	mov	r0, r6
 80067b8:	9b07      	ldr	r3, [sp, #28]
 80067ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067bc:	1b9b      	subs	r3, r3, r6
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	b008      	add	sp, #32
 80067c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c6:	1c59      	adds	r1, r3, #1
 80067c8:	9107      	str	r1, [sp, #28]
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e7f0      	b.n	80067b0 <__cvt+0xa0>

080067ce <__exponent>:
 80067ce:	4603      	mov	r3, r0
 80067d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067d2:	2900      	cmp	r1, #0
 80067d4:	f803 2b02 	strb.w	r2, [r3], #2
 80067d8:	bfb6      	itet	lt
 80067da:	222d      	movlt	r2, #45	; 0x2d
 80067dc:	222b      	movge	r2, #43	; 0x2b
 80067de:	4249      	neglt	r1, r1
 80067e0:	2909      	cmp	r1, #9
 80067e2:	7042      	strb	r2, [r0, #1]
 80067e4:	dd2a      	ble.n	800683c <__exponent+0x6e>
 80067e6:	f10d 0207 	add.w	r2, sp, #7
 80067ea:	4617      	mov	r7, r2
 80067ec:	260a      	movs	r6, #10
 80067ee:	fb91 f5f6 	sdiv	r5, r1, r6
 80067f2:	4694      	mov	ip, r2
 80067f4:	fb06 1415 	mls	r4, r6, r5, r1
 80067f8:	3430      	adds	r4, #48	; 0x30
 80067fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80067fe:	460c      	mov	r4, r1
 8006800:	2c63      	cmp	r4, #99	; 0x63
 8006802:	4629      	mov	r1, r5
 8006804:	f102 32ff 	add.w	r2, r2, #4294967295
 8006808:	dcf1      	bgt.n	80067ee <__exponent+0x20>
 800680a:	3130      	adds	r1, #48	; 0x30
 800680c:	f1ac 0402 	sub.w	r4, ip, #2
 8006810:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006814:	4622      	mov	r2, r4
 8006816:	1c41      	adds	r1, r0, #1
 8006818:	42ba      	cmp	r2, r7
 800681a:	d30a      	bcc.n	8006832 <__exponent+0x64>
 800681c:	f10d 0209 	add.w	r2, sp, #9
 8006820:	eba2 020c 	sub.w	r2, r2, ip
 8006824:	42bc      	cmp	r4, r7
 8006826:	bf88      	it	hi
 8006828:	2200      	movhi	r2, #0
 800682a:	4413      	add	r3, r2
 800682c:	1a18      	subs	r0, r3, r0
 800682e:	b003      	add	sp, #12
 8006830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006832:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006836:	f801 5f01 	strb.w	r5, [r1, #1]!
 800683a:	e7ed      	b.n	8006818 <__exponent+0x4a>
 800683c:	2330      	movs	r3, #48	; 0x30
 800683e:	3130      	adds	r1, #48	; 0x30
 8006840:	7083      	strb	r3, [r0, #2]
 8006842:	70c1      	strb	r1, [r0, #3]
 8006844:	1d03      	adds	r3, r0, #4
 8006846:	e7f1      	b.n	800682c <__exponent+0x5e>

08006848 <_printf_float>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	b091      	sub	sp, #68	; 0x44
 800684e:	460c      	mov	r4, r1
 8006850:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006854:	4616      	mov	r6, r2
 8006856:	461f      	mov	r7, r3
 8006858:	4605      	mov	r5, r0
 800685a:	f000 fce5 	bl	8007228 <_localeconv_r>
 800685e:	6803      	ldr	r3, [r0, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	9309      	str	r3, [sp, #36]	; 0x24
 8006864:	f7f9 fc74 	bl	8000150 <strlen>
 8006868:	2300      	movs	r3, #0
 800686a:	930e      	str	r3, [sp, #56]	; 0x38
 800686c:	f8d8 3000 	ldr.w	r3, [r8]
 8006870:	900a      	str	r0, [sp, #40]	; 0x28
 8006872:	3307      	adds	r3, #7
 8006874:	f023 0307 	bic.w	r3, r3, #7
 8006878:	f103 0208 	add.w	r2, r3, #8
 800687c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006880:	f8d4 b000 	ldr.w	fp, [r4]
 8006884:	f8c8 2000 	str.w	r2, [r8]
 8006888:	e9d3 a800 	ldrd	sl, r8, [r3]
 800688c:	4652      	mov	r2, sl
 800688e:	4643      	mov	r3, r8
 8006890:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006894:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006898:	930b      	str	r3, [sp, #44]	; 0x2c
 800689a:	f04f 32ff 	mov.w	r2, #4294967295
 800689e:	4650      	mov	r0, sl
 80068a0:	4b9c      	ldr	r3, [pc, #624]	; (8006b14 <_printf_float+0x2cc>)
 80068a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068a4:	f7fa f8b2 	bl	8000a0c <__aeabi_dcmpun>
 80068a8:	bb70      	cbnz	r0, 8006908 <_printf_float+0xc0>
 80068aa:	f04f 32ff 	mov.w	r2, #4294967295
 80068ae:	4650      	mov	r0, sl
 80068b0:	4b98      	ldr	r3, [pc, #608]	; (8006b14 <_printf_float+0x2cc>)
 80068b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068b4:	f7fa f88c 	bl	80009d0 <__aeabi_dcmple>
 80068b8:	bb30      	cbnz	r0, 8006908 <_printf_float+0xc0>
 80068ba:	2200      	movs	r2, #0
 80068bc:	2300      	movs	r3, #0
 80068be:	4650      	mov	r0, sl
 80068c0:	4641      	mov	r1, r8
 80068c2:	f7fa f87b 	bl	80009bc <__aeabi_dcmplt>
 80068c6:	b110      	cbz	r0, 80068ce <_printf_float+0x86>
 80068c8:	232d      	movs	r3, #45	; 0x2d
 80068ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ce:	4a92      	ldr	r2, [pc, #584]	; (8006b18 <_printf_float+0x2d0>)
 80068d0:	4b92      	ldr	r3, [pc, #584]	; (8006b1c <_printf_float+0x2d4>)
 80068d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80068d6:	bf94      	ite	ls
 80068d8:	4690      	movls	r8, r2
 80068da:	4698      	movhi	r8, r3
 80068dc:	2303      	movs	r3, #3
 80068de:	f04f 0a00 	mov.w	sl, #0
 80068e2:	6123      	str	r3, [r4, #16]
 80068e4:	f02b 0304 	bic.w	r3, fp, #4
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	4633      	mov	r3, r6
 80068ec:	4621      	mov	r1, r4
 80068ee:	4628      	mov	r0, r5
 80068f0:	9700      	str	r7, [sp, #0]
 80068f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80068f4:	f000 f9d6 	bl	8006ca4 <_printf_common>
 80068f8:	3001      	adds	r0, #1
 80068fa:	f040 8090 	bne.w	8006a1e <_printf_float+0x1d6>
 80068fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006902:	b011      	add	sp, #68	; 0x44
 8006904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006908:	4652      	mov	r2, sl
 800690a:	4643      	mov	r3, r8
 800690c:	4650      	mov	r0, sl
 800690e:	4641      	mov	r1, r8
 8006910:	f7fa f87c 	bl	8000a0c <__aeabi_dcmpun>
 8006914:	b148      	cbz	r0, 800692a <_printf_float+0xe2>
 8006916:	f1b8 0f00 	cmp.w	r8, #0
 800691a:	bfb8      	it	lt
 800691c:	232d      	movlt	r3, #45	; 0x2d
 800691e:	4a80      	ldr	r2, [pc, #512]	; (8006b20 <_printf_float+0x2d8>)
 8006920:	bfb8      	it	lt
 8006922:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006926:	4b7f      	ldr	r3, [pc, #508]	; (8006b24 <_printf_float+0x2dc>)
 8006928:	e7d3      	b.n	80068d2 <_printf_float+0x8a>
 800692a:	6863      	ldr	r3, [r4, #4]
 800692c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	d142      	bne.n	80069ba <_printf_float+0x172>
 8006934:	2306      	movs	r3, #6
 8006936:	6063      	str	r3, [r4, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	9206      	str	r2, [sp, #24]
 800693c:	aa0e      	add	r2, sp, #56	; 0x38
 800693e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006942:	aa0d      	add	r2, sp, #52	; 0x34
 8006944:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006948:	9203      	str	r2, [sp, #12]
 800694a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800694e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006952:	6023      	str	r3, [r4, #0]
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	4652      	mov	r2, sl
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	4628      	mov	r0, r5
 800695c:	4643      	mov	r3, r8
 800695e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006960:	f7ff fed6 	bl	8006710 <__cvt>
 8006964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006966:	4680      	mov	r8, r0
 8006968:	2947      	cmp	r1, #71	; 0x47
 800696a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800696c:	d108      	bne.n	8006980 <_printf_float+0x138>
 800696e:	1cc8      	adds	r0, r1, #3
 8006970:	db02      	blt.n	8006978 <_printf_float+0x130>
 8006972:	6863      	ldr	r3, [r4, #4]
 8006974:	4299      	cmp	r1, r3
 8006976:	dd40      	ble.n	80069fa <_printf_float+0x1b2>
 8006978:	f1a9 0902 	sub.w	r9, r9, #2
 800697c:	fa5f f989 	uxtb.w	r9, r9
 8006980:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006984:	d81f      	bhi.n	80069c6 <_printf_float+0x17e>
 8006986:	464a      	mov	r2, r9
 8006988:	3901      	subs	r1, #1
 800698a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800698e:	910d      	str	r1, [sp, #52]	; 0x34
 8006990:	f7ff ff1d 	bl	80067ce <__exponent>
 8006994:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006996:	4682      	mov	sl, r0
 8006998:	1813      	adds	r3, r2, r0
 800699a:	2a01      	cmp	r2, #1
 800699c:	6123      	str	r3, [r4, #16]
 800699e:	dc02      	bgt.n	80069a6 <_printf_float+0x15e>
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	07d2      	lsls	r2, r2, #31
 80069a4:	d501      	bpl.n	80069aa <_printf_float+0x162>
 80069a6:	3301      	adds	r3, #1
 80069a8:	6123      	str	r3, [r4, #16]
 80069aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d09b      	beq.n	80068ea <_printf_float+0xa2>
 80069b2:	232d      	movs	r3, #45	; 0x2d
 80069b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b8:	e797      	b.n	80068ea <_printf_float+0xa2>
 80069ba:	2947      	cmp	r1, #71	; 0x47
 80069bc:	d1bc      	bne.n	8006938 <_printf_float+0xf0>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1ba      	bne.n	8006938 <_printf_float+0xf0>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e7b7      	b.n	8006936 <_printf_float+0xee>
 80069c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80069ca:	d118      	bne.n	80069fe <_printf_float+0x1b6>
 80069cc:	2900      	cmp	r1, #0
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	dd0b      	ble.n	80069ea <_printf_float+0x1a2>
 80069d2:	6121      	str	r1, [r4, #16]
 80069d4:	b913      	cbnz	r3, 80069dc <_printf_float+0x194>
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	07d0      	lsls	r0, r2, #31
 80069da:	d502      	bpl.n	80069e2 <_printf_float+0x19a>
 80069dc:	3301      	adds	r3, #1
 80069de:	440b      	add	r3, r1
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	f04f 0a00 	mov.w	sl, #0
 80069e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80069e8:	e7df      	b.n	80069aa <_printf_float+0x162>
 80069ea:	b913      	cbnz	r3, 80069f2 <_printf_float+0x1aa>
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	07d2      	lsls	r2, r2, #31
 80069f0:	d501      	bpl.n	80069f6 <_printf_float+0x1ae>
 80069f2:	3302      	adds	r3, #2
 80069f4:	e7f4      	b.n	80069e0 <_printf_float+0x198>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e7f2      	b.n	80069e0 <_printf_float+0x198>
 80069fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80069fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a00:	4299      	cmp	r1, r3
 8006a02:	db05      	blt.n	8006a10 <_printf_float+0x1c8>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	6121      	str	r1, [r4, #16]
 8006a08:	07d8      	lsls	r0, r3, #31
 8006a0a:	d5ea      	bpl.n	80069e2 <_printf_float+0x19a>
 8006a0c:	1c4b      	adds	r3, r1, #1
 8006a0e:	e7e7      	b.n	80069e0 <_printf_float+0x198>
 8006a10:	2900      	cmp	r1, #0
 8006a12:	bfcc      	ite	gt
 8006a14:	2201      	movgt	r2, #1
 8006a16:	f1c1 0202 	rsble	r2, r1, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	e7e0      	b.n	80069e0 <_printf_float+0x198>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	055a      	lsls	r2, r3, #21
 8006a22:	d407      	bmi.n	8006a34 <_printf_float+0x1ec>
 8006a24:	6923      	ldr	r3, [r4, #16]
 8006a26:	4642      	mov	r2, r8
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d12b      	bne.n	8006a8a <_printf_float+0x242>
 8006a32:	e764      	b.n	80068fe <_printf_float+0xb6>
 8006a34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a38:	f240 80dd 	bls.w	8006bf6 <_printf_float+0x3ae>
 8006a3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a40:	2200      	movs	r2, #0
 8006a42:	2300      	movs	r3, #0
 8006a44:	f7f9 ffb0 	bl	80009a8 <__aeabi_dcmpeq>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d033      	beq.n	8006ab4 <_printf_float+0x26c>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4628      	mov	r0, r5
 8006a52:	4a35      	ldr	r2, [pc, #212]	; (8006b28 <_printf_float+0x2e0>)
 8006a54:	47b8      	blx	r7
 8006a56:	3001      	adds	r0, #1
 8006a58:	f43f af51 	beq.w	80068fe <_printf_float+0xb6>
 8006a5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a60:	429a      	cmp	r2, r3
 8006a62:	db02      	blt.n	8006a6a <_printf_float+0x222>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	07d8      	lsls	r0, r3, #31
 8006a68:	d50f      	bpl.n	8006a8a <_printf_float+0x242>
 8006a6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f af42 	beq.w	80068fe <_printf_float+0xb6>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	f104 091a 	add.w	r9, r4, #26
 8006a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a84:	3b01      	subs	r3, #1
 8006a86:	4543      	cmp	r3, r8
 8006a88:	dc09      	bgt.n	8006a9e <_printf_float+0x256>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	079b      	lsls	r3, r3, #30
 8006a8e:	f100 8104 	bmi.w	8006c9a <_printf_float+0x452>
 8006a92:	68e0      	ldr	r0, [r4, #12]
 8006a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a96:	4298      	cmp	r0, r3
 8006a98:	bfb8      	it	lt
 8006a9a:	4618      	movlt	r0, r3
 8006a9c:	e731      	b.n	8006902 <_printf_float+0xba>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	464a      	mov	r2, r9
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	f43f af28 	beq.w	80068fe <_printf_float+0xb6>
 8006aae:	f108 0801 	add.w	r8, r8, #1
 8006ab2:	e7e6      	b.n	8006a82 <_printf_float+0x23a>
 8006ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	dc38      	bgt.n	8006b2c <_printf_float+0x2e4>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	4a19      	ldr	r2, [pc, #100]	; (8006b28 <_printf_float+0x2e0>)
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f43f af1a 	beq.w	80068fe <_printf_float+0xb6>
 8006aca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	d102      	bne.n	8006ad8 <_printf_float+0x290>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	07d9      	lsls	r1, r3, #31
 8006ad6:	d5d8      	bpl.n	8006a8a <_printf_float+0x242>
 8006ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b8      	blx	r7
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f43f af0b 	beq.w	80068fe <_printf_float+0xb6>
 8006ae8:	f04f 0900 	mov.w	r9, #0
 8006aec:	f104 0a1a 	add.w	sl, r4, #26
 8006af0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006af2:	425b      	negs	r3, r3
 8006af4:	454b      	cmp	r3, r9
 8006af6:	dc01      	bgt.n	8006afc <_printf_float+0x2b4>
 8006af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006afa:	e794      	b.n	8006a26 <_printf_float+0x1de>
 8006afc:	2301      	movs	r3, #1
 8006afe:	4652      	mov	r2, sl
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b8      	blx	r7
 8006b06:	3001      	adds	r0, #1
 8006b08:	f43f aef9 	beq.w	80068fe <_printf_float+0xb6>
 8006b0c:	f109 0901 	add.w	r9, r9, #1
 8006b10:	e7ee      	b.n	8006af0 <_printf_float+0x2a8>
 8006b12:	bf00      	nop
 8006b14:	7fefffff 	.word	0x7fefffff
 8006b18:	0800944a 	.word	0x0800944a
 8006b1c:	0800944e 	.word	0x0800944e
 8006b20:	08009452 	.word	0x08009452
 8006b24:	08009456 	.word	0x08009456
 8006b28:	0800945a 	.word	0x0800945a
 8006b2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b30:	429a      	cmp	r2, r3
 8006b32:	bfa8      	it	ge
 8006b34:	461a      	movge	r2, r3
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	4691      	mov	r9, r2
 8006b3a:	dc37      	bgt.n	8006bac <_printf_float+0x364>
 8006b3c:	f04f 0b00 	mov.w	fp, #0
 8006b40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b44:	f104 021a 	add.w	r2, r4, #26
 8006b48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006b4c:	ebaa 0309 	sub.w	r3, sl, r9
 8006b50:	455b      	cmp	r3, fp
 8006b52:	dc33      	bgt.n	8006bbc <_printf_float+0x374>
 8006b54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	db3b      	blt.n	8006bd4 <_printf_float+0x38c>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	07da      	lsls	r2, r3, #31
 8006b60:	d438      	bmi.n	8006bd4 <_printf_float+0x38c>
 8006b62:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006b66:	eba2 0903 	sub.w	r9, r2, r3
 8006b6a:	eba2 020a 	sub.w	r2, r2, sl
 8006b6e:	4591      	cmp	r9, r2
 8006b70:	bfa8      	it	ge
 8006b72:	4691      	movge	r9, r2
 8006b74:	f1b9 0f00 	cmp.w	r9, #0
 8006b78:	dc34      	bgt.n	8006be4 <_printf_float+0x39c>
 8006b7a:	f04f 0800 	mov.w	r8, #0
 8006b7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b82:	f104 0a1a 	add.w	sl, r4, #26
 8006b86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	eba3 0309 	sub.w	r3, r3, r9
 8006b90:	4543      	cmp	r3, r8
 8006b92:	f77f af7a 	ble.w	8006a8a <_printf_float+0x242>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4652      	mov	r2, sl
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f aeac 	beq.w	80068fe <_printf_float+0xb6>
 8006ba6:	f108 0801 	add.w	r8, r8, #1
 8006baa:	e7ec      	b.n	8006b86 <_printf_float+0x33e>
 8006bac:	4613      	mov	r3, r2
 8006bae:	4631      	mov	r1, r6
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d1c0      	bne.n	8006b3c <_printf_float+0x2f4>
 8006bba:	e6a0      	b.n	80068fe <_printf_float+0xb6>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8006bc4:	47b8      	blx	r7
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f43f ae99 	beq.w	80068fe <_printf_float+0xb6>
 8006bcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bce:	f10b 0b01 	add.w	fp, fp, #1
 8006bd2:	e7b9      	b.n	8006b48 <_printf_float+0x300>
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bda:	4628      	mov	r0, r5
 8006bdc:	47b8      	blx	r7
 8006bde:	3001      	adds	r0, #1
 8006be0:	d1bf      	bne.n	8006b62 <_printf_float+0x31a>
 8006be2:	e68c      	b.n	80068fe <_printf_float+0xb6>
 8006be4:	464b      	mov	r3, r9
 8006be6:	4631      	mov	r1, r6
 8006be8:	4628      	mov	r0, r5
 8006bea:	eb08 020a 	add.w	r2, r8, sl
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d1c2      	bne.n	8006b7a <_printf_float+0x332>
 8006bf4:	e683      	b.n	80068fe <_printf_float+0xb6>
 8006bf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bf8:	2a01      	cmp	r2, #1
 8006bfa:	dc01      	bgt.n	8006c00 <_printf_float+0x3b8>
 8006bfc:	07db      	lsls	r3, r3, #31
 8006bfe:	d539      	bpl.n	8006c74 <_printf_float+0x42c>
 8006c00:	2301      	movs	r3, #1
 8006c02:	4642      	mov	r2, r8
 8006c04:	4631      	mov	r1, r6
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b8      	blx	r7
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	f43f ae77 	beq.w	80068fe <_printf_float+0xb6>
 8006c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f43f ae6f 	beq.w	80068fe <_printf_float+0xb6>
 8006c20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c24:	2200      	movs	r2, #0
 8006c26:	2300      	movs	r3, #0
 8006c28:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006c2c:	f7f9 febc 	bl	80009a8 <__aeabi_dcmpeq>
 8006c30:	b9d8      	cbnz	r0, 8006c6a <_printf_float+0x422>
 8006c32:	f109 33ff 	add.w	r3, r9, #4294967295
 8006c36:	f108 0201 	add.w	r2, r8, #1
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	d10e      	bne.n	8006c62 <_printf_float+0x41a>
 8006c44:	e65b      	b.n	80068fe <_printf_float+0xb6>
 8006c46:	2301      	movs	r3, #1
 8006c48:	464a      	mov	r2, r9
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f ae54 	beq.w	80068fe <_printf_float+0xb6>
 8006c56:	f108 0801 	add.w	r8, r8, #1
 8006c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	4543      	cmp	r3, r8
 8006c60:	dcf1      	bgt.n	8006c46 <_printf_float+0x3fe>
 8006c62:	4653      	mov	r3, sl
 8006c64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c68:	e6de      	b.n	8006a28 <_printf_float+0x1e0>
 8006c6a:	f04f 0800 	mov.w	r8, #0
 8006c6e:	f104 091a 	add.w	r9, r4, #26
 8006c72:	e7f2      	b.n	8006c5a <_printf_float+0x412>
 8006c74:	2301      	movs	r3, #1
 8006c76:	4642      	mov	r2, r8
 8006c78:	e7df      	b.n	8006c3a <_printf_float+0x3f2>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	464a      	mov	r2, r9
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	f43f ae3a 	beq.w	80068fe <_printf_float+0xb6>
 8006c8a:	f108 0801 	add.w	r8, r8, #1
 8006c8e:	68e3      	ldr	r3, [r4, #12]
 8006c90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c92:	1a5b      	subs	r3, r3, r1
 8006c94:	4543      	cmp	r3, r8
 8006c96:	dcf0      	bgt.n	8006c7a <_printf_float+0x432>
 8006c98:	e6fb      	b.n	8006a92 <_printf_float+0x24a>
 8006c9a:	f04f 0800 	mov.w	r8, #0
 8006c9e:	f104 0919 	add.w	r9, r4, #25
 8006ca2:	e7f4      	b.n	8006c8e <_printf_float+0x446>

08006ca4 <_printf_common>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	4616      	mov	r6, r2
 8006caa:	4699      	mov	r9, r3
 8006cac:	688a      	ldr	r2, [r1, #8]
 8006cae:	690b      	ldr	r3, [r1, #16]
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	bfb8      	it	lt
 8006cb6:	4613      	movlt	r3, r2
 8006cb8:	6033      	str	r3, [r6, #0]
 8006cba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cc4:	b10a      	cbz	r2, 8006cca <_printf_common+0x26>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	6033      	str	r3, [r6, #0]
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	0699      	lsls	r1, r3, #26
 8006cce:	bf42      	ittt	mi
 8006cd0:	6833      	ldrmi	r3, [r6, #0]
 8006cd2:	3302      	addmi	r3, #2
 8006cd4:	6033      	strmi	r3, [r6, #0]
 8006cd6:	6825      	ldr	r5, [r4, #0]
 8006cd8:	f015 0506 	ands.w	r5, r5, #6
 8006cdc:	d106      	bne.n	8006cec <_printf_common+0x48>
 8006cde:	f104 0a19 	add.w	sl, r4, #25
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	6832      	ldr	r2, [r6, #0]
 8006ce6:	1a9b      	subs	r3, r3, r2
 8006ce8:	42ab      	cmp	r3, r5
 8006cea:	dc2b      	bgt.n	8006d44 <_printf_common+0xa0>
 8006cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cf0:	1e13      	subs	r3, r2, #0
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	bf18      	it	ne
 8006cf6:	2301      	movne	r3, #1
 8006cf8:	0692      	lsls	r2, r2, #26
 8006cfa:	d430      	bmi.n	8006d5e <_printf_common+0xba>
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	4638      	mov	r0, r7
 8006d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d04:	47c0      	blx	r8
 8006d06:	3001      	adds	r0, #1
 8006d08:	d023      	beq.n	8006d52 <_printf_common+0xae>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	6922      	ldr	r2, [r4, #16]
 8006d0e:	f003 0306 	and.w	r3, r3, #6
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	bf14      	ite	ne
 8006d16:	2500      	movne	r5, #0
 8006d18:	6833      	ldreq	r3, [r6, #0]
 8006d1a:	f04f 0600 	mov.w	r6, #0
 8006d1e:	bf08      	it	eq
 8006d20:	68e5      	ldreq	r5, [r4, #12]
 8006d22:	f104 041a 	add.w	r4, r4, #26
 8006d26:	bf08      	it	eq
 8006d28:	1aed      	subeq	r5, r5, r3
 8006d2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d2e:	bf08      	it	eq
 8006d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d34:	4293      	cmp	r3, r2
 8006d36:	bfc4      	itt	gt
 8006d38:	1a9b      	subgt	r3, r3, r2
 8006d3a:	18ed      	addgt	r5, r5, r3
 8006d3c:	42b5      	cmp	r5, r6
 8006d3e:	d11a      	bne.n	8006d76 <_printf_common+0xd2>
 8006d40:	2000      	movs	r0, #0
 8006d42:	e008      	b.n	8006d56 <_printf_common+0xb2>
 8006d44:	2301      	movs	r3, #1
 8006d46:	4652      	mov	r2, sl
 8006d48:	4649      	mov	r1, r9
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	47c0      	blx	r8
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d103      	bne.n	8006d5a <_printf_common+0xb6>
 8006d52:	f04f 30ff 	mov.w	r0, #4294967295
 8006d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5a:	3501      	adds	r5, #1
 8006d5c:	e7c1      	b.n	8006ce2 <_printf_common+0x3e>
 8006d5e:	2030      	movs	r0, #48	; 0x30
 8006d60:	18e1      	adds	r1, r4, r3
 8006d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d6c:	4422      	add	r2, r4
 8006d6e:	3302      	adds	r3, #2
 8006d70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d74:	e7c2      	b.n	8006cfc <_printf_common+0x58>
 8006d76:	2301      	movs	r3, #1
 8006d78:	4622      	mov	r2, r4
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	47c0      	blx	r8
 8006d80:	3001      	adds	r0, #1
 8006d82:	d0e6      	beq.n	8006d52 <_printf_common+0xae>
 8006d84:	3601      	adds	r6, #1
 8006d86:	e7d9      	b.n	8006d3c <_printf_common+0x98>

08006d88 <_printf_i>:
 8006d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8c:	7e0f      	ldrb	r7, [r1, #24]
 8006d8e:	4691      	mov	r9, r2
 8006d90:	2f78      	cmp	r7, #120	; 0x78
 8006d92:	4680      	mov	r8, r0
 8006d94:	460c      	mov	r4, r1
 8006d96:	469a      	mov	sl, r3
 8006d98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d9e:	d807      	bhi.n	8006db0 <_printf_i+0x28>
 8006da0:	2f62      	cmp	r7, #98	; 0x62
 8006da2:	d80a      	bhi.n	8006dba <_printf_i+0x32>
 8006da4:	2f00      	cmp	r7, #0
 8006da6:	f000 80d5 	beq.w	8006f54 <_printf_i+0x1cc>
 8006daa:	2f58      	cmp	r7, #88	; 0x58
 8006dac:	f000 80c1 	beq.w	8006f32 <_printf_i+0x1aa>
 8006db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006db8:	e03a      	b.n	8006e30 <_printf_i+0xa8>
 8006dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dbe:	2b15      	cmp	r3, #21
 8006dc0:	d8f6      	bhi.n	8006db0 <_printf_i+0x28>
 8006dc2:	a101      	add	r1, pc, #4	; (adr r1, 8006dc8 <_printf_i+0x40>)
 8006dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	08006e35 	.word	0x08006e35
 8006dd0:	08006db1 	.word	0x08006db1
 8006dd4:	08006db1 	.word	0x08006db1
 8006dd8:	08006db1 	.word	0x08006db1
 8006ddc:	08006db1 	.word	0x08006db1
 8006de0:	08006e35 	.word	0x08006e35
 8006de4:	08006db1 	.word	0x08006db1
 8006de8:	08006db1 	.word	0x08006db1
 8006dec:	08006db1 	.word	0x08006db1
 8006df0:	08006db1 	.word	0x08006db1
 8006df4:	08006f3b 	.word	0x08006f3b
 8006df8:	08006e61 	.word	0x08006e61
 8006dfc:	08006ef5 	.word	0x08006ef5
 8006e00:	08006db1 	.word	0x08006db1
 8006e04:	08006db1 	.word	0x08006db1
 8006e08:	08006f5d 	.word	0x08006f5d
 8006e0c:	08006db1 	.word	0x08006db1
 8006e10:	08006e61 	.word	0x08006e61
 8006e14:	08006db1 	.word	0x08006db1
 8006e18:	08006db1 	.word	0x08006db1
 8006e1c:	08006efd 	.word	0x08006efd
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	602a      	str	r2, [r5, #0]
 8006e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e30:	2301      	movs	r3, #1
 8006e32:	e0a0      	b.n	8006f76 <_printf_i+0x1ee>
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	0607      	lsls	r7, r0, #24
 8006e3a:	f103 0104 	add.w	r1, r3, #4
 8006e3e:	6029      	str	r1, [r5, #0]
 8006e40:	d501      	bpl.n	8006e46 <_printf_i+0xbe>
 8006e42:	681e      	ldr	r6, [r3, #0]
 8006e44:	e003      	b.n	8006e4e <_printf_i+0xc6>
 8006e46:	0646      	lsls	r6, r0, #25
 8006e48:	d5fb      	bpl.n	8006e42 <_printf_i+0xba>
 8006e4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e4e:	2e00      	cmp	r6, #0
 8006e50:	da03      	bge.n	8006e5a <_printf_i+0xd2>
 8006e52:	232d      	movs	r3, #45	; 0x2d
 8006e54:	4276      	negs	r6, r6
 8006e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e5a:	230a      	movs	r3, #10
 8006e5c:	4859      	ldr	r0, [pc, #356]	; (8006fc4 <_printf_i+0x23c>)
 8006e5e:	e012      	b.n	8006e86 <_printf_i+0xfe>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	6820      	ldr	r0, [r4, #0]
 8006e64:	1d19      	adds	r1, r3, #4
 8006e66:	6029      	str	r1, [r5, #0]
 8006e68:	0605      	lsls	r5, r0, #24
 8006e6a:	d501      	bpl.n	8006e70 <_printf_i+0xe8>
 8006e6c:	681e      	ldr	r6, [r3, #0]
 8006e6e:	e002      	b.n	8006e76 <_printf_i+0xee>
 8006e70:	0641      	lsls	r1, r0, #25
 8006e72:	d5fb      	bpl.n	8006e6c <_printf_i+0xe4>
 8006e74:	881e      	ldrh	r6, [r3, #0]
 8006e76:	2f6f      	cmp	r7, #111	; 0x6f
 8006e78:	bf0c      	ite	eq
 8006e7a:	2308      	moveq	r3, #8
 8006e7c:	230a      	movne	r3, #10
 8006e7e:	4851      	ldr	r0, [pc, #324]	; (8006fc4 <_printf_i+0x23c>)
 8006e80:	2100      	movs	r1, #0
 8006e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e86:	6865      	ldr	r5, [r4, #4]
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	bfa8      	it	ge
 8006e8c:	6821      	ldrge	r1, [r4, #0]
 8006e8e:	60a5      	str	r5, [r4, #8]
 8006e90:	bfa4      	itt	ge
 8006e92:	f021 0104 	bicge.w	r1, r1, #4
 8006e96:	6021      	strge	r1, [r4, #0]
 8006e98:	b90e      	cbnz	r6, 8006e9e <_printf_i+0x116>
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	d04b      	beq.n	8006f36 <_printf_i+0x1ae>
 8006e9e:	4615      	mov	r5, r2
 8006ea0:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ea4:	fb03 6711 	mls	r7, r3, r1, r6
 8006ea8:	5dc7      	ldrb	r7, [r0, r7]
 8006eaa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006eae:	4637      	mov	r7, r6
 8006eb0:	42bb      	cmp	r3, r7
 8006eb2:	460e      	mov	r6, r1
 8006eb4:	d9f4      	bls.n	8006ea0 <_printf_i+0x118>
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d10b      	bne.n	8006ed2 <_printf_i+0x14a>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	07de      	lsls	r6, r3, #31
 8006ebe:	d508      	bpl.n	8006ed2 <_printf_i+0x14a>
 8006ec0:	6923      	ldr	r3, [r4, #16]
 8006ec2:	6861      	ldr	r1, [r4, #4]
 8006ec4:	4299      	cmp	r1, r3
 8006ec6:	bfde      	ittt	le
 8006ec8:	2330      	movle	r3, #48	; 0x30
 8006eca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ece:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ed2:	1b52      	subs	r2, r2, r5
 8006ed4:	6122      	str	r2, [r4, #16]
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4640      	mov	r0, r8
 8006edc:	f8cd a000 	str.w	sl, [sp]
 8006ee0:	aa03      	add	r2, sp, #12
 8006ee2:	f7ff fedf 	bl	8006ca4 <_printf_common>
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d14a      	bne.n	8006f80 <_printf_i+0x1f8>
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295
 8006eee:	b004      	add	sp, #16
 8006ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	f043 0320 	orr.w	r3, r3, #32
 8006efa:	6023      	str	r3, [r4, #0]
 8006efc:	2778      	movs	r7, #120	; 0x78
 8006efe:	4832      	ldr	r0, [pc, #200]	; (8006fc8 <_printf_i+0x240>)
 8006f00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	6829      	ldr	r1, [r5, #0]
 8006f08:	061f      	lsls	r7, r3, #24
 8006f0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f0e:	d402      	bmi.n	8006f16 <_printf_i+0x18e>
 8006f10:	065f      	lsls	r7, r3, #25
 8006f12:	bf48      	it	mi
 8006f14:	b2b6      	uxthmi	r6, r6
 8006f16:	07df      	lsls	r7, r3, #31
 8006f18:	bf48      	it	mi
 8006f1a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f1e:	6029      	str	r1, [r5, #0]
 8006f20:	bf48      	it	mi
 8006f22:	6023      	strmi	r3, [r4, #0]
 8006f24:	b91e      	cbnz	r6, 8006f2e <_printf_i+0x1a6>
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	f023 0320 	bic.w	r3, r3, #32
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	2310      	movs	r3, #16
 8006f30:	e7a6      	b.n	8006e80 <_printf_i+0xf8>
 8006f32:	4824      	ldr	r0, [pc, #144]	; (8006fc4 <_printf_i+0x23c>)
 8006f34:	e7e4      	b.n	8006f00 <_printf_i+0x178>
 8006f36:	4615      	mov	r5, r2
 8006f38:	e7bd      	b.n	8006eb6 <_printf_i+0x12e>
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	6826      	ldr	r6, [r4, #0]
 8006f3e:	1d18      	adds	r0, r3, #4
 8006f40:	6961      	ldr	r1, [r4, #20]
 8006f42:	6028      	str	r0, [r5, #0]
 8006f44:	0635      	lsls	r5, r6, #24
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	d501      	bpl.n	8006f4e <_printf_i+0x1c6>
 8006f4a:	6019      	str	r1, [r3, #0]
 8006f4c:	e002      	b.n	8006f54 <_printf_i+0x1cc>
 8006f4e:	0670      	lsls	r0, r6, #25
 8006f50:	d5fb      	bpl.n	8006f4a <_printf_i+0x1c2>
 8006f52:	8019      	strh	r1, [r3, #0]
 8006f54:	2300      	movs	r3, #0
 8006f56:	4615      	mov	r5, r2
 8006f58:	6123      	str	r3, [r4, #16]
 8006f5a:	e7bc      	b.n	8006ed6 <_printf_i+0x14e>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	2100      	movs	r1, #0
 8006f60:	1d1a      	adds	r2, r3, #4
 8006f62:	602a      	str	r2, [r5, #0]
 8006f64:	681d      	ldr	r5, [r3, #0]
 8006f66:	6862      	ldr	r2, [r4, #4]
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f000 f9d4 	bl	8007316 <memchr>
 8006f6e:	b108      	cbz	r0, 8006f74 <_printf_i+0x1ec>
 8006f70:	1b40      	subs	r0, r0, r5
 8006f72:	6060      	str	r0, [r4, #4]
 8006f74:	6863      	ldr	r3, [r4, #4]
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f7e:	e7aa      	b.n	8006ed6 <_printf_i+0x14e>
 8006f80:	462a      	mov	r2, r5
 8006f82:	4649      	mov	r1, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	47d0      	blx	sl
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	d0ad      	beq.n	8006eea <_printf_i+0x162>
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	079b      	lsls	r3, r3, #30
 8006f92:	d413      	bmi.n	8006fbc <_printf_i+0x234>
 8006f94:	68e0      	ldr	r0, [r4, #12]
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	4298      	cmp	r0, r3
 8006f9a:	bfb8      	it	lt
 8006f9c:	4618      	movlt	r0, r3
 8006f9e:	e7a6      	b.n	8006eee <_printf_i+0x166>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4632      	mov	r2, r6
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	47d0      	blx	sl
 8006faa:	3001      	adds	r0, #1
 8006fac:	d09d      	beq.n	8006eea <_printf_i+0x162>
 8006fae:	3501      	adds	r5, #1
 8006fb0:	68e3      	ldr	r3, [r4, #12]
 8006fb2:	9903      	ldr	r1, [sp, #12]
 8006fb4:	1a5b      	subs	r3, r3, r1
 8006fb6:	42ab      	cmp	r3, r5
 8006fb8:	dcf2      	bgt.n	8006fa0 <_printf_i+0x218>
 8006fba:	e7eb      	b.n	8006f94 <_printf_i+0x20c>
 8006fbc:	2500      	movs	r5, #0
 8006fbe:	f104 0619 	add.w	r6, r4, #25
 8006fc2:	e7f5      	b.n	8006fb0 <_printf_i+0x228>
 8006fc4:	0800945c 	.word	0x0800945c
 8006fc8:	0800946d 	.word	0x0800946d

08006fcc <std>:
 8006fcc:	2300      	movs	r3, #0
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8006fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fda:	6083      	str	r3, [r0, #8]
 8006fdc:	8181      	strh	r1, [r0, #12]
 8006fde:	6643      	str	r3, [r0, #100]	; 0x64
 8006fe0:	81c2      	strh	r2, [r0, #14]
 8006fe2:	6183      	str	r3, [r0, #24]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	2208      	movs	r2, #8
 8006fe8:	305c      	adds	r0, #92	; 0x5c
 8006fea:	f000 f914 	bl	8007216 <memset>
 8006fee:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <std+0x58>)
 8006ff0:	6224      	str	r4, [r4, #32]
 8006ff2:	6263      	str	r3, [r4, #36]	; 0x24
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <std+0x5c>)
 8006ff6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	; (800702c <std+0x60>)
 8006ffa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <std+0x64>)
 8006ffe:	6323      	str	r3, [r4, #48]	; 0x30
 8007000:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <std+0x68>)
 8007002:	429c      	cmp	r4, r3
 8007004:	d006      	beq.n	8007014 <std+0x48>
 8007006:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800700a:	4294      	cmp	r4, r2
 800700c:	d002      	beq.n	8007014 <std+0x48>
 800700e:	33d0      	adds	r3, #208	; 0xd0
 8007010:	429c      	cmp	r4, r3
 8007012:	d105      	bne.n	8007020 <std+0x54>
 8007014:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800701c:	f000 b978 	b.w	8007310 <__retarget_lock_init_recursive>
 8007020:	bd10      	pop	{r4, pc}
 8007022:	bf00      	nop
 8007024:	08007191 	.word	0x08007191
 8007028:	080071b3 	.word	0x080071b3
 800702c:	080071eb 	.word	0x080071eb
 8007030:	0800720f 	.word	0x0800720f
 8007034:	200004ac 	.word	0x200004ac

08007038 <stdio_exit_handler>:
 8007038:	4a02      	ldr	r2, [pc, #8]	; (8007044 <stdio_exit_handler+0xc>)
 800703a:	4903      	ldr	r1, [pc, #12]	; (8007048 <stdio_exit_handler+0x10>)
 800703c:	4803      	ldr	r0, [pc, #12]	; (800704c <stdio_exit_handler+0x14>)
 800703e:	f000 b869 	b.w	8007114 <_fwalk_sglue>
 8007042:	bf00      	nop
 8007044:	20000010 	.word	0x20000010
 8007048:	08008cad 	.word	0x08008cad
 800704c:	2000001c 	.word	0x2000001c

08007050 <cleanup_stdio>:
 8007050:	6841      	ldr	r1, [r0, #4]
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <cleanup_stdio+0x34>)
 8007054:	b510      	push	{r4, lr}
 8007056:	4299      	cmp	r1, r3
 8007058:	4604      	mov	r4, r0
 800705a:	d001      	beq.n	8007060 <cleanup_stdio+0x10>
 800705c:	f001 fe26 	bl	8008cac <_fflush_r>
 8007060:	68a1      	ldr	r1, [r4, #8]
 8007062:	4b09      	ldr	r3, [pc, #36]	; (8007088 <cleanup_stdio+0x38>)
 8007064:	4299      	cmp	r1, r3
 8007066:	d002      	beq.n	800706e <cleanup_stdio+0x1e>
 8007068:	4620      	mov	r0, r4
 800706a:	f001 fe1f 	bl	8008cac <_fflush_r>
 800706e:	68e1      	ldr	r1, [r4, #12]
 8007070:	4b06      	ldr	r3, [pc, #24]	; (800708c <cleanup_stdio+0x3c>)
 8007072:	4299      	cmp	r1, r3
 8007074:	d004      	beq.n	8007080 <cleanup_stdio+0x30>
 8007076:	4620      	mov	r0, r4
 8007078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800707c:	f001 be16 	b.w	8008cac <_fflush_r>
 8007080:	bd10      	pop	{r4, pc}
 8007082:	bf00      	nop
 8007084:	200004ac 	.word	0x200004ac
 8007088:	20000514 	.word	0x20000514
 800708c:	2000057c 	.word	0x2000057c

08007090 <global_stdio_init.part.0>:
 8007090:	b510      	push	{r4, lr}
 8007092:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <global_stdio_init.part.0+0x30>)
 8007094:	4c0b      	ldr	r4, [pc, #44]	; (80070c4 <global_stdio_init.part.0+0x34>)
 8007096:	4a0c      	ldr	r2, [pc, #48]	; (80070c8 <global_stdio_init.part.0+0x38>)
 8007098:	4620      	mov	r0, r4
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	2104      	movs	r1, #4
 800709e:	2200      	movs	r2, #0
 80070a0:	f7ff ff94 	bl	8006fcc <std>
 80070a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80070a8:	2201      	movs	r2, #1
 80070aa:	2109      	movs	r1, #9
 80070ac:	f7ff ff8e 	bl	8006fcc <std>
 80070b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80070b4:	2202      	movs	r2, #2
 80070b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ba:	2112      	movs	r1, #18
 80070bc:	f7ff bf86 	b.w	8006fcc <std>
 80070c0:	200005e4 	.word	0x200005e4
 80070c4:	200004ac 	.word	0x200004ac
 80070c8:	08007039 	.word	0x08007039

080070cc <__sfp_lock_acquire>:
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__sfp_lock_acquire+0x8>)
 80070ce:	f000 b920 	b.w	8007312 <__retarget_lock_acquire_recursive>
 80070d2:	bf00      	nop
 80070d4:	200005ed 	.word	0x200005ed

080070d8 <__sfp_lock_release>:
 80070d8:	4801      	ldr	r0, [pc, #4]	; (80070e0 <__sfp_lock_release+0x8>)
 80070da:	f000 b91b 	b.w	8007314 <__retarget_lock_release_recursive>
 80070de:	bf00      	nop
 80070e0:	200005ed 	.word	0x200005ed

080070e4 <__sinit>:
 80070e4:	b510      	push	{r4, lr}
 80070e6:	4604      	mov	r4, r0
 80070e8:	f7ff fff0 	bl	80070cc <__sfp_lock_acquire>
 80070ec:	6a23      	ldr	r3, [r4, #32]
 80070ee:	b11b      	cbz	r3, 80070f8 <__sinit+0x14>
 80070f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070f4:	f7ff bff0 	b.w	80070d8 <__sfp_lock_release>
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <__sinit+0x28>)
 80070fa:	6223      	str	r3, [r4, #32]
 80070fc:	4b04      	ldr	r3, [pc, #16]	; (8007110 <__sinit+0x2c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1f5      	bne.n	80070f0 <__sinit+0xc>
 8007104:	f7ff ffc4 	bl	8007090 <global_stdio_init.part.0>
 8007108:	e7f2      	b.n	80070f0 <__sinit+0xc>
 800710a:	bf00      	nop
 800710c:	08007051 	.word	0x08007051
 8007110:	200005e4 	.word	0x200005e4

08007114 <_fwalk_sglue>:
 8007114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007118:	4607      	mov	r7, r0
 800711a:	4688      	mov	r8, r1
 800711c:	4614      	mov	r4, r2
 800711e:	2600      	movs	r6, #0
 8007120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007124:	f1b9 0901 	subs.w	r9, r9, #1
 8007128:	d505      	bpl.n	8007136 <_fwalk_sglue+0x22>
 800712a:	6824      	ldr	r4, [r4, #0]
 800712c:	2c00      	cmp	r4, #0
 800712e:	d1f7      	bne.n	8007120 <_fwalk_sglue+0xc>
 8007130:	4630      	mov	r0, r6
 8007132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007136:	89ab      	ldrh	r3, [r5, #12]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d907      	bls.n	800714c <_fwalk_sglue+0x38>
 800713c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007140:	3301      	adds	r3, #1
 8007142:	d003      	beq.n	800714c <_fwalk_sglue+0x38>
 8007144:	4629      	mov	r1, r5
 8007146:	4638      	mov	r0, r7
 8007148:	47c0      	blx	r8
 800714a:	4306      	orrs	r6, r0
 800714c:	3568      	adds	r5, #104	; 0x68
 800714e:	e7e9      	b.n	8007124 <_fwalk_sglue+0x10>

08007150 <siprintf>:
 8007150:	b40e      	push	{r1, r2, r3}
 8007152:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007156:	b500      	push	{lr}
 8007158:	b09c      	sub	sp, #112	; 0x70
 800715a:	ab1d      	add	r3, sp, #116	; 0x74
 800715c:	9002      	str	r0, [sp, #8]
 800715e:	9006      	str	r0, [sp, #24]
 8007160:	9107      	str	r1, [sp, #28]
 8007162:	9104      	str	r1, [sp, #16]
 8007164:	4808      	ldr	r0, [pc, #32]	; (8007188 <siprintf+0x38>)
 8007166:	4909      	ldr	r1, [pc, #36]	; (800718c <siprintf+0x3c>)
 8007168:	f853 2b04 	ldr.w	r2, [r3], #4
 800716c:	9105      	str	r1, [sp, #20]
 800716e:	6800      	ldr	r0, [r0, #0]
 8007170:	a902      	add	r1, sp, #8
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	f001 fc1a 	bl	80089ac <_svfiprintf_r>
 8007178:	2200      	movs	r2, #0
 800717a:	9b02      	ldr	r3, [sp, #8]
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	b01c      	add	sp, #112	; 0x70
 8007180:	f85d eb04 	ldr.w	lr, [sp], #4
 8007184:	b003      	add	sp, #12
 8007186:	4770      	bx	lr
 8007188:	20000068 	.word	0x20000068
 800718c:	ffff0208 	.word	0xffff0208

08007190 <__sread>:
 8007190:	b510      	push	{r4, lr}
 8007192:	460c      	mov	r4, r1
 8007194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007198:	f000 f86c 	bl	8007274 <_read_r>
 800719c:	2800      	cmp	r0, #0
 800719e:	bfab      	itete	ge
 80071a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071a2:	89a3      	ldrhlt	r3, [r4, #12]
 80071a4:	181b      	addge	r3, r3, r0
 80071a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071aa:	bfac      	ite	ge
 80071ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80071ae:	81a3      	strhlt	r3, [r4, #12]
 80071b0:	bd10      	pop	{r4, pc}

080071b2 <__swrite>:
 80071b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b6:	461f      	mov	r7, r3
 80071b8:	898b      	ldrh	r3, [r1, #12]
 80071ba:	4605      	mov	r5, r0
 80071bc:	05db      	lsls	r3, r3, #23
 80071be:	460c      	mov	r4, r1
 80071c0:	4616      	mov	r6, r2
 80071c2:	d505      	bpl.n	80071d0 <__swrite+0x1e>
 80071c4:	2302      	movs	r3, #2
 80071c6:	2200      	movs	r2, #0
 80071c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071cc:	f000 f840 	bl	8007250 <_lseek_r>
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	4632      	mov	r2, r6
 80071d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d8:	81a3      	strh	r3, [r4, #12]
 80071da:	4628      	mov	r0, r5
 80071dc:	463b      	mov	r3, r7
 80071de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071e6:	f000 b857 	b.w	8007298 <_write_r>

080071ea <__sseek>:
 80071ea:	b510      	push	{r4, lr}
 80071ec:	460c      	mov	r4, r1
 80071ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f2:	f000 f82d 	bl	8007250 <_lseek_r>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	bf15      	itete	ne
 80071fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80071fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007202:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007206:	81a3      	strheq	r3, [r4, #12]
 8007208:	bf18      	it	ne
 800720a:	81a3      	strhne	r3, [r4, #12]
 800720c:	bd10      	pop	{r4, pc}

0800720e <__sclose>:
 800720e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007212:	f000 b80d 	b.w	8007230 <_close_r>

08007216 <memset>:
 8007216:	4603      	mov	r3, r0
 8007218:	4402      	add	r2, r0
 800721a:	4293      	cmp	r3, r2
 800721c:	d100      	bne.n	8007220 <memset+0xa>
 800721e:	4770      	bx	lr
 8007220:	f803 1b01 	strb.w	r1, [r3], #1
 8007224:	e7f9      	b.n	800721a <memset+0x4>
	...

08007228 <_localeconv_r>:
 8007228:	4800      	ldr	r0, [pc, #0]	; (800722c <_localeconv_r+0x4>)
 800722a:	4770      	bx	lr
 800722c:	2000015c 	.word	0x2000015c

08007230 <_close_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	2300      	movs	r3, #0
 8007234:	4d05      	ldr	r5, [pc, #20]	; (800724c <_close_r+0x1c>)
 8007236:	4604      	mov	r4, r0
 8007238:	4608      	mov	r0, r1
 800723a:	602b      	str	r3, [r5, #0]
 800723c:	f7fa fdca 	bl	8001dd4 <_close>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d102      	bne.n	800724a <_close_r+0x1a>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b103      	cbz	r3, 800724a <_close_r+0x1a>
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	200005e8 	.word	0x200005e8

08007250 <_lseek_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4604      	mov	r4, r0
 8007254:	4608      	mov	r0, r1
 8007256:	4611      	mov	r1, r2
 8007258:	2200      	movs	r2, #0
 800725a:	4d05      	ldr	r5, [pc, #20]	; (8007270 <_lseek_r+0x20>)
 800725c:	602a      	str	r2, [r5, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	f7fa fddc 	bl	8001e1c <_lseek>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d102      	bne.n	800726e <_lseek_r+0x1e>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	b103      	cbz	r3, 800726e <_lseek_r+0x1e>
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	200005e8 	.word	0x200005e8

08007274 <_read_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4604      	mov	r4, r0
 8007278:	4608      	mov	r0, r1
 800727a:	4611      	mov	r1, r2
 800727c:	2200      	movs	r2, #0
 800727e:	4d05      	ldr	r5, [pc, #20]	; (8007294 <_read_r+0x20>)
 8007280:	602a      	str	r2, [r5, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	f7fa fd6d 	bl	8001d62 <_read>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_read_r+0x1e>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_read_r+0x1e>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	200005e8 	.word	0x200005e8

08007298 <_write_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	4611      	mov	r1, r2
 80072a0:	2200      	movs	r2, #0
 80072a2:	4d05      	ldr	r5, [pc, #20]	; (80072b8 <_write_r+0x20>)
 80072a4:	602a      	str	r2, [r5, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f7fa fd78 	bl	8001d9c <_write>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_write_r+0x1e>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_write_r+0x1e>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	200005e8 	.word	0x200005e8

080072bc <__errno>:
 80072bc:	4b01      	ldr	r3, [pc, #4]	; (80072c4 <__errno+0x8>)
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20000068 	.word	0x20000068

080072c8 <__libc_init_array>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	2600      	movs	r6, #0
 80072cc:	4d0c      	ldr	r5, [pc, #48]	; (8007300 <__libc_init_array+0x38>)
 80072ce:	4c0d      	ldr	r4, [pc, #52]	; (8007304 <__libc_init_array+0x3c>)
 80072d0:	1b64      	subs	r4, r4, r5
 80072d2:	10a4      	asrs	r4, r4, #2
 80072d4:	42a6      	cmp	r6, r4
 80072d6:	d109      	bne.n	80072ec <__libc_init_array+0x24>
 80072d8:	f002 f888 	bl	80093ec <_init>
 80072dc:	2600      	movs	r6, #0
 80072de:	4d0a      	ldr	r5, [pc, #40]	; (8007308 <__libc_init_array+0x40>)
 80072e0:	4c0a      	ldr	r4, [pc, #40]	; (800730c <__libc_init_array+0x44>)
 80072e2:	1b64      	subs	r4, r4, r5
 80072e4:	10a4      	asrs	r4, r4, #2
 80072e6:	42a6      	cmp	r6, r4
 80072e8:	d105      	bne.n	80072f6 <__libc_init_array+0x2e>
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f0:	4798      	blx	r3
 80072f2:	3601      	adds	r6, #1
 80072f4:	e7ee      	b.n	80072d4 <__libc_init_array+0xc>
 80072f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fa:	4798      	blx	r3
 80072fc:	3601      	adds	r6, #1
 80072fe:	e7f2      	b.n	80072e6 <__libc_init_array+0x1e>
 8007300:	080097bc 	.word	0x080097bc
 8007304:	080097bc 	.word	0x080097bc
 8007308:	080097bc 	.word	0x080097bc
 800730c:	080097c0 	.word	0x080097c0

08007310 <__retarget_lock_init_recursive>:
 8007310:	4770      	bx	lr

08007312 <__retarget_lock_acquire_recursive>:
 8007312:	4770      	bx	lr

08007314 <__retarget_lock_release_recursive>:
 8007314:	4770      	bx	lr

08007316 <memchr>:
 8007316:	4603      	mov	r3, r0
 8007318:	b510      	push	{r4, lr}
 800731a:	b2c9      	uxtb	r1, r1
 800731c:	4402      	add	r2, r0
 800731e:	4293      	cmp	r3, r2
 8007320:	4618      	mov	r0, r3
 8007322:	d101      	bne.n	8007328 <memchr+0x12>
 8007324:	2000      	movs	r0, #0
 8007326:	e003      	b.n	8007330 <memchr+0x1a>
 8007328:	7804      	ldrb	r4, [r0, #0]
 800732a:	3301      	adds	r3, #1
 800732c:	428c      	cmp	r4, r1
 800732e:	d1f6      	bne.n	800731e <memchr+0x8>
 8007330:	bd10      	pop	{r4, pc}

08007332 <quorem>:
 8007332:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007336:	6903      	ldr	r3, [r0, #16]
 8007338:	690c      	ldr	r4, [r1, #16]
 800733a:	4607      	mov	r7, r0
 800733c:	42a3      	cmp	r3, r4
 800733e:	db7f      	blt.n	8007440 <quorem+0x10e>
 8007340:	3c01      	subs	r4, #1
 8007342:	f100 0514 	add.w	r5, r0, #20
 8007346:	f101 0814 	add.w	r8, r1, #20
 800734a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007354:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007358:	3301      	adds	r3, #1
 800735a:	429a      	cmp	r2, r3
 800735c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007360:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007364:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007368:	d331      	bcc.n	80073ce <quorem+0x9c>
 800736a:	f04f 0e00 	mov.w	lr, #0
 800736e:	4640      	mov	r0, r8
 8007370:	46ac      	mov	ip, r5
 8007372:	46f2      	mov	sl, lr
 8007374:	f850 2b04 	ldr.w	r2, [r0], #4
 8007378:	b293      	uxth	r3, r2
 800737a:	fb06 e303 	mla	r3, r6, r3, lr
 800737e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007382:	0c1a      	lsrs	r2, r3, #16
 8007384:	b29b      	uxth	r3, r3
 8007386:	fb06 220e 	mla	r2, r6, lr, r2
 800738a:	ebaa 0303 	sub.w	r3, sl, r3
 800738e:	f8dc a000 	ldr.w	sl, [ip]
 8007392:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007396:	fa1f fa8a 	uxth.w	sl, sl
 800739a:	4453      	add	r3, sl
 800739c:	f8dc a000 	ldr.w	sl, [ip]
 80073a0:	b292      	uxth	r2, r2
 80073a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073b0:	4581      	cmp	r9, r0
 80073b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073b6:	f84c 3b04 	str.w	r3, [ip], #4
 80073ba:	d2db      	bcs.n	8007374 <quorem+0x42>
 80073bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80073c0:	b92b      	cbnz	r3, 80073ce <quorem+0x9c>
 80073c2:	9b01      	ldr	r3, [sp, #4]
 80073c4:	3b04      	subs	r3, #4
 80073c6:	429d      	cmp	r5, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	d32d      	bcc.n	8007428 <quorem+0xf6>
 80073cc:	613c      	str	r4, [r7, #16]
 80073ce:	4638      	mov	r0, r7
 80073d0:	f001 f994 	bl	80086fc <__mcmp>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	db23      	blt.n	8007420 <quorem+0xee>
 80073d8:	4629      	mov	r1, r5
 80073da:	2000      	movs	r0, #0
 80073dc:	3601      	adds	r6, #1
 80073de:	f858 2b04 	ldr.w	r2, [r8], #4
 80073e2:	f8d1 c000 	ldr.w	ip, [r1]
 80073e6:	b293      	uxth	r3, r2
 80073e8:	1ac3      	subs	r3, r0, r3
 80073ea:	0c12      	lsrs	r2, r2, #16
 80073ec:	fa1f f08c 	uxth.w	r0, ip
 80073f0:	4403      	add	r3, r0
 80073f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80073f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007400:	45c1      	cmp	r9, r8
 8007402:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007406:	f841 3b04 	str.w	r3, [r1], #4
 800740a:	d2e8      	bcs.n	80073de <quorem+0xac>
 800740c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007410:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007414:	b922      	cbnz	r2, 8007420 <quorem+0xee>
 8007416:	3b04      	subs	r3, #4
 8007418:	429d      	cmp	r5, r3
 800741a:	461a      	mov	r2, r3
 800741c:	d30a      	bcc.n	8007434 <quorem+0x102>
 800741e:	613c      	str	r4, [r7, #16]
 8007420:	4630      	mov	r0, r6
 8007422:	b003      	add	sp, #12
 8007424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	3b04      	subs	r3, #4
 800742c:	2a00      	cmp	r2, #0
 800742e:	d1cd      	bne.n	80073cc <quorem+0x9a>
 8007430:	3c01      	subs	r4, #1
 8007432:	e7c8      	b.n	80073c6 <quorem+0x94>
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	3b04      	subs	r3, #4
 8007438:	2a00      	cmp	r2, #0
 800743a:	d1f0      	bne.n	800741e <quorem+0xec>
 800743c:	3c01      	subs	r4, #1
 800743e:	e7eb      	b.n	8007418 <quorem+0xe6>
 8007440:	2000      	movs	r0, #0
 8007442:	e7ee      	b.n	8007422 <quorem+0xf0>
 8007444:	0000      	movs	r0, r0
	...

08007448 <_dtoa_r>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	4616      	mov	r6, r2
 800744e:	461f      	mov	r7, r3
 8007450:	69c4      	ldr	r4, [r0, #28]
 8007452:	b099      	sub	sp, #100	; 0x64
 8007454:	4605      	mov	r5, r0
 8007456:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800745a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800745e:	b974      	cbnz	r4, 800747e <_dtoa_r+0x36>
 8007460:	2010      	movs	r0, #16
 8007462:	f000 fe1d 	bl	80080a0 <malloc>
 8007466:	4602      	mov	r2, r0
 8007468:	61e8      	str	r0, [r5, #28]
 800746a:	b920      	cbnz	r0, 8007476 <_dtoa_r+0x2e>
 800746c:	21ef      	movs	r1, #239	; 0xef
 800746e:	4bac      	ldr	r3, [pc, #688]	; (8007720 <_dtoa_r+0x2d8>)
 8007470:	48ac      	ldr	r0, [pc, #688]	; (8007724 <_dtoa_r+0x2dc>)
 8007472:	f001 fc7b 	bl	8008d6c <__assert_func>
 8007476:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800747a:	6004      	str	r4, [r0, #0]
 800747c:	60c4      	str	r4, [r0, #12]
 800747e:	69eb      	ldr	r3, [r5, #28]
 8007480:	6819      	ldr	r1, [r3, #0]
 8007482:	b151      	cbz	r1, 800749a <_dtoa_r+0x52>
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	2301      	movs	r3, #1
 8007488:	4093      	lsls	r3, r2
 800748a:	604a      	str	r2, [r1, #4]
 800748c:	608b      	str	r3, [r1, #8]
 800748e:	4628      	mov	r0, r5
 8007490:	f000 fefa 	bl	8008288 <_Bfree>
 8007494:	2200      	movs	r2, #0
 8007496:	69eb      	ldr	r3, [r5, #28]
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	1e3b      	subs	r3, r7, #0
 800749c:	bfaf      	iteee	ge
 800749e:	2300      	movge	r3, #0
 80074a0:	2201      	movlt	r2, #1
 80074a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074a6:	9305      	strlt	r3, [sp, #20]
 80074a8:	bfa8      	it	ge
 80074aa:	f8c8 3000 	strge.w	r3, [r8]
 80074ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80074b2:	4b9d      	ldr	r3, [pc, #628]	; (8007728 <_dtoa_r+0x2e0>)
 80074b4:	bfb8      	it	lt
 80074b6:	f8c8 2000 	strlt.w	r2, [r8]
 80074ba:	ea33 0309 	bics.w	r3, r3, r9
 80074be:	d119      	bne.n	80074f4 <_dtoa_r+0xac>
 80074c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80074c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074cc:	4333      	orrs	r3, r6
 80074ce:	f000 8589 	beq.w	8007fe4 <_dtoa_r+0xb9c>
 80074d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074d4:	b953      	cbnz	r3, 80074ec <_dtoa_r+0xa4>
 80074d6:	4b95      	ldr	r3, [pc, #596]	; (800772c <_dtoa_r+0x2e4>)
 80074d8:	e023      	b.n	8007522 <_dtoa_r+0xda>
 80074da:	4b95      	ldr	r3, [pc, #596]	; (8007730 <_dtoa_r+0x2e8>)
 80074dc:	9303      	str	r3, [sp, #12]
 80074de:	3308      	adds	r3, #8
 80074e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	9803      	ldr	r0, [sp, #12]
 80074e6:	b019      	add	sp, #100	; 0x64
 80074e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ec:	4b8f      	ldr	r3, [pc, #572]	; (800772c <_dtoa_r+0x2e4>)
 80074ee:	9303      	str	r3, [sp, #12]
 80074f0:	3303      	adds	r3, #3
 80074f2:	e7f5      	b.n	80074e0 <_dtoa_r+0x98>
 80074f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80074f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80074fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007500:	2200      	movs	r2, #0
 8007502:	2300      	movs	r3, #0
 8007504:	f7f9 fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8007508:	4680      	mov	r8, r0
 800750a:	b160      	cbz	r0, 8007526 <_dtoa_r+0xde>
 800750c:	2301      	movs	r3, #1
 800750e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8562 	beq.w	8007fde <_dtoa_r+0xb96>
 800751a:	4b86      	ldr	r3, [pc, #536]	; (8007734 <_dtoa_r+0x2ec>)
 800751c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	3b01      	subs	r3, #1
 8007522:	9303      	str	r3, [sp, #12]
 8007524:	e7de      	b.n	80074e4 <_dtoa_r+0x9c>
 8007526:	ab16      	add	r3, sp, #88	; 0x58
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	ab17      	add	r3, sp, #92	; 0x5c
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	4628      	mov	r0, r5
 8007530:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007534:	f001 f98a 	bl	800884c <__d2b>
 8007538:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800753c:	4682      	mov	sl, r0
 800753e:	2c00      	cmp	r4, #0
 8007540:	d07e      	beq.n	8007640 <_dtoa_r+0x1f8>
 8007542:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007548:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800754c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007550:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007554:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007558:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800755c:	4619      	mov	r1, r3
 800755e:	2200      	movs	r2, #0
 8007560:	4b75      	ldr	r3, [pc, #468]	; (8007738 <_dtoa_r+0x2f0>)
 8007562:	f7f8 fe01 	bl	8000168 <__aeabi_dsub>
 8007566:	a368      	add	r3, pc, #416	; (adr r3, 8007708 <_dtoa_r+0x2c0>)
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	f7f8 ffb4 	bl	80004d8 <__aeabi_dmul>
 8007570:	a367      	add	r3, pc, #412	; (adr r3, 8007710 <_dtoa_r+0x2c8>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f7f8 fdf9 	bl	800016c <__adddf3>
 800757a:	4606      	mov	r6, r0
 800757c:	4620      	mov	r0, r4
 800757e:	460f      	mov	r7, r1
 8007580:	f7f8 ff40 	bl	8000404 <__aeabi_i2d>
 8007584:	a364      	add	r3, pc, #400	; (adr r3, 8007718 <_dtoa_r+0x2d0>)
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	f7f8 ffa5 	bl	80004d8 <__aeabi_dmul>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4630      	mov	r0, r6
 8007594:	4639      	mov	r1, r7
 8007596:	f7f8 fde9 	bl	800016c <__adddf3>
 800759a:	4606      	mov	r6, r0
 800759c:	460f      	mov	r7, r1
 800759e:	f7f9 fa4b 	bl	8000a38 <__aeabi_d2iz>
 80075a2:	2200      	movs	r2, #0
 80075a4:	4683      	mov	fp, r0
 80075a6:	2300      	movs	r3, #0
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	f7f9 fa06 	bl	80009bc <__aeabi_dcmplt>
 80075b0:	b148      	cbz	r0, 80075c6 <_dtoa_r+0x17e>
 80075b2:	4658      	mov	r0, fp
 80075b4:	f7f8 ff26 	bl	8000404 <__aeabi_i2d>
 80075b8:	4632      	mov	r2, r6
 80075ba:	463b      	mov	r3, r7
 80075bc:	f7f9 f9f4 	bl	80009a8 <__aeabi_dcmpeq>
 80075c0:	b908      	cbnz	r0, 80075c6 <_dtoa_r+0x17e>
 80075c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075c6:	f1bb 0f16 	cmp.w	fp, #22
 80075ca:	d857      	bhi.n	800767c <_dtoa_r+0x234>
 80075cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075d0:	4b5a      	ldr	r3, [pc, #360]	; (800773c <_dtoa_r+0x2f4>)
 80075d2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f7f9 f9ef 	bl	80009bc <__aeabi_dcmplt>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d04e      	beq.n	8007680 <_dtoa_r+0x238>
 80075e2:	2300      	movs	r3, #0
 80075e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80075ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075ec:	1b1b      	subs	r3, r3, r4
 80075ee:	1e5a      	subs	r2, r3, #1
 80075f0:	bf46      	itte	mi
 80075f2:	f1c3 0901 	rsbmi	r9, r3, #1
 80075f6:	2300      	movmi	r3, #0
 80075f8:	f04f 0900 	movpl.w	r9, #0
 80075fc:	9209      	str	r2, [sp, #36]	; 0x24
 80075fe:	bf48      	it	mi
 8007600:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007602:	f1bb 0f00 	cmp.w	fp, #0
 8007606:	db3d      	blt.n	8007684 <_dtoa_r+0x23c>
 8007608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800760e:	445b      	add	r3, fp
 8007610:	9309      	str	r3, [sp, #36]	; 0x24
 8007612:	2300      	movs	r3, #0
 8007614:	930a      	str	r3, [sp, #40]	; 0x28
 8007616:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007618:	2b09      	cmp	r3, #9
 800761a:	d867      	bhi.n	80076ec <_dtoa_r+0x2a4>
 800761c:	2b05      	cmp	r3, #5
 800761e:	bfc4      	itt	gt
 8007620:	3b04      	subgt	r3, #4
 8007622:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007624:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007626:	bfc8      	it	gt
 8007628:	2400      	movgt	r4, #0
 800762a:	f1a3 0302 	sub.w	r3, r3, #2
 800762e:	bfd8      	it	le
 8007630:	2401      	movle	r4, #1
 8007632:	2b03      	cmp	r3, #3
 8007634:	f200 8086 	bhi.w	8007744 <_dtoa_r+0x2fc>
 8007638:	e8df f003 	tbb	[pc, r3]
 800763c:	5637392c 	.word	0x5637392c
 8007640:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007644:	441c      	add	r4, r3
 8007646:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800764a:	2b20      	cmp	r3, #32
 800764c:	bfc1      	itttt	gt
 800764e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007652:	fa09 f903 	lslgt.w	r9, r9, r3
 8007656:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800765a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800765e:	bfd6      	itet	le
 8007660:	f1c3 0320 	rsble	r3, r3, #32
 8007664:	ea49 0003 	orrgt.w	r0, r9, r3
 8007668:	fa06 f003 	lslle.w	r0, r6, r3
 800766c:	f7f8 feba 	bl	80003e4 <__aeabi_ui2d>
 8007670:	2201      	movs	r2, #1
 8007672:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007676:	3c01      	subs	r4, #1
 8007678:	9213      	str	r2, [sp, #76]	; 0x4c
 800767a:	e76f      	b.n	800755c <_dtoa_r+0x114>
 800767c:	2301      	movs	r3, #1
 800767e:	e7b3      	b.n	80075e8 <_dtoa_r+0x1a0>
 8007680:	900f      	str	r0, [sp, #60]	; 0x3c
 8007682:	e7b2      	b.n	80075ea <_dtoa_r+0x1a2>
 8007684:	f1cb 0300 	rsb	r3, fp, #0
 8007688:	930a      	str	r3, [sp, #40]	; 0x28
 800768a:	2300      	movs	r3, #0
 800768c:	eba9 090b 	sub.w	r9, r9, fp
 8007690:	930e      	str	r3, [sp, #56]	; 0x38
 8007692:	e7c0      	b.n	8007616 <_dtoa_r+0x1ce>
 8007694:	2300      	movs	r3, #0
 8007696:	930b      	str	r3, [sp, #44]	; 0x2c
 8007698:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800769a:	2b00      	cmp	r3, #0
 800769c:	dc55      	bgt.n	800774a <_dtoa_r+0x302>
 800769e:	2301      	movs	r3, #1
 80076a0:	461a      	mov	r2, r3
 80076a2:	9306      	str	r3, [sp, #24]
 80076a4:	9308      	str	r3, [sp, #32]
 80076a6:	9223      	str	r2, [sp, #140]	; 0x8c
 80076a8:	e00b      	b.n	80076c2 <_dtoa_r+0x27a>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e7f3      	b.n	8007696 <_dtoa_r+0x24e>
 80076ae:	2300      	movs	r3, #0
 80076b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076b4:	445b      	add	r3, fp
 80076b6:	9306      	str	r3, [sp, #24]
 80076b8:	3301      	adds	r3, #1
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	9308      	str	r3, [sp, #32]
 80076be:	bfb8      	it	lt
 80076c0:	2301      	movlt	r3, #1
 80076c2:	2100      	movs	r1, #0
 80076c4:	2204      	movs	r2, #4
 80076c6:	69e8      	ldr	r0, [r5, #28]
 80076c8:	f102 0614 	add.w	r6, r2, #20
 80076cc:	429e      	cmp	r6, r3
 80076ce:	d940      	bls.n	8007752 <_dtoa_r+0x30a>
 80076d0:	6041      	str	r1, [r0, #4]
 80076d2:	4628      	mov	r0, r5
 80076d4:	f000 fd98 	bl	8008208 <_Balloc>
 80076d8:	9003      	str	r0, [sp, #12]
 80076da:	2800      	cmp	r0, #0
 80076dc:	d13c      	bne.n	8007758 <_dtoa_r+0x310>
 80076de:	4602      	mov	r2, r0
 80076e0:	f240 11af 	movw	r1, #431	; 0x1af
 80076e4:	4b16      	ldr	r3, [pc, #88]	; (8007740 <_dtoa_r+0x2f8>)
 80076e6:	e6c3      	b.n	8007470 <_dtoa_r+0x28>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e7e1      	b.n	80076b0 <_dtoa_r+0x268>
 80076ec:	2401      	movs	r4, #1
 80076ee:	2300      	movs	r3, #0
 80076f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80076f2:	9322      	str	r3, [sp, #136]	; 0x88
 80076f4:	f04f 33ff 	mov.w	r3, #4294967295
 80076f8:	2200      	movs	r2, #0
 80076fa:	9306      	str	r3, [sp, #24]
 80076fc:	9308      	str	r3, [sp, #32]
 80076fe:	2312      	movs	r3, #18
 8007700:	e7d1      	b.n	80076a6 <_dtoa_r+0x25e>
 8007702:	bf00      	nop
 8007704:	f3af 8000 	nop.w
 8007708:	636f4361 	.word	0x636f4361
 800770c:	3fd287a7 	.word	0x3fd287a7
 8007710:	8b60c8b3 	.word	0x8b60c8b3
 8007714:	3fc68a28 	.word	0x3fc68a28
 8007718:	509f79fb 	.word	0x509f79fb
 800771c:	3fd34413 	.word	0x3fd34413
 8007720:	0800948b 	.word	0x0800948b
 8007724:	080094a2 	.word	0x080094a2
 8007728:	7ff00000 	.word	0x7ff00000
 800772c:	08009487 	.word	0x08009487
 8007730:	0800947e 	.word	0x0800947e
 8007734:	0800945b 	.word	0x0800945b
 8007738:	3ff80000 	.word	0x3ff80000
 800773c:	08009590 	.word	0x08009590
 8007740:	080094fa 	.word	0x080094fa
 8007744:	2301      	movs	r3, #1
 8007746:	930b      	str	r3, [sp, #44]	; 0x2c
 8007748:	e7d4      	b.n	80076f4 <_dtoa_r+0x2ac>
 800774a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800774c:	9306      	str	r3, [sp, #24]
 800774e:	9308      	str	r3, [sp, #32]
 8007750:	e7b7      	b.n	80076c2 <_dtoa_r+0x27a>
 8007752:	3101      	adds	r1, #1
 8007754:	0052      	lsls	r2, r2, #1
 8007756:	e7b7      	b.n	80076c8 <_dtoa_r+0x280>
 8007758:	69eb      	ldr	r3, [r5, #28]
 800775a:	9a03      	ldr	r2, [sp, #12]
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	9b08      	ldr	r3, [sp, #32]
 8007760:	2b0e      	cmp	r3, #14
 8007762:	f200 80a8 	bhi.w	80078b6 <_dtoa_r+0x46e>
 8007766:	2c00      	cmp	r4, #0
 8007768:	f000 80a5 	beq.w	80078b6 <_dtoa_r+0x46e>
 800776c:	f1bb 0f00 	cmp.w	fp, #0
 8007770:	dd34      	ble.n	80077dc <_dtoa_r+0x394>
 8007772:	4b9a      	ldr	r3, [pc, #616]	; (80079dc <_dtoa_r+0x594>)
 8007774:	f00b 020f 	and.w	r2, fp, #15
 8007778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800777c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007780:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007784:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007788:	ea4f 142b 	mov.w	r4, fp, asr #4
 800778c:	d016      	beq.n	80077bc <_dtoa_r+0x374>
 800778e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007792:	4b93      	ldr	r3, [pc, #588]	; (80079e0 <_dtoa_r+0x598>)
 8007794:	2703      	movs	r7, #3
 8007796:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800779a:	f7f8 ffc7 	bl	800072c <__aeabi_ddiv>
 800779e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077a2:	f004 040f 	and.w	r4, r4, #15
 80077a6:	4e8e      	ldr	r6, [pc, #568]	; (80079e0 <_dtoa_r+0x598>)
 80077a8:	b954      	cbnz	r4, 80077c0 <_dtoa_r+0x378>
 80077aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077b2:	f7f8 ffbb 	bl	800072c <__aeabi_ddiv>
 80077b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077ba:	e029      	b.n	8007810 <_dtoa_r+0x3c8>
 80077bc:	2702      	movs	r7, #2
 80077be:	e7f2      	b.n	80077a6 <_dtoa_r+0x35e>
 80077c0:	07e1      	lsls	r1, r4, #31
 80077c2:	d508      	bpl.n	80077d6 <_dtoa_r+0x38e>
 80077c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077cc:	f7f8 fe84 	bl	80004d8 <__aeabi_dmul>
 80077d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077d4:	3701      	adds	r7, #1
 80077d6:	1064      	asrs	r4, r4, #1
 80077d8:	3608      	adds	r6, #8
 80077da:	e7e5      	b.n	80077a8 <_dtoa_r+0x360>
 80077dc:	f000 80a5 	beq.w	800792a <_dtoa_r+0x4e2>
 80077e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077e4:	f1cb 0400 	rsb	r4, fp, #0
 80077e8:	4b7c      	ldr	r3, [pc, #496]	; (80079dc <_dtoa_r+0x594>)
 80077ea:	f004 020f 	and.w	r2, r4, #15
 80077ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 fe6f 	bl	80004d8 <__aeabi_dmul>
 80077fa:	2702      	movs	r7, #2
 80077fc:	2300      	movs	r3, #0
 80077fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007802:	4e77      	ldr	r6, [pc, #476]	; (80079e0 <_dtoa_r+0x598>)
 8007804:	1124      	asrs	r4, r4, #4
 8007806:	2c00      	cmp	r4, #0
 8007808:	f040 8084 	bne.w	8007914 <_dtoa_r+0x4cc>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1d2      	bne.n	80077b6 <_dtoa_r+0x36e>
 8007810:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007814:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 8087 	beq.w	800792e <_dtoa_r+0x4e6>
 8007820:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007824:	2200      	movs	r2, #0
 8007826:	4b6f      	ldr	r3, [pc, #444]	; (80079e4 <_dtoa_r+0x59c>)
 8007828:	f7f9 f8c8 	bl	80009bc <__aeabi_dcmplt>
 800782c:	2800      	cmp	r0, #0
 800782e:	d07e      	beq.n	800792e <_dtoa_r+0x4e6>
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d07b      	beq.n	800792e <_dtoa_r+0x4e6>
 8007836:	9b06      	ldr	r3, [sp, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	dd38      	ble.n	80078ae <_dtoa_r+0x466>
 800783c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007840:	2200      	movs	r2, #0
 8007842:	4b69      	ldr	r3, [pc, #420]	; (80079e8 <_dtoa_r+0x5a0>)
 8007844:	f7f8 fe48 	bl	80004d8 <__aeabi_dmul>
 8007848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800784c:	9c06      	ldr	r4, [sp, #24]
 800784e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007852:	3701      	adds	r7, #1
 8007854:	4638      	mov	r0, r7
 8007856:	f7f8 fdd5 	bl	8000404 <__aeabi_i2d>
 800785a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800785e:	f7f8 fe3b 	bl	80004d8 <__aeabi_dmul>
 8007862:	2200      	movs	r2, #0
 8007864:	4b61      	ldr	r3, [pc, #388]	; (80079ec <_dtoa_r+0x5a4>)
 8007866:	f7f8 fc81 	bl	800016c <__adddf3>
 800786a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800786e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007872:	9611      	str	r6, [sp, #68]	; 0x44
 8007874:	2c00      	cmp	r4, #0
 8007876:	d15d      	bne.n	8007934 <_dtoa_r+0x4ec>
 8007878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800787c:	2200      	movs	r2, #0
 800787e:	4b5c      	ldr	r3, [pc, #368]	; (80079f0 <_dtoa_r+0x5a8>)
 8007880:	f7f8 fc72 	bl	8000168 <__aeabi_dsub>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800788c:	4633      	mov	r3, r6
 800788e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007890:	f7f9 f8b2 	bl	80009f8 <__aeabi_dcmpgt>
 8007894:	2800      	cmp	r0, #0
 8007896:	f040 8295 	bne.w	8007dc4 <_dtoa_r+0x97c>
 800789a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800789e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80078a4:	f7f9 f88a 	bl	80009bc <__aeabi_dcmplt>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f040 8289 	bne.w	8007dc0 <_dtoa_r+0x978>
 80078ae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80078b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80078b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f2c0 8151 	blt.w	8007b60 <_dtoa_r+0x718>
 80078be:	f1bb 0f0e 	cmp.w	fp, #14
 80078c2:	f300 814d 	bgt.w	8007b60 <_dtoa_r+0x718>
 80078c6:	4b45      	ldr	r3, [pc, #276]	; (80079dc <_dtoa_r+0x594>)
 80078c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80078d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f280 80da 	bge.w	8007a90 <_dtoa_r+0x648>
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f300 80d6 	bgt.w	8007a90 <_dtoa_r+0x648>
 80078e4:	f040 826b 	bne.w	8007dbe <_dtoa_r+0x976>
 80078e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ec:	2200      	movs	r2, #0
 80078ee:	4b40      	ldr	r3, [pc, #256]	; (80079f0 <_dtoa_r+0x5a8>)
 80078f0:	f7f8 fdf2 	bl	80004d8 <__aeabi_dmul>
 80078f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078f8:	f7f9 f874 	bl	80009e4 <__aeabi_dcmpge>
 80078fc:	9c08      	ldr	r4, [sp, #32]
 80078fe:	4626      	mov	r6, r4
 8007900:	2800      	cmp	r0, #0
 8007902:	f040 8241 	bne.w	8007d88 <_dtoa_r+0x940>
 8007906:	2331      	movs	r3, #49	; 0x31
 8007908:	9f03      	ldr	r7, [sp, #12]
 800790a:	f10b 0b01 	add.w	fp, fp, #1
 800790e:	f807 3b01 	strb.w	r3, [r7], #1
 8007912:	e23d      	b.n	8007d90 <_dtoa_r+0x948>
 8007914:	07e2      	lsls	r2, r4, #31
 8007916:	d505      	bpl.n	8007924 <_dtoa_r+0x4dc>
 8007918:	e9d6 2300 	ldrd	r2, r3, [r6]
 800791c:	f7f8 fddc 	bl	80004d8 <__aeabi_dmul>
 8007920:	2301      	movs	r3, #1
 8007922:	3701      	adds	r7, #1
 8007924:	1064      	asrs	r4, r4, #1
 8007926:	3608      	adds	r6, #8
 8007928:	e76d      	b.n	8007806 <_dtoa_r+0x3be>
 800792a:	2702      	movs	r7, #2
 800792c:	e770      	b.n	8007810 <_dtoa_r+0x3c8>
 800792e:	46d8      	mov	r8, fp
 8007930:	9c08      	ldr	r4, [sp, #32]
 8007932:	e78f      	b.n	8007854 <_dtoa_r+0x40c>
 8007934:	9903      	ldr	r1, [sp, #12]
 8007936:	4b29      	ldr	r3, [pc, #164]	; (80079dc <_dtoa_r+0x594>)
 8007938:	4421      	add	r1, r4
 800793a:	9112      	str	r1, [sp, #72]	; 0x48
 800793c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800793e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007942:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007946:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800794a:	2900      	cmp	r1, #0
 800794c:	d054      	beq.n	80079f8 <_dtoa_r+0x5b0>
 800794e:	2000      	movs	r0, #0
 8007950:	4928      	ldr	r1, [pc, #160]	; (80079f4 <_dtoa_r+0x5ac>)
 8007952:	f7f8 feeb 	bl	800072c <__aeabi_ddiv>
 8007956:	463b      	mov	r3, r7
 8007958:	4632      	mov	r2, r6
 800795a:	f7f8 fc05 	bl	8000168 <__aeabi_dsub>
 800795e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007962:	9f03      	ldr	r7, [sp, #12]
 8007964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007968:	f7f9 f866 	bl	8000a38 <__aeabi_d2iz>
 800796c:	4604      	mov	r4, r0
 800796e:	f7f8 fd49 	bl	8000404 <__aeabi_i2d>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800797a:	f7f8 fbf5 	bl	8000168 <__aeabi_dsub>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	3430      	adds	r4, #48	; 0x30
 8007984:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007988:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800798c:	f807 4b01 	strb.w	r4, [r7], #1
 8007990:	f7f9 f814 	bl	80009bc <__aeabi_dcmplt>
 8007994:	2800      	cmp	r0, #0
 8007996:	d173      	bne.n	8007a80 <_dtoa_r+0x638>
 8007998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800799c:	2000      	movs	r0, #0
 800799e:	4911      	ldr	r1, [pc, #68]	; (80079e4 <_dtoa_r+0x59c>)
 80079a0:	f7f8 fbe2 	bl	8000168 <__aeabi_dsub>
 80079a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079a8:	f7f9 f808 	bl	80009bc <__aeabi_dcmplt>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	f040 80b6 	bne.w	8007b1e <_dtoa_r+0x6d6>
 80079b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079b4:	429f      	cmp	r7, r3
 80079b6:	f43f af7a 	beq.w	80078ae <_dtoa_r+0x466>
 80079ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079be:	2200      	movs	r2, #0
 80079c0:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <_dtoa_r+0x5a0>)
 80079c2:	f7f8 fd89 	bl	80004d8 <__aeabi_dmul>
 80079c6:	2200      	movs	r2, #0
 80079c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <_dtoa_r+0x5a0>)
 80079d2:	f7f8 fd81 	bl	80004d8 <__aeabi_dmul>
 80079d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079da:	e7c3      	b.n	8007964 <_dtoa_r+0x51c>
 80079dc:	08009590 	.word	0x08009590
 80079e0:	08009568 	.word	0x08009568
 80079e4:	3ff00000 	.word	0x3ff00000
 80079e8:	40240000 	.word	0x40240000
 80079ec:	401c0000 	.word	0x401c0000
 80079f0:	40140000 	.word	0x40140000
 80079f4:	3fe00000 	.word	0x3fe00000
 80079f8:	4630      	mov	r0, r6
 80079fa:	4639      	mov	r1, r7
 80079fc:	f7f8 fd6c 	bl	80004d8 <__aeabi_dmul>
 8007a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a06:	9c03      	ldr	r4, [sp, #12]
 8007a08:	9314      	str	r3, [sp, #80]	; 0x50
 8007a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a0e:	f7f9 f813 	bl	8000a38 <__aeabi_d2iz>
 8007a12:	9015      	str	r0, [sp, #84]	; 0x54
 8007a14:	f7f8 fcf6 	bl	8000404 <__aeabi_i2d>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a20:	f7f8 fba2 	bl	8000168 <__aeabi_dsub>
 8007a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a26:	4606      	mov	r6, r0
 8007a28:	3330      	adds	r3, #48	; 0x30
 8007a2a:	f804 3b01 	strb.w	r3, [r4], #1
 8007a2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a30:	460f      	mov	r7, r1
 8007a32:	429c      	cmp	r4, r3
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	d124      	bne.n	8007a84 <_dtoa_r+0x63c>
 8007a3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a3e:	4baf      	ldr	r3, [pc, #700]	; (8007cfc <_dtoa_r+0x8b4>)
 8007a40:	f7f8 fb94 	bl	800016c <__adddf3>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4630      	mov	r0, r6
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	f7f8 ffd4 	bl	80009f8 <__aeabi_dcmpgt>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d163      	bne.n	8007b1c <_dtoa_r+0x6d4>
 8007a54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a58:	2000      	movs	r0, #0
 8007a5a:	49a8      	ldr	r1, [pc, #672]	; (8007cfc <_dtoa_r+0x8b4>)
 8007a5c:	f7f8 fb84 	bl	8000168 <__aeabi_dsub>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4630      	mov	r0, r6
 8007a66:	4639      	mov	r1, r7
 8007a68:	f7f8 ffa8 	bl	80009bc <__aeabi_dcmplt>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f43f af1e 	beq.w	80078ae <_dtoa_r+0x466>
 8007a72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007a74:	1e7b      	subs	r3, r7, #1
 8007a76:	9314      	str	r3, [sp, #80]	; 0x50
 8007a78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007a7c:	2b30      	cmp	r3, #48	; 0x30
 8007a7e:	d0f8      	beq.n	8007a72 <_dtoa_r+0x62a>
 8007a80:	46c3      	mov	fp, r8
 8007a82:	e03b      	b.n	8007afc <_dtoa_r+0x6b4>
 8007a84:	4b9e      	ldr	r3, [pc, #632]	; (8007d00 <_dtoa_r+0x8b8>)
 8007a86:	f7f8 fd27 	bl	80004d8 <__aeabi_dmul>
 8007a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a8e:	e7bc      	b.n	8007a0a <_dtoa_r+0x5c2>
 8007a90:	9f03      	ldr	r7, [sp, #12]
 8007a92:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007a96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	f7f8 fe45 	bl	800072c <__aeabi_ddiv>
 8007aa2:	f7f8 ffc9 	bl	8000a38 <__aeabi_d2iz>
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	f7f8 fcac 	bl	8000404 <__aeabi_i2d>
 8007aac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ab0:	f7f8 fd12 	bl	80004d8 <__aeabi_dmul>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4640      	mov	r0, r8
 8007aba:	4649      	mov	r1, r9
 8007abc:	f7f8 fb54 	bl	8000168 <__aeabi_dsub>
 8007ac0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007ac4:	f807 6b01 	strb.w	r6, [r7], #1
 8007ac8:	9e03      	ldr	r6, [sp, #12]
 8007aca:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007ace:	1bbe      	subs	r6, r7, r6
 8007ad0:	45b4      	cmp	ip, r6
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	d136      	bne.n	8007b46 <_dtoa_r+0x6fe>
 8007ad8:	f7f8 fb48 	bl	800016c <__adddf3>
 8007adc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ae0:	4680      	mov	r8, r0
 8007ae2:	4689      	mov	r9, r1
 8007ae4:	f7f8 ff88 	bl	80009f8 <__aeabi_dcmpgt>
 8007ae8:	bb58      	cbnz	r0, 8007b42 <_dtoa_r+0x6fa>
 8007aea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007aee:	4640      	mov	r0, r8
 8007af0:	4649      	mov	r1, r9
 8007af2:	f7f8 ff59 	bl	80009a8 <__aeabi_dcmpeq>
 8007af6:	b108      	cbz	r0, 8007afc <_dtoa_r+0x6b4>
 8007af8:	07e3      	lsls	r3, r4, #31
 8007afa:	d422      	bmi.n	8007b42 <_dtoa_r+0x6fa>
 8007afc:	4651      	mov	r1, sl
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 fbc2 	bl	8008288 <_Bfree>
 8007b04:	2300      	movs	r3, #0
 8007b06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b08:	703b      	strb	r3, [r7, #0]
 8007b0a:	f10b 0301 	add.w	r3, fp, #1
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f43f ace6 	beq.w	80074e4 <_dtoa_r+0x9c>
 8007b18:	601f      	str	r7, [r3, #0]
 8007b1a:	e4e3      	b.n	80074e4 <_dtoa_r+0x9c>
 8007b1c:	4627      	mov	r7, r4
 8007b1e:	463b      	mov	r3, r7
 8007b20:	461f      	mov	r7, r3
 8007b22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b26:	2a39      	cmp	r2, #57	; 0x39
 8007b28:	d107      	bne.n	8007b3a <_dtoa_r+0x6f2>
 8007b2a:	9a03      	ldr	r2, [sp, #12]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d1f7      	bne.n	8007b20 <_dtoa_r+0x6d8>
 8007b30:	2230      	movs	r2, #48	; 0x30
 8007b32:	9903      	ldr	r1, [sp, #12]
 8007b34:	f108 0801 	add.w	r8, r8, #1
 8007b38:	700a      	strb	r2, [r1, #0]
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	3201      	adds	r2, #1
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	e79e      	b.n	8007a80 <_dtoa_r+0x638>
 8007b42:	46d8      	mov	r8, fp
 8007b44:	e7eb      	b.n	8007b1e <_dtoa_r+0x6d6>
 8007b46:	2200      	movs	r2, #0
 8007b48:	4b6d      	ldr	r3, [pc, #436]	; (8007d00 <_dtoa_r+0x8b8>)
 8007b4a:	f7f8 fcc5 	bl	80004d8 <__aeabi_dmul>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2300      	movs	r3, #0
 8007b52:	4680      	mov	r8, r0
 8007b54:	4689      	mov	r9, r1
 8007b56:	f7f8 ff27 	bl	80009a8 <__aeabi_dcmpeq>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d09b      	beq.n	8007a96 <_dtoa_r+0x64e>
 8007b5e:	e7cd      	b.n	8007afc <_dtoa_r+0x6b4>
 8007b60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	f000 80c4 	beq.w	8007cf0 <_dtoa_r+0x8a8>
 8007b68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b6a:	2a01      	cmp	r2, #1
 8007b6c:	f300 80a8 	bgt.w	8007cc0 <_dtoa_r+0x878>
 8007b70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	f000 80a0 	beq.w	8007cb8 <_dtoa_r+0x870>
 8007b78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b7c:	464f      	mov	r7, r9
 8007b7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b82:	2101      	movs	r1, #1
 8007b84:	441a      	add	r2, r3
 8007b86:	4628      	mov	r0, r5
 8007b88:	4499      	add	r9, r3
 8007b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b8c:	f000 fc32 	bl	80083f4 <__i2b>
 8007b90:	4606      	mov	r6, r0
 8007b92:	b15f      	cbz	r7, 8007bac <_dtoa_r+0x764>
 8007b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	dd08      	ble.n	8007bac <_dtoa_r+0x764>
 8007b9a:	42bb      	cmp	r3, r7
 8007b9c:	bfa8      	it	ge
 8007b9e:	463b      	movge	r3, r7
 8007ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ba2:	eba9 0903 	sub.w	r9, r9, r3
 8007ba6:	1aff      	subs	r7, r7, r3
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bae:	b1f3      	cbz	r3, 8007bee <_dtoa_r+0x7a6>
 8007bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80a0 	beq.w	8007cf8 <_dtoa_r+0x8b0>
 8007bb8:	2c00      	cmp	r4, #0
 8007bba:	dd10      	ble.n	8007bde <_dtoa_r+0x796>
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4622      	mov	r2, r4
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 fcd5 	bl	8008570 <__pow5mult>
 8007bc6:	4652      	mov	r2, sl
 8007bc8:	4601      	mov	r1, r0
 8007bca:	4606      	mov	r6, r0
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f000 fc27 	bl	8008420 <__multiply>
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	4651      	mov	r1, sl
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 fb56 	bl	8008288 <_Bfree>
 8007bdc:	46c2      	mov	sl, r8
 8007bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be0:	1b1a      	subs	r2, r3, r4
 8007be2:	d004      	beq.n	8007bee <_dtoa_r+0x7a6>
 8007be4:	4651      	mov	r1, sl
 8007be6:	4628      	mov	r0, r5
 8007be8:	f000 fcc2 	bl	8008570 <__pow5mult>
 8007bec:	4682      	mov	sl, r0
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f000 fbff 	bl	80083f4 <__i2b>
 8007bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f340 8082 	ble.w	8007d04 <_dtoa_r+0x8bc>
 8007c00:	461a      	mov	r2, r3
 8007c02:	4601      	mov	r1, r0
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 fcb3 	bl	8008570 <__pow5mult>
 8007c0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	dd7b      	ble.n	8007d0a <_dtoa_r+0x8c2>
 8007c12:	f04f 0800 	mov.w	r8, #0
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c1c:	6918      	ldr	r0, [r3, #16]
 8007c1e:	f000 fb9b 	bl	8008358 <__hi0bits>
 8007c22:	f1c0 0020 	rsb	r0, r0, #32
 8007c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c28:	4418      	add	r0, r3
 8007c2a:	f010 001f 	ands.w	r0, r0, #31
 8007c2e:	f000 8092 	beq.w	8007d56 <_dtoa_r+0x90e>
 8007c32:	f1c0 0320 	rsb	r3, r0, #32
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	f340 8085 	ble.w	8007d46 <_dtoa_r+0x8fe>
 8007c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3e:	f1c0 001c 	rsb	r0, r0, #28
 8007c42:	4403      	add	r3, r0
 8007c44:	4481      	add	r9, r0
 8007c46:	4407      	add	r7, r0
 8007c48:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4a:	f1b9 0f00 	cmp.w	r9, #0
 8007c4e:	dd05      	ble.n	8007c5c <_dtoa_r+0x814>
 8007c50:	4651      	mov	r1, sl
 8007c52:	464a      	mov	r2, r9
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 fce5 	bl	8008624 <__lshift>
 8007c5a:	4682      	mov	sl, r0
 8007c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	dd05      	ble.n	8007c6e <_dtoa_r+0x826>
 8007c62:	4621      	mov	r1, r4
 8007c64:	461a      	mov	r2, r3
 8007c66:	4628      	mov	r0, r5
 8007c68:	f000 fcdc 	bl	8008624 <__lshift>
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d072      	beq.n	8007d5a <_dtoa_r+0x912>
 8007c74:	4621      	mov	r1, r4
 8007c76:	4650      	mov	r0, sl
 8007c78:	f000 fd40 	bl	80086fc <__mcmp>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	da6c      	bge.n	8007d5a <_dtoa_r+0x912>
 8007c80:	2300      	movs	r3, #0
 8007c82:	4651      	mov	r1, sl
 8007c84:	220a      	movs	r2, #10
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 fb20 	bl	80082cc <__multadd>
 8007c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c8e:	4682      	mov	sl, r0
 8007c90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 81ac 	beq.w	8007ff2 <_dtoa_r+0xbaa>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	220a      	movs	r2, #10
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 fb13 	bl	80082cc <__multadd>
 8007ca6:	9b06      	ldr	r3, [sp, #24]
 8007ca8:	4606      	mov	r6, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f300 8093 	bgt.w	8007dd6 <_dtoa_r+0x98e>
 8007cb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	dc59      	bgt.n	8007d6a <_dtoa_r+0x922>
 8007cb6:	e08e      	b.n	8007dd6 <_dtoa_r+0x98e>
 8007cb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007cba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cbe:	e75d      	b.n	8007b7c <_dtoa_r+0x734>
 8007cc0:	9b08      	ldr	r3, [sp, #32]
 8007cc2:	1e5c      	subs	r4, r3, #1
 8007cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc6:	42a3      	cmp	r3, r4
 8007cc8:	bfbf      	itttt	lt
 8007cca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ccc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007cce:	1ae3      	sublt	r3, r4, r3
 8007cd0:	18d2      	addlt	r2, r2, r3
 8007cd2:	bfa8      	it	ge
 8007cd4:	1b1c      	subge	r4, r3, r4
 8007cd6:	9b08      	ldr	r3, [sp, #32]
 8007cd8:	bfbe      	ittt	lt
 8007cda:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007cdc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007cde:	2400      	movlt	r4, #0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	bfb5      	itete	lt
 8007ce4:	eba9 0703 	sublt.w	r7, r9, r3
 8007ce8:	464f      	movge	r7, r9
 8007cea:	2300      	movlt	r3, #0
 8007cec:	9b08      	ldrge	r3, [sp, #32]
 8007cee:	e747      	b.n	8007b80 <_dtoa_r+0x738>
 8007cf0:	464f      	mov	r7, r9
 8007cf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cf4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007cf6:	e74c      	b.n	8007b92 <_dtoa_r+0x74a>
 8007cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfa:	e773      	b.n	8007be4 <_dtoa_r+0x79c>
 8007cfc:	3fe00000 	.word	0x3fe00000
 8007d00:	40240000 	.word	0x40240000
 8007d04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	dc18      	bgt.n	8007d3c <_dtoa_r+0x8f4>
 8007d0a:	9b04      	ldr	r3, [sp, #16]
 8007d0c:	b9b3      	cbnz	r3, 8007d3c <_dtoa_r+0x8f4>
 8007d0e:	9b05      	ldr	r3, [sp, #20]
 8007d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d14:	b993      	cbnz	r3, 8007d3c <_dtoa_r+0x8f4>
 8007d16:	9b05      	ldr	r3, [sp, #20]
 8007d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d1c:	0d1b      	lsrs	r3, r3, #20
 8007d1e:	051b      	lsls	r3, r3, #20
 8007d20:	b17b      	cbz	r3, 8007d42 <_dtoa_r+0x8fa>
 8007d22:	f04f 0801 	mov.w	r8, #1
 8007d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d28:	f109 0901 	add.w	r9, r9, #1
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f47f af6f 	bne.w	8007c16 <_dtoa_r+0x7ce>
 8007d38:	2001      	movs	r0, #1
 8007d3a:	e774      	b.n	8007c26 <_dtoa_r+0x7de>
 8007d3c:	f04f 0800 	mov.w	r8, #0
 8007d40:	e7f6      	b.n	8007d30 <_dtoa_r+0x8e8>
 8007d42:	4698      	mov	r8, r3
 8007d44:	e7f4      	b.n	8007d30 <_dtoa_r+0x8e8>
 8007d46:	d080      	beq.n	8007c4a <_dtoa_r+0x802>
 8007d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d4a:	331c      	adds	r3, #28
 8007d4c:	441a      	add	r2, r3
 8007d4e:	4499      	add	r9, r3
 8007d50:	441f      	add	r7, r3
 8007d52:	9209      	str	r2, [sp, #36]	; 0x24
 8007d54:	e779      	b.n	8007c4a <_dtoa_r+0x802>
 8007d56:	4603      	mov	r3, r0
 8007d58:	e7f6      	b.n	8007d48 <_dtoa_r+0x900>
 8007d5a:	9b08      	ldr	r3, [sp, #32]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dc34      	bgt.n	8007dca <_dtoa_r+0x982>
 8007d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	dd31      	ble.n	8007dca <_dtoa_r+0x982>
 8007d66:	9b08      	ldr	r3, [sp, #32]
 8007d68:	9306      	str	r3, [sp, #24]
 8007d6a:	9b06      	ldr	r3, [sp, #24]
 8007d6c:	b963      	cbnz	r3, 8007d88 <_dtoa_r+0x940>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	2205      	movs	r2, #5
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 faaa 	bl	80082cc <__multadd>
 8007d78:	4601      	mov	r1, r0
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4650      	mov	r0, sl
 8007d7e:	f000 fcbd 	bl	80086fc <__mcmp>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	f73f adbf 	bgt.w	8007906 <_dtoa_r+0x4be>
 8007d88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d8a:	9f03      	ldr	r7, [sp, #12]
 8007d8c:	ea6f 0b03 	mvn.w	fp, r3
 8007d90:	f04f 0800 	mov.w	r8, #0
 8007d94:	4621      	mov	r1, r4
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 fa76 	bl	8008288 <_Bfree>
 8007d9c:	2e00      	cmp	r6, #0
 8007d9e:	f43f aead 	beq.w	8007afc <_dtoa_r+0x6b4>
 8007da2:	f1b8 0f00 	cmp.w	r8, #0
 8007da6:	d005      	beq.n	8007db4 <_dtoa_r+0x96c>
 8007da8:	45b0      	cmp	r8, r6
 8007daa:	d003      	beq.n	8007db4 <_dtoa_r+0x96c>
 8007dac:	4641      	mov	r1, r8
 8007dae:	4628      	mov	r0, r5
 8007db0:	f000 fa6a 	bl	8008288 <_Bfree>
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 fa66 	bl	8008288 <_Bfree>
 8007dbc:	e69e      	b.n	8007afc <_dtoa_r+0x6b4>
 8007dbe:	2400      	movs	r4, #0
 8007dc0:	4626      	mov	r6, r4
 8007dc2:	e7e1      	b.n	8007d88 <_dtoa_r+0x940>
 8007dc4:	46c3      	mov	fp, r8
 8007dc6:	4626      	mov	r6, r4
 8007dc8:	e59d      	b.n	8007906 <_dtoa_r+0x4be>
 8007dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 80c8 	beq.w	8007f62 <_dtoa_r+0xb1a>
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	9306      	str	r3, [sp, #24]
 8007dd6:	2f00      	cmp	r7, #0
 8007dd8:	dd05      	ble.n	8007de6 <_dtoa_r+0x99e>
 8007dda:	4631      	mov	r1, r6
 8007ddc:	463a      	mov	r2, r7
 8007dde:	4628      	mov	r0, r5
 8007de0:	f000 fc20 	bl	8008624 <__lshift>
 8007de4:	4606      	mov	r6, r0
 8007de6:	f1b8 0f00 	cmp.w	r8, #0
 8007dea:	d05b      	beq.n	8007ea4 <_dtoa_r+0xa5c>
 8007dec:	4628      	mov	r0, r5
 8007dee:	6871      	ldr	r1, [r6, #4]
 8007df0:	f000 fa0a 	bl	8008208 <_Balloc>
 8007df4:	4607      	mov	r7, r0
 8007df6:	b928      	cbnz	r0, 8007e04 <_dtoa_r+0x9bc>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007dfe:	4b81      	ldr	r3, [pc, #516]	; (8008004 <_dtoa_r+0xbbc>)
 8007e00:	f7ff bb36 	b.w	8007470 <_dtoa_r+0x28>
 8007e04:	6932      	ldr	r2, [r6, #16]
 8007e06:	f106 010c 	add.w	r1, r6, #12
 8007e0a:	3202      	adds	r2, #2
 8007e0c:	0092      	lsls	r2, r2, #2
 8007e0e:	300c      	adds	r0, #12
 8007e10:	f000 ff9e 	bl	8008d50 <memcpy>
 8007e14:	2201      	movs	r2, #1
 8007e16:	4639      	mov	r1, r7
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 fc03 	bl	8008624 <__lshift>
 8007e1e:	46b0      	mov	r8, r6
 8007e20:	4606      	mov	r6, r0
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	9a03      	ldr	r2, [sp, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	9308      	str	r3, [sp, #32]
 8007e2a:	9b06      	ldr	r3, [sp, #24]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e30:	9b04      	ldr	r3, [sp, #16]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	930a      	str	r3, [sp, #40]	; 0x28
 8007e38:	9b08      	ldr	r3, [sp, #32]
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	4650      	mov	r0, sl
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	f7ff fa76 	bl	8007332 <quorem>
 8007e46:	4641      	mov	r1, r8
 8007e48:	9006      	str	r0, [sp, #24]
 8007e4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e4e:	4650      	mov	r0, sl
 8007e50:	f000 fc54 	bl	80086fc <__mcmp>
 8007e54:	4632      	mov	r2, r6
 8007e56:	9009      	str	r0, [sp, #36]	; 0x24
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f000 fc6a 	bl	8008734 <__mdiff>
 8007e60:	68c2      	ldr	r2, [r0, #12]
 8007e62:	4607      	mov	r7, r0
 8007e64:	bb02      	cbnz	r2, 8007ea8 <_dtoa_r+0xa60>
 8007e66:	4601      	mov	r1, r0
 8007e68:	4650      	mov	r0, sl
 8007e6a:	f000 fc47 	bl	80086fc <__mcmp>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	4639      	mov	r1, r7
 8007e72:	4628      	mov	r0, r5
 8007e74:	920c      	str	r2, [sp, #48]	; 0x30
 8007e76:	f000 fa07 	bl	8008288 <_Bfree>
 8007e7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e7e:	9f08      	ldr	r7, [sp, #32]
 8007e80:	ea43 0102 	orr.w	r1, r3, r2
 8007e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e86:	4319      	orrs	r1, r3
 8007e88:	d110      	bne.n	8007eac <_dtoa_r+0xa64>
 8007e8a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e8e:	d029      	beq.n	8007ee4 <_dtoa_r+0xa9c>
 8007e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dd02      	ble.n	8007e9c <_dtoa_r+0xa54>
 8007e96:	9b06      	ldr	r3, [sp, #24]
 8007e98:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	f883 9000 	strb.w	r9, [r3]
 8007ea2:	e777      	b.n	8007d94 <_dtoa_r+0x94c>
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	e7ba      	b.n	8007e1e <_dtoa_r+0x9d6>
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	e7e1      	b.n	8007e70 <_dtoa_r+0xa28>
 8007eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	db04      	blt.n	8007ebc <_dtoa_r+0xa74>
 8007eb2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	d120      	bne.n	8007efe <_dtoa_r+0xab6>
 8007ebc:	2a00      	cmp	r2, #0
 8007ebe:	dded      	ble.n	8007e9c <_dtoa_r+0xa54>
 8007ec0:	4651      	mov	r1, sl
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f000 fbad 	bl	8008624 <__lshift>
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4682      	mov	sl, r0
 8007ece:	f000 fc15 	bl	80086fc <__mcmp>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	dc03      	bgt.n	8007ede <_dtoa_r+0xa96>
 8007ed6:	d1e1      	bne.n	8007e9c <_dtoa_r+0xa54>
 8007ed8:	f019 0f01 	tst.w	r9, #1
 8007edc:	d0de      	beq.n	8007e9c <_dtoa_r+0xa54>
 8007ede:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ee2:	d1d8      	bne.n	8007e96 <_dtoa_r+0xa4e>
 8007ee4:	2339      	movs	r3, #57	; 0x39
 8007ee6:	9a04      	ldr	r2, [sp, #16]
 8007ee8:	7013      	strb	r3, [r2, #0]
 8007eea:	463b      	mov	r3, r7
 8007eec:	461f      	mov	r7, r3
 8007eee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	2a39      	cmp	r2, #57	; 0x39
 8007ef6:	d06b      	beq.n	8007fd0 <_dtoa_r+0xb88>
 8007ef8:	3201      	adds	r2, #1
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	e74a      	b.n	8007d94 <_dtoa_r+0x94c>
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	dd07      	ble.n	8007f12 <_dtoa_r+0xaca>
 8007f02:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f06:	d0ed      	beq.n	8007ee4 <_dtoa_r+0xa9c>
 8007f08:	9a04      	ldr	r2, [sp, #16]
 8007f0a:	f109 0301 	add.w	r3, r9, #1
 8007f0e:	7013      	strb	r3, [r2, #0]
 8007f10:	e740      	b.n	8007d94 <_dtoa_r+0x94c>
 8007f12:	9b08      	ldr	r3, [sp, #32]
 8007f14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f16:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d042      	beq.n	8007fa4 <_dtoa_r+0xb5c>
 8007f1e:	4651      	mov	r1, sl
 8007f20:	2300      	movs	r3, #0
 8007f22:	220a      	movs	r2, #10
 8007f24:	4628      	mov	r0, r5
 8007f26:	f000 f9d1 	bl	80082cc <__multadd>
 8007f2a:	45b0      	cmp	r8, r6
 8007f2c:	4682      	mov	sl, r0
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	f04f 020a 	mov.w	r2, #10
 8007f36:	4641      	mov	r1, r8
 8007f38:	4628      	mov	r0, r5
 8007f3a:	d107      	bne.n	8007f4c <_dtoa_r+0xb04>
 8007f3c:	f000 f9c6 	bl	80082cc <__multadd>
 8007f40:	4680      	mov	r8, r0
 8007f42:	4606      	mov	r6, r0
 8007f44:	9b08      	ldr	r3, [sp, #32]
 8007f46:	3301      	adds	r3, #1
 8007f48:	9308      	str	r3, [sp, #32]
 8007f4a:	e775      	b.n	8007e38 <_dtoa_r+0x9f0>
 8007f4c:	f000 f9be 	bl	80082cc <__multadd>
 8007f50:	4631      	mov	r1, r6
 8007f52:	4680      	mov	r8, r0
 8007f54:	2300      	movs	r3, #0
 8007f56:	220a      	movs	r2, #10
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f000 f9b7 	bl	80082cc <__multadd>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	e7f0      	b.n	8007f44 <_dtoa_r+0xafc>
 8007f62:	9b08      	ldr	r3, [sp, #32]
 8007f64:	9306      	str	r3, [sp, #24]
 8007f66:	9f03      	ldr	r7, [sp, #12]
 8007f68:	4621      	mov	r1, r4
 8007f6a:	4650      	mov	r0, sl
 8007f6c:	f7ff f9e1 	bl	8007332 <quorem>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f76:	f807 9b01 	strb.w	r9, [r7], #1
 8007f7a:	1afa      	subs	r2, r7, r3
 8007f7c:	9b06      	ldr	r3, [sp, #24]
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	dd07      	ble.n	8007f92 <_dtoa_r+0xb4a>
 8007f82:	4651      	mov	r1, sl
 8007f84:	2300      	movs	r3, #0
 8007f86:	220a      	movs	r2, #10
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f000 f99f 	bl	80082cc <__multadd>
 8007f8e:	4682      	mov	sl, r0
 8007f90:	e7ea      	b.n	8007f68 <_dtoa_r+0xb20>
 8007f92:	9b06      	ldr	r3, [sp, #24]
 8007f94:	f04f 0800 	mov.w	r8, #0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	bfcc      	ite	gt
 8007f9c:	461f      	movgt	r7, r3
 8007f9e:	2701      	movle	r7, #1
 8007fa0:	9b03      	ldr	r3, [sp, #12]
 8007fa2:	441f      	add	r7, r3
 8007fa4:	4651      	mov	r1, sl
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f000 fb3b 	bl	8008624 <__lshift>
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4682      	mov	sl, r0
 8007fb2:	f000 fba3 	bl	80086fc <__mcmp>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	dc97      	bgt.n	8007eea <_dtoa_r+0xaa2>
 8007fba:	d102      	bne.n	8007fc2 <_dtoa_r+0xb7a>
 8007fbc:	f019 0f01 	tst.w	r9, #1
 8007fc0:	d193      	bne.n	8007eea <_dtoa_r+0xaa2>
 8007fc2:	463b      	mov	r3, r7
 8007fc4:	461f      	mov	r7, r3
 8007fc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fca:	2a30      	cmp	r2, #48	; 0x30
 8007fcc:	d0fa      	beq.n	8007fc4 <_dtoa_r+0xb7c>
 8007fce:	e6e1      	b.n	8007d94 <_dtoa_r+0x94c>
 8007fd0:	9a03      	ldr	r2, [sp, #12]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d18a      	bne.n	8007eec <_dtoa_r+0xaa4>
 8007fd6:	2331      	movs	r3, #49	; 0x31
 8007fd8:	f10b 0b01 	add.w	fp, fp, #1
 8007fdc:	e797      	b.n	8007f0e <_dtoa_r+0xac6>
 8007fde:	4b0a      	ldr	r3, [pc, #40]	; (8008008 <_dtoa_r+0xbc0>)
 8007fe0:	f7ff ba9f 	b.w	8007522 <_dtoa_r+0xda>
 8007fe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f47f aa77 	bne.w	80074da <_dtoa_r+0x92>
 8007fec:	4b07      	ldr	r3, [pc, #28]	; (800800c <_dtoa_r+0xbc4>)
 8007fee:	f7ff ba98 	b.w	8007522 <_dtoa_r+0xda>
 8007ff2:	9b06      	ldr	r3, [sp, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dcb6      	bgt.n	8007f66 <_dtoa_r+0xb1e>
 8007ff8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	f73f aeb5 	bgt.w	8007d6a <_dtoa_r+0x922>
 8008000:	e7b1      	b.n	8007f66 <_dtoa_r+0xb1e>
 8008002:	bf00      	nop
 8008004:	080094fa 	.word	0x080094fa
 8008008:	0800945a 	.word	0x0800945a
 800800c:	0800947e 	.word	0x0800947e

08008010 <_free_r>:
 8008010:	b538      	push	{r3, r4, r5, lr}
 8008012:	4605      	mov	r5, r0
 8008014:	2900      	cmp	r1, #0
 8008016:	d040      	beq.n	800809a <_free_r+0x8a>
 8008018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800801c:	1f0c      	subs	r4, r1, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	bfb8      	it	lt
 8008022:	18e4      	addlt	r4, r4, r3
 8008024:	f000 f8e4 	bl	80081f0 <__malloc_lock>
 8008028:	4a1c      	ldr	r2, [pc, #112]	; (800809c <_free_r+0x8c>)
 800802a:	6813      	ldr	r3, [r2, #0]
 800802c:	b933      	cbnz	r3, 800803c <_free_r+0x2c>
 800802e:	6063      	str	r3, [r4, #4]
 8008030:	6014      	str	r4, [r2, #0]
 8008032:	4628      	mov	r0, r5
 8008034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008038:	f000 b8e0 	b.w	80081fc <__malloc_unlock>
 800803c:	42a3      	cmp	r3, r4
 800803e:	d908      	bls.n	8008052 <_free_r+0x42>
 8008040:	6820      	ldr	r0, [r4, #0]
 8008042:	1821      	adds	r1, r4, r0
 8008044:	428b      	cmp	r3, r1
 8008046:	bf01      	itttt	eq
 8008048:	6819      	ldreq	r1, [r3, #0]
 800804a:	685b      	ldreq	r3, [r3, #4]
 800804c:	1809      	addeq	r1, r1, r0
 800804e:	6021      	streq	r1, [r4, #0]
 8008050:	e7ed      	b.n	800802e <_free_r+0x1e>
 8008052:	461a      	mov	r2, r3
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	b10b      	cbz	r3, 800805c <_free_r+0x4c>
 8008058:	42a3      	cmp	r3, r4
 800805a:	d9fa      	bls.n	8008052 <_free_r+0x42>
 800805c:	6811      	ldr	r1, [r2, #0]
 800805e:	1850      	adds	r0, r2, r1
 8008060:	42a0      	cmp	r0, r4
 8008062:	d10b      	bne.n	800807c <_free_r+0x6c>
 8008064:	6820      	ldr	r0, [r4, #0]
 8008066:	4401      	add	r1, r0
 8008068:	1850      	adds	r0, r2, r1
 800806a:	4283      	cmp	r3, r0
 800806c:	6011      	str	r1, [r2, #0]
 800806e:	d1e0      	bne.n	8008032 <_free_r+0x22>
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	4408      	add	r0, r1
 8008076:	6010      	str	r0, [r2, #0]
 8008078:	6053      	str	r3, [r2, #4]
 800807a:	e7da      	b.n	8008032 <_free_r+0x22>
 800807c:	d902      	bls.n	8008084 <_free_r+0x74>
 800807e:	230c      	movs	r3, #12
 8008080:	602b      	str	r3, [r5, #0]
 8008082:	e7d6      	b.n	8008032 <_free_r+0x22>
 8008084:	6820      	ldr	r0, [r4, #0]
 8008086:	1821      	adds	r1, r4, r0
 8008088:	428b      	cmp	r3, r1
 800808a:	bf01      	itttt	eq
 800808c:	6819      	ldreq	r1, [r3, #0]
 800808e:	685b      	ldreq	r3, [r3, #4]
 8008090:	1809      	addeq	r1, r1, r0
 8008092:	6021      	streq	r1, [r4, #0]
 8008094:	6063      	str	r3, [r4, #4]
 8008096:	6054      	str	r4, [r2, #4]
 8008098:	e7cb      	b.n	8008032 <_free_r+0x22>
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	200005f0 	.word	0x200005f0

080080a0 <malloc>:
 80080a0:	4b02      	ldr	r3, [pc, #8]	; (80080ac <malloc+0xc>)
 80080a2:	4601      	mov	r1, r0
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	f000 b823 	b.w	80080f0 <_malloc_r>
 80080aa:	bf00      	nop
 80080ac:	20000068 	.word	0x20000068

080080b0 <sbrk_aligned>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	4e0e      	ldr	r6, [pc, #56]	; (80080ec <sbrk_aligned+0x3c>)
 80080b4:	460c      	mov	r4, r1
 80080b6:	6831      	ldr	r1, [r6, #0]
 80080b8:	4605      	mov	r5, r0
 80080ba:	b911      	cbnz	r1, 80080c2 <sbrk_aligned+0x12>
 80080bc:	f000 fe38 	bl	8008d30 <_sbrk_r>
 80080c0:	6030      	str	r0, [r6, #0]
 80080c2:	4621      	mov	r1, r4
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 fe33 	bl	8008d30 <_sbrk_r>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	d00a      	beq.n	80080e4 <sbrk_aligned+0x34>
 80080ce:	1cc4      	adds	r4, r0, #3
 80080d0:	f024 0403 	bic.w	r4, r4, #3
 80080d4:	42a0      	cmp	r0, r4
 80080d6:	d007      	beq.n	80080e8 <sbrk_aligned+0x38>
 80080d8:	1a21      	subs	r1, r4, r0
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 fe28 	bl	8008d30 <_sbrk_r>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d101      	bne.n	80080e8 <sbrk_aligned+0x38>
 80080e4:	f04f 34ff 	mov.w	r4, #4294967295
 80080e8:	4620      	mov	r0, r4
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	200005f4 	.word	0x200005f4

080080f0 <_malloc_r>:
 80080f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f4:	1ccd      	adds	r5, r1, #3
 80080f6:	f025 0503 	bic.w	r5, r5, #3
 80080fa:	3508      	adds	r5, #8
 80080fc:	2d0c      	cmp	r5, #12
 80080fe:	bf38      	it	cc
 8008100:	250c      	movcc	r5, #12
 8008102:	2d00      	cmp	r5, #0
 8008104:	4607      	mov	r7, r0
 8008106:	db01      	blt.n	800810c <_malloc_r+0x1c>
 8008108:	42a9      	cmp	r1, r5
 800810a:	d905      	bls.n	8008118 <_malloc_r+0x28>
 800810c:	230c      	movs	r3, #12
 800810e:	2600      	movs	r6, #0
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	4630      	mov	r0, r6
 8008114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008118:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80081ec <_malloc_r+0xfc>
 800811c:	f000 f868 	bl	80081f0 <__malloc_lock>
 8008120:	f8d8 3000 	ldr.w	r3, [r8]
 8008124:	461c      	mov	r4, r3
 8008126:	bb5c      	cbnz	r4, 8008180 <_malloc_r+0x90>
 8008128:	4629      	mov	r1, r5
 800812a:	4638      	mov	r0, r7
 800812c:	f7ff ffc0 	bl	80080b0 <sbrk_aligned>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	4604      	mov	r4, r0
 8008134:	d155      	bne.n	80081e2 <_malloc_r+0xf2>
 8008136:	f8d8 4000 	ldr.w	r4, [r8]
 800813a:	4626      	mov	r6, r4
 800813c:	2e00      	cmp	r6, #0
 800813e:	d145      	bne.n	80081cc <_malloc_r+0xdc>
 8008140:	2c00      	cmp	r4, #0
 8008142:	d048      	beq.n	80081d6 <_malloc_r+0xe6>
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	4631      	mov	r1, r6
 8008148:	4638      	mov	r0, r7
 800814a:	eb04 0903 	add.w	r9, r4, r3
 800814e:	f000 fdef 	bl	8008d30 <_sbrk_r>
 8008152:	4581      	cmp	r9, r0
 8008154:	d13f      	bne.n	80081d6 <_malloc_r+0xe6>
 8008156:	6821      	ldr	r1, [r4, #0]
 8008158:	4638      	mov	r0, r7
 800815a:	1a6d      	subs	r5, r5, r1
 800815c:	4629      	mov	r1, r5
 800815e:	f7ff ffa7 	bl	80080b0 <sbrk_aligned>
 8008162:	3001      	adds	r0, #1
 8008164:	d037      	beq.n	80081d6 <_malloc_r+0xe6>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	442b      	add	r3, r5
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	f8d8 3000 	ldr.w	r3, [r8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d038      	beq.n	80081e6 <_malloc_r+0xf6>
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	42a2      	cmp	r2, r4
 8008178:	d12b      	bne.n	80081d2 <_malloc_r+0xe2>
 800817a:	2200      	movs	r2, #0
 800817c:	605a      	str	r2, [r3, #4]
 800817e:	e00f      	b.n	80081a0 <_malloc_r+0xb0>
 8008180:	6822      	ldr	r2, [r4, #0]
 8008182:	1b52      	subs	r2, r2, r5
 8008184:	d41f      	bmi.n	80081c6 <_malloc_r+0xd6>
 8008186:	2a0b      	cmp	r2, #11
 8008188:	d917      	bls.n	80081ba <_malloc_r+0xca>
 800818a:	1961      	adds	r1, r4, r5
 800818c:	42a3      	cmp	r3, r4
 800818e:	6025      	str	r5, [r4, #0]
 8008190:	bf18      	it	ne
 8008192:	6059      	strne	r1, [r3, #4]
 8008194:	6863      	ldr	r3, [r4, #4]
 8008196:	bf08      	it	eq
 8008198:	f8c8 1000 	streq.w	r1, [r8]
 800819c:	5162      	str	r2, [r4, r5]
 800819e:	604b      	str	r3, [r1, #4]
 80081a0:	4638      	mov	r0, r7
 80081a2:	f104 060b 	add.w	r6, r4, #11
 80081a6:	f000 f829 	bl	80081fc <__malloc_unlock>
 80081aa:	f026 0607 	bic.w	r6, r6, #7
 80081ae:	1d23      	adds	r3, r4, #4
 80081b0:	1af2      	subs	r2, r6, r3
 80081b2:	d0ae      	beq.n	8008112 <_malloc_r+0x22>
 80081b4:	1b9b      	subs	r3, r3, r6
 80081b6:	50a3      	str	r3, [r4, r2]
 80081b8:	e7ab      	b.n	8008112 <_malloc_r+0x22>
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	6862      	ldr	r2, [r4, #4]
 80081be:	d1dd      	bne.n	800817c <_malloc_r+0x8c>
 80081c0:	f8c8 2000 	str.w	r2, [r8]
 80081c4:	e7ec      	b.n	80081a0 <_malloc_r+0xb0>
 80081c6:	4623      	mov	r3, r4
 80081c8:	6864      	ldr	r4, [r4, #4]
 80081ca:	e7ac      	b.n	8008126 <_malloc_r+0x36>
 80081cc:	4634      	mov	r4, r6
 80081ce:	6876      	ldr	r6, [r6, #4]
 80081d0:	e7b4      	b.n	800813c <_malloc_r+0x4c>
 80081d2:	4613      	mov	r3, r2
 80081d4:	e7cc      	b.n	8008170 <_malloc_r+0x80>
 80081d6:	230c      	movs	r3, #12
 80081d8:	4638      	mov	r0, r7
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	f000 f80e 	bl	80081fc <__malloc_unlock>
 80081e0:	e797      	b.n	8008112 <_malloc_r+0x22>
 80081e2:	6025      	str	r5, [r4, #0]
 80081e4:	e7dc      	b.n	80081a0 <_malloc_r+0xb0>
 80081e6:	605b      	str	r3, [r3, #4]
 80081e8:	deff      	udf	#255	; 0xff
 80081ea:	bf00      	nop
 80081ec:	200005f0 	.word	0x200005f0

080081f0 <__malloc_lock>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__malloc_lock+0x8>)
 80081f2:	f7ff b88e 	b.w	8007312 <__retarget_lock_acquire_recursive>
 80081f6:	bf00      	nop
 80081f8:	200005ec 	.word	0x200005ec

080081fc <__malloc_unlock>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__malloc_unlock+0x8>)
 80081fe:	f7ff b889 	b.w	8007314 <__retarget_lock_release_recursive>
 8008202:	bf00      	nop
 8008204:	200005ec 	.word	0x200005ec

08008208 <_Balloc>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	69c6      	ldr	r6, [r0, #28]
 800820c:	4604      	mov	r4, r0
 800820e:	460d      	mov	r5, r1
 8008210:	b976      	cbnz	r6, 8008230 <_Balloc+0x28>
 8008212:	2010      	movs	r0, #16
 8008214:	f7ff ff44 	bl	80080a0 <malloc>
 8008218:	4602      	mov	r2, r0
 800821a:	61e0      	str	r0, [r4, #28]
 800821c:	b920      	cbnz	r0, 8008228 <_Balloc+0x20>
 800821e:	216b      	movs	r1, #107	; 0x6b
 8008220:	4b17      	ldr	r3, [pc, #92]	; (8008280 <_Balloc+0x78>)
 8008222:	4818      	ldr	r0, [pc, #96]	; (8008284 <_Balloc+0x7c>)
 8008224:	f000 fda2 	bl	8008d6c <__assert_func>
 8008228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800822c:	6006      	str	r6, [r0, #0]
 800822e:	60c6      	str	r6, [r0, #12]
 8008230:	69e6      	ldr	r6, [r4, #28]
 8008232:	68f3      	ldr	r3, [r6, #12]
 8008234:	b183      	cbz	r3, 8008258 <_Balloc+0x50>
 8008236:	69e3      	ldr	r3, [r4, #28]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800823e:	b9b8      	cbnz	r0, 8008270 <_Balloc+0x68>
 8008240:	2101      	movs	r1, #1
 8008242:	fa01 f605 	lsl.w	r6, r1, r5
 8008246:	1d72      	adds	r2, r6, #5
 8008248:	4620      	mov	r0, r4
 800824a:	0092      	lsls	r2, r2, #2
 800824c:	f000 fdac 	bl	8008da8 <_calloc_r>
 8008250:	b160      	cbz	r0, 800826c <_Balloc+0x64>
 8008252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008256:	e00e      	b.n	8008276 <_Balloc+0x6e>
 8008258:	2221      	movs	r2, #33	; 0x21
 800825a:	2104      	movs	r1, #4
 800825c:	4620      	mov	r0, r4
 800825e:	f000 fda3 	bl	8008da8 <_calloc_r>
 8008262:	69e3      	ldr	r3, [r4, #28]
 8008264:	60f0      	str	r0, [r6, #12]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e4      	bne.n	8008236 <_Balloc+0x2e>
 800826c:	2000      	movs	r0, #0
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	6802      	ldr	r2, [r0, #0]
 8008272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008276:	2300      	movs	r3, #0
 8008278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800827c:	e7f7      	b.n	800826e <_Balloc+0x66>
 800827e:	bf00      	nop
 8008280:	0800948b 	.word	0x0800948b
 8008284:	0800950b 	.word	0x0800950b

08008288 <_Bfree>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	69c6      	ldr	r6, [r0, #28]
 800828c:	4605      	mov	r5, r0
 800828e:	460c      	mov	r4, r1
 8008290:	b976      	cbnz	r6, 80082b0 <_Bfree+0x28>
 8008292:	2010      	movs	r0, #16
 8008294:	f7ff ff04 	bl	80080a0 <malloc>
 8008298:	4602      	mov	r2, r0
 800829a:	61e8      	str	r0, [r5, #28]
 800829c:	b920      	cbnz	r0, 80082a8 <_Bfree+0x20>
 800829e:	218f      	movs	r1, #143	; 0x8f
 80082a0:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <_Bfree+0x3c>)
 80082a2:	4809      	ldr	r0, [pc, #36]	; (80082c8 <_Bfree+0x40>)
 80082a4:	f000 fd62 	bl	8008d6c <__assert_func>
 80082a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082ac:	6006      	str	r6, [r0, #0]
 80082ae:	60c6      	str	r6, [r0, #12]
 80082b0:	b13c      	cbz	r4, 80082c2 <_Bfree+0x3a>
 80082b2:	69eb      	ldr	r3, [r5, #28]
 80082b4:	6862      	ldr	r2, [r4, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082bc:	6021      	str	r1, [r4, #0]
 80082be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	0800948b 	.word	0x0800948b
 80082c8:	0800950b 	.word	0x0800950b

080082cc <__multadd>:
 80082cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d0:	4607      	mov	r7, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	461e      	mov	r6, r3
 80082d6:	2000      	movs	r0, #0
 80082d8:	690d      	ldr	r5, [r1, #16]
 80082da:	f101 0c14 	add.w	ip, r1, #20
 80082de:	f8dc 3000 	ldr.w	r3, [ip]
 80082e2:	3001      	adds	r0, #1
 80082e4:	b299      	uxth	r1, r3
 80082e6:	fb02 6101 	mla	r1, r2, r1, r6
 80082ea:	0c1e      	lsrs	r6, r3, #16
 80082ec:	0c0b      	lsrs	r3, r1, #16
 80082ee:	fb02 3306 	mla	r3, r2, r6, r3
 80082f2:	b289      	uxth	r1, r1
 80082f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082f8:	4285      	cmp	r5, r0
 80082fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008302:	dcec      	bgt.n	80082de <__multadd+0x12>
 8008304:	b30e      	cbz	r6, 800834a <__multadd+0x7e>
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	42ab      	cmp	r3, r5
 800830a:	dc19      	bgt.n	8008340 <__multadd+0x74>
 800830c:	6861      	ldr	r1, [r4, #4]
 800830e:	4638      	mov	r0, r7
 8008310:	3101      	adds	r1, #1
 8008312:	f7ff ff79 	bl	8008208 <_Balloc>
 8008316:	4680      	mov	r8, r0
 8008318:	b928      	cbnz	r0, 8008326 <__multadd+0x5a>
 800831a:	4602      	mov	r2, r0
 800831c:	21ba      	movs	r1, #186	; 0xba
 800831e:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <__multadd+0x84>)
 8008320:	480c      	ldr	r0, [pc, #48]	; (8008354 <__multadd+0x88>)
 8008322:	f000 fd23 	bl	8008d6c <__assert_func>
 8008326:	6922      	ldr	r2, [r4, #16]
 8008328:	f104 010c 	add.w	r1, r4, #12
 800832c:	3202      	adds	r2, #2
 800832e:	0092      	lsls	r2, r2, #2
 8008330:	300c      	adds	r0, #12
 8008332:	f000 fd0d 	bl	8008d50 <memcpy>
 8008336:	4621      	mov	r1, r4
 8008338:	4638      	mov	r0, r7
 800833a:	f7ff ffa5 	bl	8008288 <_Bfree>
 800833e:	4644      	mov	r4, r8
 8008340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008344:	3501      	adds	r5, #1
 8008346:	615e      	str	r6, [r3, #20]
 8008348:	6125      	str	r5, [r4, #16]
 800834a:	4620      	mov	r0, r4
 800834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008350:	080094fa 	.word	0x080094fa
 8008354:	0800950b 	.word	0x0800950b

08008358 <__hi0bits>:
 8008358:	0c02      	lsrs	r2, r0, #16
 800835a:	0412      	lsls	r2, r2, #16
 800835c:	4603      	mov	r3, r0
 800835e:	b9ca      	cbnz	r2, 8008394 <__hi0bits+0x3c>
 8008360:	0403      	lsls	r3, r0, #16
 8008362:	2010      	movs	r0, #16
 8008364:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008368:	bf04      	itt	eq
 800836a:	021b      	lsleq	r3, r3, #8
 800836c:	3008      	addeq	r0, #8
 800836e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008372:	bf04      	itt	eq
 8008374:	011b      	lsleq	r3, r3, #4
 8008376:	3004      	addeq	r0, #4
 8008378:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800837c:	bf04      	itt	eq
 800837e:	009b      	lsleq	r3, r3, #2
 8008380:	3002      	addeq	r0, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	db05      	blt.n	8008392 <__hi0bits+0x3a>
 8008386:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800838a:	f100 0001 	add.w	r0, r0, #1
 800838e:	bf08      	it	eq
 8008390:	2020      	moveq	r0, #32
 8008392:	4770      	bx	lr
 8008394:	2000      	movs	r0, #0
 8008396:	e7e5      	b.n	8008364 <__hi0bits+0xc>

08008398 <__lo0bits>:
 8008398:	6803      	ldr	r3, [r0, #0]
 800839a:	4602      	mov	r2, r0
 800839c:	f013 0007 	ands.w	r0, r3, #7
 80083a0:	d00b      	beq.n	80083ba <__lo0bits+0x22>
 80083a2:	07d9      	lsls	r1, r3, #31
 80083a4:	d421      	bmi.n	80083ea <__lo0bits+0x52>
 80083a6:	0798      	lsls	r0, r3, #30
 80083a8:	bf49      	itett	mi
 80083aa:	085b      	lsrmi	r3, r3, #1
 80083ac:	089b      	lsrpl	r3, r3, #2
 80083ae:	2001      	movmi	r0, #1
 80083b0:	6013      	strmi	r3, [r2, #0]
 80083b2:	bf5c      	itt	pl
 80083b4:	2002      	movpl	r0, #2
 80083b6:	6013      	strpl	r3, [r2, #0]
 80083b8:	4770      	bx	lr
 80083ba:	b299      	uxth	r1, r3
 80083bc:	b909      	cbnz	r1, 80083c2 <__lo0bits+0x2a>
 80083be:	2010      	movs	r0, #16
 80083c0:	0c1b      	lsrs	r3, r3, #16
 80083c2:	b2d9      	uxtb	r1, r3
 80083c4:	b909      	cbnz	r1, 80083ca <__lo0bits+0x32>
 80083c6:	3008      	adds	r0, #8
 80083c8:	0a1b      	lsrs	r3, r3, #8
 80083ca:	0719      	lsls	r1, r3, #28
 80083cc:	bf04      	itt	eq
 80083ce:	091b      	lsreq	r3, r3, #4
 80083d0:	3004      	addeq	r0, #4
 80083d2:	0799      	lsls	r1, r3, #30
 80083d4:	bf04      	itt	eq
 80083d6:	089b      	lsreq	r3, r3, #2
 80083d8:	3002      	addeq	r0, #2
 80083da:	07d9      	lsls	r1, r3, #31
 80083dc:	d403      	bmi.n	80083e6 <__lo0bits+0x4e>
 80083de:	085b      	lsrs	r3, r3, #1
 80083e0:	f100 0001 	add.w	r0, r0, #1
 80083e4:	d003      	beq.n	80083ee <__lo0bits+0x56>
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	4770      	bx	lr
 80083ea:	2000      	movs	r0, #0
 80083ec:	4770      	bx	lr
 80083ee:	2020      	movs	r0, #32
 80083f0:	4770      	bx	lr
	...

080083f4 <__i2b>:
 80083f4:	b510      	push	{r4, lr}
 80083f6:	460c      	mov	r4, r1
 80083f8:	2101      	movs	r1, #1
 80083fa:	f7ff ff05 	bl	8008208 <_Balloc>
 80083fe:	4602      	mov	r2, r0
 8008400:	b928      	cbnz	r0, 800840e <__i2b+0x1a>
 8008402:	f240 1145 	movw	r1, #325	; 0x145
 8008406:	4b04      	ldr	r3, [pc, #16]	; (8008418 <__i2b+0x24>)
 8008408:	4804      	ldr	r0, [pc, #16]	; (800841c <__i2b+0x28>)
 800840a:	f000 fcaf 	bl	8008d6c <__assert_func>
 800840e:	2301      	movs	r3, #1
 8008410:	6144      	str	r4, [r0, #20]
 8008412:	6103      	str	r3, [r0, #16]
 8008414:	bd10      	pop	{r4, pc}
 8008416:	bf00      	nop
 8008418:	080094fa 	.word	0x080094fa
 800841c:	0800950b 	.word	0x0800950b

08008420 <__multiply>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	4691      	mov	r9, r2
 8008426:	690a      	ldr	r2, [r1, #16]
 8008428:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800842c:	460c      	mov	r4, r1
 800842e:	429a      	cmp	r2, r3
 8008430:	bfbe      	ittt	lt
 8008432:	460b      	movlt	r3, r1
 8008434:	464c      	movlt	r4, r9
 8008436:	4699      	movlt	r9, r3
 8008438:	6927      	ldr	r7, [r4, #16]
 800843a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800843e:	68a3      	ldr	r3, [r4, #8]
 8008440:	6861      	ldr	r1, [r4, #4]
 8008442:	eb07 060a 	add.w	r6, r7, sl
 8008446:	42b3      	cmp	r3, r6
 8008448:	b085      	sub	sp, #20
 800844a:	bfb8      	it	lt
 800844c:	3101      	addlt	r1, #1
 800844e:	f7ff fedb 	bl	8008208 <_Balloc>
 8008452:	b930      	cbnz	r0, 8008462 <__multiply+0x42>
 8008454:	4602      	mov	r2, r0
 8008456:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800845a:	4b43      	ldr	r3, [pc, #268]	; (8008568 <__multiply+0x148>)
 800845c:	4843      	ldr	r0, [pc, #268]	; (800856c <__multiply+0x14c>)
 800845e:	f000 fc85 	bl	8008d6c <__assert_func>
 8008462:	f100 0514 	add.w	r5, r0, #20
 8008466:	462b      	mov	r3, r5
 8008468:	2200      	movs	r2, #0
 800846a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800846e:	4543      	cmp	r3, r8
 8008470:	d321      	bcc.n	80084b6 <__multiply+0x96>
 8008472:	f104 0314 	add.w	r3, r4, #20
 8008476:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800847a:	f109 0314 	add.w	r3, r9, #20
 800847e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008482:	9202      	str	r2, [sp, #8]
 8008484:	1b3a      	subs	r2, r7, r4
 8008486:	3a15      	subs	r2, #21
 8008488:	f022 0203 	bic.w	r2, r2, #3
 800848c:	3204      	adds	r2, #4
 800848e:	f104 0115 	add.w	r1, r4, #21
 8008492:	428f      	cmp	r7, r1
 8008494:	bf38      	it	cc
 8008496:	2204      	movcc	r2, #4
 8008498:	9201      	str	r2, [sp, #4]
 800849a:	9a02      	ldr	r2, [sp, #8]
 800849c:	9303      	str	r3, [sp, #12]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d80c      	bhi.n	80084bc <__multiply+0x9c>
 80084a2:	2e00      	cmp	r6, #0
 80084a4:	dd03      	ble.n	80084ae <__multiply+0x8e>
 80084a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d05a      	beq.n	8008564 <__multiply+0x144>
 80084ae:	6106      	str	r6, [r0, #16]
 80084b0:	b005      	add	sp, #20
 80084b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b6:	f843 2b04 	str.w	r2, [r3], #4
 80084ba:	e7d8      	b.n	800846e <__multiply+0x4e>
 80084bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80084c0:	f1ba 0f00 	cmp.w	sl, #0
 80084c4:	d023      	beq.n	800850e <__multiply+0xee>
 80084c6:	46a9      	mov	r9, r5
 80084c8:	f04f 0c00 	mov.w	ip, #0
 80084cc:	f104 0e14 	add.w	lr, r4, #20
 80084d0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80084d4:	f8d9 1000 	ldr.w	r1, [r9]
 80084d8:	fa1f fb82 	uxth.w	fp, r2
 80084dc:	b289      	uxth	r1, r1
 80084de:	fb0a 110b 	mla	r1, sl, fp, r1
 80084e2:	4461      	add	r1, ip
 80084e4:	f8d9 c000 	ldr.w	ip, [r9]
 80084e8:	0c12      	lsrs	r2, r2, #16
 80084ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80084ee:	fb0a c202 	mla	r2, sl, r2, ip
 80084f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084f6:	b289      	uxth	r1, r1
 80084f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084fc:	4577      	cmp	r7, lr
 80084fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008502:	f849 1b04 	str.w	r1, [r9], #4
 8008506:	d8e3      	bhi.n	80084d0 <__multiply+0xb0>
 8008508:	9a01      	ldr	r2, [sp, #4]
 800850a:	f845 c002 	str.w	ip, [r5, r2]
 800850e:	9a03      	ldr	r2, [sp, #12]
 8008510:	3304      	adds	r3, #4
 8008512:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008516:	f1b9 0f00 	cmp.w	r9, #0
 800851a:	d021      	beq.n	8008560 <__multiply+0x140>
 800851c:	46ae      	mov	lr, r5
 800851e:	f04f 0a00 	mov.w	sl, #0
 8008522:	6829      	ldr	r1, [r5, #0]
 8008524:	f104 0c14 	add.w	ip, r4, #20
 8008528:	f8bc b000 	ldrh.w	fp, [ip]
 800852c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008530:	b289      	uxth	r1, r1
 8008532:	fb09 220b 	mla	r2, r9, fp, r2
 8008536:	4452      	add	r2, sl
 8008538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800853c:	f84e 1b04 	str.w	r1, [lr], #4
 8008540:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008544:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008548:	f8be 1000 	ldrh.w	r1, [lr]
 800854c:	4567      	cmp	r7, ip
 800854e:	fb09 110a 	mla	r1, r9, sl, r1
 8008552:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008556:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800855a:	d8e5      	bhi.n	8008528 <__multiply+0x108>
 800855c:	9a01      	ldr	r2, [sp, #4]
 800855e:	50a9      	str	r1, [r5, r2]
 8008560:	3504      	adds	r5, #4
 8008562:	e79a      	b.n	800849a <__multiply+0x7a>
 8008564:	3e01      	subs	r6, #1
 8008566:	e79c      	b.n	80084a2 <__multiply+0x82>
 8008568:	080094fa 	.word	0x080094fa
 800856c:	0800950b 	.word	0x0800950b

08008570 <__pow5mult>:
 8008570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008574:	4615      	mov	r5, r2
 8008576:	f012 0203 	ands.w	r2, r2, #3
 800857a:	4606      	mov	r6, r0
 800857c:	460f      	mov	r7, r1
 800857e:	d007      	beq.n	8008590 <__pow5mult+0x20>
 8008580:	4c25      	ldr	r4, [pc, #148]	; (8008618 <__pow5mult+0xa8>)
 8008582:	3a01      	subs	r2, #1
 8008584:	2300      	movs	r3, #0
 8008586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800858a:	f7ff fe9f 	bl	80082cc <__multadd>
 800858e:	4607      	mov	r7, r0
 8008590:	10ad      	asrs	r5, r5, #2
 8008592:	d03d      	beq.n	8008610 <__pow5mult+0xa0>
 8008594:	69f4      	ldr	r4, [r6, #28]
 8008596:	b97c      	cbnz	r4, 80085b8 <__pow5mult+0x48>
 8008598:	2010      	movs	r0, #16
 800859a:	f7ff fd81 	bl	80080a0 <malloc>
 800859e:	4602      	mov	r2, r0
 80085a0:	61f0      	str	r0, [r6, #28]
 80085a2:	b928      	cbnz	r0, 80085b0 <__pow5mult+0x40>
 80085a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80085a8:	4b1c      	ldr	r3, [pc, #112]	; (800861c <__pow5mult+0xac>)
 80085aa:	481d      	ldr	r0, [pc, #116]	; (8008620 <__pow5mult+0xb0>)
 80085ac:	f000 fbde 	bl	8008d6c <__assert_func>
 80085b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085b4:	6004      	str	r4, [r0, #0]
 80085b6:	60c4      	str	r4, [r0, #12]
 80085b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80085bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085c0:	b94c      	cbnz	r4, 80085d6 <__pow5mult+0x66>
 80085c2:	f240 2171 	movw	r1, #625	; 0x271
 80085c6:	4630      	mov	r0, r6
 80085c8:	f7ff ff14 	bl	80083f4 <__i2b>
 80085cc:	2300      	movs	r3, #0
 80085ce:	4604      	mov	r4, r0
 80085d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80085d4:	6003      	str	r3, [r0, #0]
 80085d6:	f04f 0900 	mov.w	r9, #0
 80085da:	07eb      	lsls	r3, r5, #31
 80085dc:	d50a      	bpl.n	80085f4 <__pow5mult+0x84>
 80085de:	4639      	mov	r1, r7
 80085e0:	4622      	mov	r2, r4
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7ff ff1c 	bl	8008420 <__multiply>
 80085e8:	4680      	mov	r8, r0
 80085ea:	4639      	mov	r1, r7
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff fe4b 	bl	8008288 <_Bfree>
 80085f2:	4647      	mov	r7, r8
 80085f4:	106d      	asrs	r5, r5, #1
 80085f6:	d00b      	beq.n	8008610 <__pow5mult+0xa0>
 80085f8:	6820      	ldr	r0, [r4, #0]
 80085fa:	b938      	cbnz	r0, 800860c <__pow5mult+0x9c>
 80085fc:	4622      	mov	r2, r4
 80085fe:	4621      	mov	r1, r4
 8008600:	4630      	mov	r0, r6
 8008602:	f7ff ff0d 	bl	8008420 <__multiply>
 8008606:	6020      	str	r0, [r4, #0]
 8008608:	f8c0 9000 	str.w	r9, [r0]
 800860c:	4604      	mov	r4, r0
 800860e:	e7e4      	b.n	80085da <__pow5mult+0x6a>
 8008610:	4638      	mov	r0, r7
 8008612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008616:	bf00      	nop
 8008618:	08009658 	.word	0x08009658
 800861c:	0800948b 	.word	0x0800948b
 8008620:	0800950b 	.word	0x0800950b

08008624 <__lshift>:
 8008624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008628:	460c      	mov	r4, r1
 800862a:	4607      	mov	r7, r0
 800862c:	4691      	mov	r9, r2
 800862e:	6923      	ldr	r3, [r4, #16]
 8008630:	6849      	ldr	r1, [r1, #4]
 8008632:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008636:	68a3      	ldr	r3, [r4, #8]
 8008638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800863c:	f108 0601 	add.w	r6, r8, #1
 8008640:	42b3      	cmp	r3, r6
 8008642:	db0b      	blt.n	800865c <__lshift+0x38>
 8008644:	4638      	mov	r0, r7
 8008646:	f7ff fddf 	bl	8008208 <_Balloc>
 800864a:	4605      	mov	r5, r0
 800864c:	b948      	cbnz	r0, 8008662 <__lshift+0x3e>
 800864e:	4602      	mov	r2, r0
 8008650:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008654:	4b27      	ldr	r3, [pc, #156]	; (80086f4 <__lshift+0xd0>)
 8008656:	4828      	ldr	r0, [pc, #160]	; (80086f8 <__lshift+0xd4>)
 8008658:	f000 fb88 	bl	8008d6c <__assert_func>
 800865c:	3101      	adds	r1, #1
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	e7ee      	b.n	8008640 <__lshift+0x1c>
 8008662:	2300      	movs	r3, #0
 8008664:	f100 0114 	add.w	r1, r0, #20
 8008668:	f100 0210 	add.w	r2, r0, #16
 800866c:	4618      	mov	r0, r3
 800866e:	4553      	cmp	r3, sl
 8008670:	db33      	blt.n	80086da <__lshift+0xb6>
 8008672:	6920      	ldr	r0, [r4, #16]
 8008674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008678:	f104 0314 	add.w	r3, r4, #20
 800867c:	f019 091f 	ands.w	r9, r9, #31
 8008680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008684:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008688:	d02b      	beq.n	80086e2 <__lshift+0xbe>
 800868a:	468a      	mov	sl, r1
 800868c:	2200      	movs	r2, #0
 800868e:	f1c9 0e20 	rsb	lr, r9, #32
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	fa00 f009 	lsl.w	r0, r0, r9
 8008698:	4310      	orrs	r0, r2
 800869a:	f84a 0b04 	str.w	r0, [sl], #4
 800869e:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a2:	459c      	cmp	ip, r3
 80086a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80086a8:	d8f3      	bhi.n	8008692 <__lshift+0x6e>
 80086aa:	ebac 0304 	sub.w	r3, ip, r4
 80086ae:	3b15      	subs	r3, #21
 80086b0:	f023 0303 	bic.w	r3, r3, #3
 80086b4:	3304      	adds	r3, #4
 80086b6:	f104 0015 	add.w	r0, r4, #21
 80086ba:	4584      	cmp	ip, r0
 80086bc:	bf38      	it	cc
 80086be:	2304      	movcc	r3, #4
 80086c0:	50ca      	str	r2, [r1, r3]
 80086c2:	b10a      	cbz	r2, 80086c8 <__lshift+0xa4>
 80086c4:	f108 0602 	add.w	r6, r8, #2
 80086c8:	3e01      	subs	r6, #1
 80086ca:	4638      	mov	r0, r7
 80086cc:	4621      	mov	r1, r4
 80086ce:	612e      	str	r6, [r5, #16]
 80086d0:	f7ff fdda 	bl	8008288 <_Bfree>
 80086d4:	4628      	mov	r0, r5
 80086d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086da:	f842 0f04 	str.w	r0, [r2, #4]!
 80086de:	3301      	adds	r3, #1
 80086e0:	e7c5      	b.n	800866e <__lshift+0x4a>
 80086e2:	3904      	subs	r1, #4
 80086e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e8:	459c      	cmp	ip, r3
 80086ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80086ee:	d8f9      	bhi.n	80086e4 <__lshift+0xc0>
 80086f0:	e7ea      	b.n	80086c8 <__lshift+0xa4>
 80086f2:	bf00      	nop
 80086f4:	080094fa 	.word	0x080094fa
 80086f8:	0800950b 	.word	0x0800950b

080086fc <__mcmp>:
 80086fc:	4603      	mov	r3, r0
 80086fe:	690a      	ldr	r2, [r1, #16]
 8008700:	6900      	ldr	r0, [r0, #16]
 8008702:	b530      	push	{r4, r5, lr}
 8008704:	1a80      	subs	r0, r0, r2
 8008706:	d10d      	bne.n	8008724 <__mcmp+0x28>
 8008708:	3314      	adds	r3, #20
 800870a:	3114      	adds	r1, #20
 800870c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008710:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008714:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008718:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800871c:	4295      	cmp	r5, r2
 800871e:	d002      	beq.n	8008726 <__mcmp+0x2a>
 8008720:	d304      	bcc.n	800872c <__mcmp+0x30>
 8008722:	2001      	movs	r0, #1
 8008724:	bd30      	pop	{r4, r5, pc}
 8008726:	42a3      	cmp	r3, r4
 8008728:	d3f4      	bcc.n	8008714 <__mcmp+0x18>
 800872a:	e7fb      	b.n	8008724 <__mcmp+0x28>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	e7f8      	b.n	8008724 <__mcmp+0x28>
	...

08008734 <__mdiff>:
 8008734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008738:	460d      	mov	r5, r1
 800873a:	4607      	mov	r7, r0
 800873c:	4611      	mov	r1, r2
 800873e:	4628      	mov	r0, r5
 8008740:	4614      	mov	r4, r2
 8008742:	f7ff ffdb 	bl	80086fc <__mcmp>
 8008746:	1e06      	subs	r6, r0, #0
 8008748:	d111      	bne.n	800876e <__mdiff+0x3a>
 800874a:	4631      	mov	r1, r6
 800874c:	4638      	mov	r0, r7
 800874e:	f7ff fd5b 	bl	8008208 <_Balloc>
 8008752:	4602      	mov	r2, r0
 8008754:	b928      	cbnz	r0, 8008762 <__mdiff+0x2e>
 8008756:	f240 2137 	movw	r1, #567	; 0x237
 800875a:	4b3a      	ldr	r3, [pc, #232]	; (8008844 <__mdiff+0x110>)
 800875c:	483a      	ldr	r0, [pc, #232]	; (8008848 <__mdiff+0x114>)
 800875e:	f000 fb05 	bl	8008d6c <__assert_func>
 8008762:	2301      	movs	r3, #1
 8008764:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008768:	4610      	mov	r0, r2
 800876a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876e:	bfa4      	itt	ge
 8008770:	4623      	movge	r3, r4
 8008772:	462c      	movge	r4, r5
 8008774:	4638      	mov	r0, r7
 8008776:	6861      	ldr	r1, [r4, #4]
 8008778:	bfa6      	itte	ge
 800877a:	461d      	movge	r5, r3
 800877c:	2600      	movge	r6, #0
 800877e:	2601      	movlt	r6, #1
 8008780:	f7ff fd42 	bl	8008208 <_Balloc>
 8008784:	4602      	mov	r2, r0
 8008786:	b918      	cbnz	r0, 8008790 <__mdiff+0x5c>
 8008788:	f240 2145 	movw	r1, #581	; 0x245
 800878c:	4b2d      	ldr	r3, [pc, #180]	; (8008844 <__mdiff+0x110>)
 800878e:	e7e5      	b.n	800875c <__mdiff+0x28>
 8008790:	f102 0814 	add.w	r8, r2, #20
 8008794:	46c2      	mov	sl, r8
 8008796:	f04f 0c00 	mov.w	ip, #0
 800879a:	6927      	ldr	r7, [r4, #16]
 800879c:	60c6      	str	r6, [r0, #12]
 800879e:	692e      	ldr	r6, [r5, #16]
 80087a0:	f104 0014 	add.w	r0, r4, #20
 80087a4:	f105 0914 	add.w	r9, r5, #20
 80087a8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80087ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087b0:	3410      	adds	r4, #16
 80087b2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80087b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80087ba:	fa1f f18b 	uxth.w	r1, fp
 80087be:	4461      	add	r1, ip
 80087c0:	fa1f fc83 	uxth.w	ip, r3
 80087c4:	0c1b      	lsrs	r3, r3, #16
 80087c6:	eba1 010c 	sub.w	r1, r1, ip
 80087ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80087d2:	b289      	uxth	r1, r1
 80087d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80087d8:	454e      	cmp	r6, r9
 80087da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80087de:	f84a 1b04 	str.w	r1, [sl], #4
 80087e2:	d8e6      	bhi.n	80087b2 <__mdiff+0x7e>
 80087e4:	1b73      	subs	r3, r6, r5
 80087e6:	3b15      	subs	r3, #21
 80087e8:	f023 0303 	bic.w	r3, r3, #3
 80087ec:	3515      	adds	r5, #21
 80087ee:	3304      	adds	r3, #4
 80087f0:	42ae      	cmp	r6, r5
 80087f2:	bf38      	it	cc
 80087f4:	2304      	movcc	r3, #4
 80087f6:	4418      	add	r0, r3
 80087f8:	4443      	add	r3, r8
 80087fa:	461e      	mov	r6, r3
 80087fc:	4605      	mov	r5, r0
 80087fe:	4575      	cmp	r5, lr
 8008800:	d30e      	bcc.n	8008820 <__mdiff+0xec>
 8008802:	f10e 0103 	add.w	r1, lr, #3
 8008806:	1a09      	subs	r1, r1, r0
 8008808:	f021 0103 	bic.w	r1, r1, #3
 800880c:	3803      	subs	r0, #3
 800880e:	4586      	cmp	lr, r0
 8008810:	bf38      	it	cc
 8008812:	2100      	movcc	r1, #0
 8008814:	440b      	add	r3, r1
 8008816:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800881a:	b189      	cbz	r1, 8008840 <__mdiff+0x10c>
 800881c:	6117      	str	r7, [r2, #16]
 800881e:	e7a3      	b.n	8008768 <__mdiff+0x34>
 8008820:	f855 8b04 	ldr.w	r8, [r5], #4
 8008824:	fa1f f188 	uxth.w	r1, r8
 8008828:	4461      	add	r1, ip
 800882a:	140c      	asrs	r4, r1, #16
 800882c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008830:	b289      	uxth	r1, r1
 8008832:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008836:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800883a:	f846 1b04 	str.w	r1, [r6], #4
 800883e:	e7de      	b.n	80087fe <__mdiff+0xca>
 8008840:	3f01      	subs	r7, #1
 8008842:	e7e8      	b.n	8008816 <__mdiff+0xe2>
 8008844:	080094fa 	.word	0x080094fa
 8008848:	0800950b 	.word	0x0800950b

0800884c <__d2b>:
 800884c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800884e:	2101      	movs	r1, #1
 8008850:	4617      	mov	r7, r2
 8008852:	461c      	mov	r4, r3
 8008854:	9e08      	ldr	r6, [sp, #32]
 8008856:	f7ff fcd7 	bl	8008208 <_Balloc>
 800885a:	4605      	mov	r5, r0
 800885c:	b930      	cbnz	r0, 800886c <__d2b+0x20>
 800885e:	4602      	mov	r2, r0
 8008860:	f240 310f 	movw	r1, #783	; 0x30f
 8008864:	4b22      	ldr	r3, [pc, #136]	; (80088f0 <__d2b+0xa4>)
 8008866:	4823      	ldr	r0, [pc, #140]	; (80088f4 <__d2b+0xa8>)
 8008868:	f000 fa80 	bl	8008d6c <__assert_func>
 800886c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008870:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008874:	bb24      	cbnz	r4, 80088c0 <__d2b+0x74>
 8008876:	2f00      	cmp	r7, #0
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	d026      	beq.n	80088ca <__d2b+0x7e>
 800887c:	4668      	mov	r0, sp
 800887e:	9700      	str	r7, [sp, #0]
 8008880:	f7ff fd8a 	bl	8008398 <__lo0bits>
 8008884:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008888:	b1e8      	cbz	r0, 80088c6 <__d2b+0x7a>
 800888a:	f1c0 0320 	rsb	r3, r0, #32
 800888e:	fa02 f303 	lsl.w	r3, r2, r3
 8008892:	430b      	orrs	r3, r1
 8008894:	40c2      	lsrs	r2, r0
 8008896:	616b      	str	r3, [r5, #20]
 8008898:	9201      	str	r2, [sp, #4]
 800889a:	9b01      	ldr	r3, [sp, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	bf14      	ite	ne
 80088a0:	2102      	movne	r1, #2
 80088a2:	2101      	moveq	r1, #1
 80088a4:	61ab      	str	r3, [r5, #24]
 80088a6:	6129      	str	r1, [r5, #16]
 80088a8:	b1bc      	cbz	r4, 80088da <__d2b+0x8e>
 80088aa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80088ae:	4404      	add	r4, r0
 80088b0:	6034      	str	r4, [r6, #0]
 80088b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b8:	6018      	str	r0, [r3, #0]
 80088ba:	4628      	mov	r0, r5
 80088bc:	b003      	add	sp, #12
 80088be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088c4:	e7d7      	b.n	8008876 <__d2b+0x2a>
 80088c6:	6169      	str	r1, [r5, #20]
 80088c8:	e7e7      	b.n	800889a <__d2b+0x4e>
 80088ca:	a801      	add	r0, sp, #4
 80088cc:	f7ff fd64 	bl	8008398 <__lo0bits>
 80088d0:	9b01      	ldr	r3, [sp, #4]
 80088d2:	2101      	movs	r1, #1
 80088d4:	616b      	str	r3, [r5, #20]
 80088d6:	3020      	adds	r0, #32
 80088d8:	e7e5      	b.n	80088a6 <__d2b+0x5a>
 80088da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088de:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80088e2:	6030      	str	r0, [r6, #0]
 80088e4:	6918      	ldr	r0, [r3, #16]
 80088e6:	f7ff fd37 	bl	8008358 <__hi0bits>
 80088ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80088ee:	e7e2      	b.n	80088b6 <__d2b+0x6a>
 80088f0:	080094fa 	.word	0x080094fa
 80088f4:	0800950b 	.word	0x0800950b

080088f8 <__ssputs_r>:
 80088f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	461f      	mov	r7, r3
 80088fe:	688e      	ldr	r6, [r1, #8]
 8008900:	4682      	mov	sl, r0
 8008902:	42be      	cmp	r6, r7
 8008904:	460c      	mov	r4, r1
 8008906:	4690      	mov	r8, r2
 8008908:	680b      	ldr	r3, [r1, #0]
 800890a:	d82c      	bhi.n	8008966 <__ssputs_r+0x6e>
 800890c:	898a      	ldrh	r2, [r1, #12]
 800890e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008912:	d026      	beq.n	8008962 <__ssputs_r+0x6a>
 8008914:	6965      	ldr	r5, [r4, #20]
 8008916:	6909      	ldr	r1, [r1, #16]
 8008918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800891c:	eba3 0901 	sub.w	r9, r3, r1
 8008920:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008924:	1c7b      	adds	r3, r7, #1
 8008926:	444b      	add	r3, r9
 8008928:	106d      	asrs	r5, r5, #1
 800892a:	429d      	cmp	r5, r3
 800892c:	bf38      	it	cc
 800892e:	461d      	movcc	r5, r3
 8008930:	0553      	lsls	r3, r2, #21
 8008932:	d527      	bpl.n	8008984 <__ssputs_r+0x8c>
 8008934:	4629      	mov	r1, r5
 8008936:	f7ff fbdb 	bl	80080f0 <_malloc_r>
 800893a:	4606      	mov	r6, r0
 800893c:	b360      	cbz	r0, 8008998 <__ssputs_r+0xa0>
 800893e:	464a      	mov	r2, r9
 8008940:	6921      	ldr	r1, [r4, #16]
 8008942:	f000 fa05 	bl	8008d50 <memcpy>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800894c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008950:	81a3      	strh	r3, [r4, #12]
 8008952:	6126      	str	r6, [r4, #16]
 8008954:	444e      	add	r6, r9
 8008956:	6026      	str	r6, [r4, #0]
 8008958:	463e      	mov	r6, r7
 800895a:	6165      	str	r5, [r4, #20]
 800895c:	eba5 0509 	sub.w	r5, r5, r9
 8008960:	60a5      	str	r5, [r4, #8]
 8008962:	42be      	cmp	r6, r7
 8008964:	d900      	bls.n	8008968 <__ssputs_r+0x70>
 8008966:	463e      	mov	r6, r7
 8008968:	4632      	mov	r2, r6
 800896a:	4641      	mov	r1, r8
 800896c:	6820      	ldr	r0, [r4, #0]
 800896e:	f000 f9c5 	bl	8008cfc <memmove>
 8008972:	2000      	movs	r0, #0
 8008974:	68a3      	ldr	r3, [r4, #8]
 8008976:	1b9b      	subs	r3, r3, r6
 8008978:	60a3      	str	r3, [r4, #8]
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	4433      	add	r3, r6
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008984:	462a      	mov	r2, r5
 8008986:	f000 fa35 	bl	8008df4 <_realloc_r>
 800898a:	4606      	mov	r6, r0
 800898c:	2800      	cmp	r0, #0
 800898e:	d1e0      	bne.n	8008952 <__ssputs_r+0x5a>
 8008990:	4650      	mov	r0, sl
 8008992:	6921      	ldr	r1, [r4, #16]
 8008994:	f7ff fb3c 	bl	8008010 <_free_r>
 8008998:	230c      	movs	r3, #12
 800899a:	f8ca 3000 	str.w	r3, [sl]
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295
 80089a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	e7e9      	b.n	8008980 <__ssputs_r+0x88>

080089ac <_svfiprintf_r>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	4698      	mov	r8, r3
 80089b2:	898b      	ldrh	r3, [r1, #12]
 80089b4:	4607      	mov	r7, r0
 80089b6:	061b      	lsls	r3, r3, #24
 80089b8:	460d      	mov	r5, r1
 80089ba:	4614      	mov	r4, r2
 80089bc:	b09d      	sub	sp, #116	; 0x74
 80089be:	d50e      	bpl.n	80089de <_svfiprintf_r+0x32>
 80089c0:	690b      	ldr	r3, [r1, #16]
 80089c2:	b963      	cbnz	r3, 80089de <_svfiprintf_r+0x32>
 80089c4:	2140      	movs	r1, #64	; 0x40
 80089c6:	f7ff fb93 	bl	80080f0 <_malloc_r>
 80089ca:	6028      	str	r0, [r5, #0]
 80089cc:	6128      	str	r0, [r5, #16]
 80089ce:	b920      	cbnz	r0, 80089da <_svfiprintf_r+0x2e>
 80089d0:	230c      	movs	r3, #12
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	e0d0      	b.n	8008b7c <_svfiprintf_r+0x1d0>
 80089da:	2340      	movs	r3, #64	; 0x40
 80089dc:	616b      	str	r3, [r5, #20]
 80089de:	2300      	movs	r3, #0
 80089e0:	9309      	str	r3, [sp, #36]	; 0x24
 80089e2:	2320      	movs	r3, #32
 80089e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089e8:	2330      	movs	r3, #48	; 0x30
 80089ea:	f04f 0901 	mov.w	r9, #1
 80089ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80089f2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008b94 <_svfiprintf_r+0x1e8>
 80089f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089fa:	4623      	mov	r3, r4
 80089fc:	469a      	mov	sl, r3
 80089fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a02:	b10a      	cbz	r2, 8008a08 <_svfiprintf_r+0x5c>
 8008a04:	2a25      	cmp	r2, #37	; 0x25
 8008a06:	d1f9      	bne.n	80089fc <_svfiprintf_r+0x50>
 8008a08:	ebba 0b04 	subs.w	fp, sl, r4
 8008a0c:	d00b      	beq.n	8008a26 <_svfiprintf_r+0x7a>
 8008a0e:	465b      	mov	r3, fp
 8008a10:	4622      	mov	r2, r4
 8008a12:	4629      	mov	r1, r5
 8008a14:	4638      	mov	r0, r7
 8008a16:	f7ff ff6f 	bl	80088f8 <__ssputs_r>
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	f000 80a9 	beq.w	8008b72 <_svfiprintf_r+0x1c6>
 8008a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a22:	445a      	add	r2, fp
 8008a24:	9209      	str	r2, [sp, #36]	; 0x24
 8008a26:	f89a 3000 	ldrb.w	r3, [sl]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 80a1 	beq.w	8008b72 <_svfiprintf_r+0x1c6>
 8008a30:	2300      	movs	r3, #0
 8008a32:	f04f 32ff 	mov.w	r2, #4294967295
 8008a36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a3a:	f10a 0a01 	add.w	sl, sl, #1
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	9307      	str	r3, [sp, #28]
 8008a42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a46:	931a      	str	r3, [sp, #104]	; 0x68
 8008a48:	4654      	mov	r4, sl
 8008a4a:	2205      	movs	r2, #5
 8008a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a50:	4850      	ldr	r0, [pc, #320]	; (8008b94 <_svfiprintf_r+0x1e8>)
 8008a52:	f7fe fc60 	bl	8007316 <memchr>
 8008a56:	9a04      	ldr	r2, [sp, #16]
 8008a58:	b9d8      	cbnz	r0, 8008a92 <_svfiprintf_r+0xe6>
 8008a5a:	06d0      	lsls	r0, r2, #27
 8008a5c:	bf44      	itt	mi
 8008a5e:	2320      	movmi	r3, #32
 8008a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a64:	0711      	lsls	r1, r2, #28
 8008a66:	bf44      	itt	mi
 8008a68:	232b      	movmi	r3, #43	; 0x2b
 8008a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a72:	2b2a      	cmp	r3, #42	; 0x2a
 8008a74:	d015      	beq.n	8008aa2 <_svfiprintf_r+0xf6>
 8008a76:	4654      	mov	r4, sl
 8008a78:	2000      	movs	r0, #0
 8008a7a:	f04f 0c0a 	mov.w	ip, #10
 8008a7e:	9a07      	ldr	r2, [sp, #28]
 8008a80:	4621      	mov	r1, r4
 8008a82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a86:	3b30      	subs	r3, #48	; 0x30
 8008a88:	2b09      	cmp	r3, #9
 8008a8a:	d94d      	bls.n	8008b28 <_svfiprintf_r+0x17c>
 8008a8c:	b1b0      	cbz	r0, 8008abc <_svfiprintf_r+0x110>
 8008a8e:	9207      	str	r2, [sp, #28]
 8008a90:	e014      	b.n	8008abc <_svfiprintf_r+0x110>
 8008a92:	eba0 0308 	sub.w	r3, r0, r8
 8008a96:	fa09 f303 	lsl.w	r3, r9, r3
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	46a2      	mov	sl, r4
 8008a9e:	9304      	str	r3, [sp, #16]
 8008aa0:	e7d2      	b.n	8008a48 <_svfiprintf_r+0x9c>
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	1d19      	adds	r1, r3, #4
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	9103      	str	r1, [sp, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfbb      	ittet	lt
 8008aae:	425b      	neglt	r3, r3
 8008ab0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ab4:	9307      	strge	r3, [sp, #28]
 8008ab6:	9307      	strlt	r3, [sp, #28]
 8008ab8:	bfb8      	it	lt
 8008aba:	9204      	strlt	r2, [sp, #16]
 8008abc:	7823      	ldrb	r3, [r4, #0]
 8008abe:	2b2e      	cmp	r3, #46	; 0x2e
 8008ac0:	d10c      	bne.n	8008adc <_svfiprintf_r+0x130>
 8008ac2:	7863      	ldrb	r3, [r4, #1]
 8008ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac6:	d134      	bne.n	8008b32 <_svfiprintf_r+0x186>
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	3402      	adds	r4, #2
 8008acc:	1d1a      	adds	r2, r3, #4
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	9203      	str	r2, [sp, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	bfb8      	it	lt
 8008ad6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ada:	9305      	str	r3, [sp, #20]
 8008adc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008b98 <_svfiprintf_r+0x1ec>
 8008ae0:	2203      	movs	r2, #3
 8008ae2:	4650      	mov	r0, sl
 8008ae4:	7821      	ldrb	r1, [r4, #0]
 8008ae6:	f7fe fc16 	bl	8007316 <memchr>
 8008aea:	b138      	cbz	r0, 8008afc <_svfiprintf_r+0x150>
 8008aec:	2240      	movs	r2, #64	; 0x40
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	eba0 000a 	sub.w	r0, r0, sl
 8008af4:	4082      	lsls	r2, r0
 8008af6:	4313      	orrs	r3, r2
 8008af8:	3401      	adds	r4, #1
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b00:	2206      	movs	r2, #6
 8008b02:	4826      	ldr	r0, [pc, #152]	; (8008b9c <_svfiprintf_r+0x1f0>)
 8008b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b08:	f7fe fc05 	bl	8007316 <memchr>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d038      	beq.n	8008b82 <_svfiprintf_r+0x1d6>
 8008b10:	4b23      	ldr	r3, [pc, #140]	; (8008ba0 <_svfiprintf_r+0x1f4>)
 8008b12:	bb1b      	cbnz	r3, 8008b5c <_svfiprintf_r+0x1b0>
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	3307      	adds	r3, #7
 8008b18:	f023 0307 	bic.w	r3, r3, #7
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	9303      	str	r3, [sp, #12]
 8008b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b22:	4433      	add	r3, r6
 8008b24:	9309      	str	r3, [sp, #36]	; 0x24
 8008b26:	e768      	b.n	80089fa <_svfiprintf_r+0x4e>
 8008b28:	460c      	mov	r4, r1
 8008b2a:	2001      	movs	r0, #1
 8008b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b30:	e7a6      	b.n	8008a80 <_svfiprintf_r+0xd4>
 8008b32:	2300      	movs	r3, #0
 8008b34:	f04f 0c0a 	mov.w	ip, #10
 8008b38:	4619      	mov	r1, r3
 8008b3a:	3401      	adds	r4, #1
 8008b3c:	9305      	str	r3, [sp, #20]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b44:	3a30      	subs	r2, #48	; 0x30
 8008b46:	2a09      	cmp	r2, #9
 8008b48:	d903      	bls.n	8008b52 <_svfiprintf_r+0x1a6>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0c6      	beq.n	8008adc <_svfiprintf_r+0x130>
 8008b4e:	9105      	str	r1, [sp, #20]
 8008b50:	e7c4      	b.n	8008adc <_svfiprintf_r+0x130>
 8008b52:	4604      	mov	r4, r0
 8008b54:	2301      	movs	r3, #1
 8008b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b5a:	e7f0      	b.n	8008b3e <_svfiprintf_r+0x192>
 8008b5c:	ab03      	add	r3, sp, #12
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	462a      	mov	r2, r5
 8008b62:	4638      	mov	r0, r7
 8008b64:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <_svfiprintf_r+0x1f8>)
 8008b66:	a904      	add	r1, sp, #16
 8008b68:	f7fd fe6e 	bl	8006848 <_printf_float>
 8008b6c:	1c42      	adds	r2, r0, #1
 8008b6e:	4606      	mov	r6, r0
 8008b70:	d1d6      	bne.n	8008b20 <_svfiprintf_r+0x174>
 8008b72:	89ab      	ldrh	r3, [r5, #12]
 8008b74:	065b      	lsls	r3, r3, #25
 8008b76:	f53f af2d 	bmi.w	80089d4 <_svfiprintf_r+0x28>
 8008b7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b7c:	b01d      	add	sp, #116	; 0x74
 8008b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b82:	ab03      	add	r3, sp, #12
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	462a      	mov	r2, r5
 8008b88:	4638      	mov	r0, r7
 8008b8a:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <_svfiprintf_r+0x1f8>)
 8008b8c:	a904      	add	r1, sp, #16
 8008b8e:	f7fe f8fb 	bl	8006d88 <_printf_i>
 8008b92:	e7eb      	b.n	8008b6c <_svfiprintf_r+0x1c0>
 8008b94:	08009664 	.word	0x08009664
 8008b98:	0800966a 	.word	0x0800966a
 8008b9c:	0800966e 	.word	0x0800966e
 8008ba0:	08006849 	.word	0x08006849
 8008ba4:	080088f9 	.word	0x080088f9

08008ba8 <__sflush_r>:
 8008ba8:	898a      	ldrh	r2, [r1, #12]
 8008baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bac:	4605      	mov	r5, r0
 8008bae:	0710      	lsls	r0, r2, #28
 8008bb0:	460c      	mov	r4, r1
 8008bb2:	d457      	bmi.n	8008c64 <__sflush_r+0xbc>
 8008bb4:	684b      	ldr	r3, [r1, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dc04      	bgt.n	8008bc4 <__sflush_r+0x1c>
 8008bba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dc01      	bgt.n	8008bc4 <__sflush_r+0x1c>
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bc6:	2e00      	cmp	r6, #0
 8008bc8:	d0fa      	beq.n	8008bc0 <__sflush_r+0x18>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bd0:	682f      	ldr	r7, [r5, #0]
 8008bd2:	6a21      	ldr	r1, [r4, #32]
 8008bd4:	602b      	str	r3, [r5, #0]
 8008bd6:	d032      	beq.n	8008c3e <__sflush_r+0x96>
 8008bd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	075a      	lsls	r2, r3, #29
 8008bde:	d505      	bpl.n	8008bec <__sflush_r+0x44>
 8008be0:	6863      	ldr	r3, [r4, #4]
 8008be2:	1ac0      	subs	r0, r0, r3
 8008be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008be6:	b10b      	cbz	r3, 8008bec <__sflush_r+0x44>
 8008be8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bea:	1ac0      	subs	r0, r0, r3
 8008bec:	2300      	movs	r3, #0
 8008bee:	4602      	mov	r2, r0
 8008bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	6a21      	ldr	r1, [r4, #32]
 8008bf6:	47b0      	blx	r6
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	d106      	bne.n	8008c0c <__sflush_r+0x64>
 8008bfe:	6829      	ldr	r1, [r5, #0]
 8008c00:	291d      	cmp	r1, #29
 8008c02:	d82b      	bhi.n	8008c5c <__sflush_r+0xb4>
 8008c04:	4a28      	ldr	r2, [pc, #160]	; (8008ca8 <__sflush_r+0x100>)
 8008c06:	410a      	asrs	r2, r1
 8008c08:	07d6      	lsls	r6, r2, #31
 8008c0a:	d427      	bmi.n	8008c5c <__sflush_r+0xb4>
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	6062      	str	r2, [r4, #4]
 8008c10:	6922      	ldr	r2, [r4, #16]
 8008c12:	04d9      	lsls	r1, r3, #19
 8008c14:	6022      	str	r2, [r4, #0]
 8008c16:	d504      	bpl.n	8008c22 <__sflush_r+0x7a>
 8008c18:	1c42      	adds	r2, r0, #1
 8008c1a:	d101      	bne.n	8008c20 <__sflush_r+0x78>
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	b903      	cbnz	r3, 8008c22 <__sflush_r+0x7a>
 8008c20:	6560      	str	r0, [r4, #84]	; 0x54
 8008c22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c24:	602f      	str	r7, [r5, #0]
 8008c26:	2900      	cmp	r1, #0
 8008c28:	d0ca      	beq.n	8008bc0 <__sflush_r+0x18>
 8008c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c2e:	4299      	cmp	r1, r3
 8008c30:	d002      	beq.n	8008c38 <__sflush_r+0x90>
 8008c32:	4628      	mov	r0, r5
 8008c34:	f7ff f9ec 	bl	8008010 <_free_r>
 8008c38:	2000      	movs	r0, #0
 8008c3a:	6360      	str	r0, [r4, #52]	; 0x34
 8008c3c:	e7c1      	b.n	8008bc2 <__sflush_r+0x1a>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	4628      	mov	r0, r5
 8008c42:	47b0      	blx	r6
 8008c44:	1c41      	adds	r1, r0, #1
 8008c46:	d1c8      	bne.n	8008bda <__sflush_r+0x32>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0c5      	beq.n	8008bda <__sflush_r+0x32>
 8008c4e:	2b1d      	cmp	r3, #29
 8008c50:	d001      	beq.n	8008c56 <__sflush_r+0xae>
 8008c52:	2b16      	cmp	r3, #22
 8008c54:	d101      	bne.n	8008c5a <__sflush_r+0xb2>
 8008c56:	602f      	str	r7, [r5, #0]
 8008c58:	e7b2      	b.n	8008bc0 <__sflush_r+0x18>
 8008c5a:	89a3      	ldrh	r3, [r4, #12]
 8008c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	e7ae      	b.n	8008bc2 <__sflush_r+0x1a>
 8008c64:	690f      	ldr	r7, [r1, #16]
 8008c66:	2f00      	cmp	r7, #0
 8008c68:	d0aa      	beq.n	8008bc0 <__sflush_r+0x18>
 8008c6a:	0793      	lsls	r3, r2, #30
 8008c6c:	bf18      	it	ne
 8008c6e:	2300      	movne	r3, #0
 8008c70:	680e      	ldr	r6, [r1, #0]
 8008c72:	bf08      	it	eq
 8008c74:	694b      	ldreq	r3, [r1, #20]
 8008c76:	1bf6      	subs	r6, r6, r7
 8008c78:	600f      	str	r7, [r1, #0]
 8008c7a:	608b      	str	r3, [r1, #8]
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	dd9f      	ble.n	8008bc0 <__sflush_r+0x18>
 8008c80:	4633      	mov	r3, r6
 8008c82:	463a      	mov	r2, r7
 8008c84:	4628      	mov	r0, r5
 8008c86:	6a21      	ldr	r1, [r4, #32]
 8008c88:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008c8c:	47e0      	blx	ip
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	dc06      	bgt.n	8008ca0 <__sflush_r+0xf8>
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	e790      	b.n	8008bc2 <__sflush_r+0x1a>
 8008ca0:	4407      	add	r7, r0
 8008ca2:	1a36      	subs	r6, r6, r0
 8008ca4:	e7ea      	b.n	8008c7c <__sflush_r+0xd4>
 8008ca6:	bf00      	nop
 8008ca8:	dfbffffe 	.word	0xdfbffffe

08008cac <_fflush_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	690b      	ldr	r3, [r1, #16]
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	b913      	cbnz	r3, 8008cbc <_fflush_r+0x10>
 8008cb6:	2500      	movs	r5, #0
 8008cb8:	4628      	mov	r0, r5
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	b118      	cbz	r0, 8008cc6 <_fflush_r+0x1a>
 8008cbe:	6a03      	ldr	r3, [r0, #32]
 8008cc0:	b90b      	cbnz	r3, 8008cc6 <_fflush_r+0x1a>
 8008cc2:	f7fe fa0f 	bl	80070e4 <__sinit>
 8008cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0f3      	beq.n	8008cb6 <_fflush_r+0xa>
 8008cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cd0:	07d0      	lsls	r0, r2, #31
 8008cd2:	d404      	bmi.n	8008cde <_fflush_r+0x32>
 8008cd4:	0599      	lsls	r1, r3, #22
 8008cd6:	d402      	bmi.n	8008cde <_fflush_r+0x32>
 8008cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cda:	f7fe fb1a 	bl	8007312 <__retarget_lock_acquire_recursive>
 8008cde:	4628      	mov	r0, r5
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	f7ff ff61 	bl	8008ba8 <__sflush_r>
 8008ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ce8:	4605      	mov	r5, r0
 8008cea:	07da      	lsls	r2, r3, #31
 8008cec:	d4e4      	bmi.n	8008cb8 <_fflush_r+0xc>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	059b      	lsls	r3, r3, #22
 8008cf2:	d4e1      	bmi.n	8008cb8 <_fflush_r+0xc>
 8008cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cf6:	f7fe fb0d 	bl	8007314 <__retarget_lock_release_recursive>
 8008cfa:	e7dd      	b.n	8008cb8 <_fflush_r+0xc>

08008cfc <memmove>:
 8008cfc:	4288      	cmp	r0, r1
 8008cfe:	b510      	push	{r4, lr}
 8008d00:	eb01 0402 	add.w	r4, r1, r2
 8008d04:	d902      	bls.n	8008d0c <memmove+0x10>
 8008d06:	4284      	cmp	r4, r0
 8008d08:	4623      	mov	r3, r4
 8008d0a:	d807      	bhi.n	8008d1c <memmove+0x20>
 8008d0c:	1e43      	subs	r3, r0, #1
 8008d0e:	42a1      	cmp	r1, r4
 8008d10:	d008      	beq.n	8008d24 <memmove+0x28>
 8008d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d1a:	e7f8      	b.n	8008d0e <memmove+0x12>
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	4402      	add	r2, r0
 8008d20:	428a      	cmp	r2, r1
 8008d22:	d100      	bne.n	8008d26 <memmove+0x2a>
 8008d24:	bd10      	pop	{r4, pc}
 8008d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d2e:	e7f7      	b.n	8008d20 <memmove+0x24>

08008d30 <_sbrk_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	2300      	movs	r3, #0
 8008d34:	4d05      	ldr	r5, [pc, #20]	; (8008d4c <_sbrk_r+0x1c>)
 8008d36:	4604      	mov	r4, r0
 8008d38:	4608      	mov	r0, r1
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	f7f9 f87a 	bl	8001e34 <_sbrk>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_sbrk_r+0x1a>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_sbrk_r+0x1a>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	200005e8 	.word	0x200005e8

08008d50 <memcpy>:
 8008d50:	440a      	add	r2, r1
 8008d52:	4291      	cmp	r1, r2
 8008d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d58:	d100      	bne.n	8008d5c <memcpy+0xc>
 8008d5a:	4770      	bx	lr
 8008d5c:	b510      	push	{r4, lr}
 8008d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d62:	4291      	cmp	r1, r2
 8008d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d68:	d1f9      	bne.n	8008d5e <memcpy+0xe>
 8008d6a:	bd10      	pop	{r4, pc}

08008d6c <__assert_func>:
 8008d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d6e:	4614      	mov	r4, r2
 8008d70:	461a      	mov	r2, r3
 8008d72:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <__assert_func+0x2c>)
 8008d74:	4605      	mov	r5, r0
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68d8      	ldr	r0, [r3, #12]
 8008d7a:	b14c      	cbz	r4, 8008d90 <__assert_func+0x24>
 8008d7c:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <__assert_func+0x30>)
 8008d7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d82:	9100      	str	r1, [sp, #0]
 8008d84:	462b      	mov	r3, r5
 8008d86:	4906      	ldr	r1, [pc, #24]	; (8008da0 <__assert_func+0x34>)
 8008d88:	f000 f870 	bl	8008e6c <fiprintf>
 8008d8c:	f000 f880 	bl	8008e90 <abort>
 8008d90:	4b04      	ldr	r3, [pc, #16]	; (8008da4 <__assert_func+0x38>)
 8008d92:	461c      	mov	r4, r3
 8008d94:	e7f3      	b.n	8008d7e <__assert_func+0x12>
 8008d96:	bf00      	nop
 8008d98:	20000068 	.word	0x20000068
 8008d9c:	0800967f 	.word	0x0800967f
 8008da0:	0800968c 	.word	0x0800968c
 8008da4:	080096ba 	.word	0x080096ba

08008da8 <_calloc_r>:
 8008da8:	b570      	push	{r4, r5, r6, lr}
 8008daa:	fba1 5402 	umull	r5, r4, r1, r2
 8008dae:	b934      	cbnz	r4, 8008dbe <_calloc_r+0x16>
 8008db0:	4629      	mov	r1, r5
 8008db2:	f7ff f99d 	bl	80080f0 <_malloc_r>
 8008db6:	4606      	mov	r6, r0
 8008db8:	b928      	cbnz	r0, 8008dc6 <_calloc_r+0x1e>
 8008dba:	4630      	mov	r0, r6
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
 8008dbe:	220c      	movs	r2, #12
 8008dc0:	2600      	movs	r6, #0
 8008dc2:	6002      	str	r2, [r0, #0]
 8008dc4:	e7f9      	b.n	8008dba <_calloc_r+0x12>
 8008dc6:	462a      	mov	r2, r5
 8008dc8:	4621      	mov	r1, r4
 8008dca:	f7fe fa24 	bl	8007216 <memset>
 8008dce:	e7f4      	b.n	8008dba <_calloc_r+0x12>

08008dd0 <__ascii_mbtowc>:
 8008dd0:	b082      	sub	sp, #8
 8008dd2:	b901      	cbnz	r1, 8008dd6 <__ascii_mbtowc+0x6>
 8008dd4:	a901      	add	r1, sp, #4
 8008dd6:	b142      	cbz	r2, 8008dea <__ascii_mbtowc+0x1a>
 8008dd8:	b14b      	cbz	r3, 8008dee <__ascii_mbtowc+0x1e>
 8008dda:	7813      	ldrb	r3, [r2, #0]
 8008ddc:	600b      	str	r3, [r1, #0]
 8008dde:	7812      	ldrb	r2, [r2, #0]
 8008de0:	1e10      	subs	r0, r2, #0
 8008de2:	bf18      	it	ne
 8008de4:	2001      	movne	r0, #1
 8008de6:	b002      	add	sp, #8
 8008de8:	4770      	bx	lr
 8008dea:	4610      	mov	r0, r2
 8008dec:	e7fb      	b.n	8008de6 <__ascii_mbtowc+0x16>
 8008dee:	f06f 0001 	mvn.w	r0, #1
 8008df2:	e7f8      	b.n	8008de6 <__ascii_mbtowc+0x16>

08008df4 <_realloc_r>:
 8008df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df8:	4680      	mov	r8, r0
 8008dfa:	4614      	mov	r4, r2
 8008dfc:	460e      	mov	r6, r1
 8008dfe:	b921      	cbnz	r1, 8008e0a <_realloc_r+0x16>
 8008e00:	4611      	mov	r1, r2
 8008e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e06:	f7ff b973 	b.w	80080f0 <_malloc_r>
 8008e0a:	b92a      	cbnz	r2, 8008e18 <_realloc_r+0x24>
 8008e0c:	f7ff f900 	bl	8008010 <_free_r>
 8008e10:	4625      	mov	r5, r4
 8008e12:	4628      	mov	r0, r5
 8008e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e18:	f000 f841 	bl	8008e9e <_malloc_usable_size_r>
 8008e1c:	4284      	cmp	r4, r0
 8008e1e:	4607      	mov	r7, r0
 8008e20:	d802      	bhi.n	8008e28 <_realloc_r+0x34>
 8008e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e26:	d812      	bhi.n	8008e4e <_realloc_r+0x5a>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	f7ff f960 	bl	80080f0 <_malloc_r>
 8008e30:	4605      	mov	r5, r0
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d0ed      	beq.n	8008e12 <_realloc_r+0x1e>
 8008e36:	42bc      	cmp	r4, r7
 8008e38:	4622      	mov	r2, r4
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	bf28      	it	cs
 8008e3e:	463a      	movcs	r2, r7
 8008e40:	f7ff ff86 	bl	8008d50 <memcpy>
 8008e44:	4631      	mov	r1, r6
 8008e46:	4640      	mov	r0, r8
 8008e48:	f7ff f8e2 	bl	8008010 <_free_r>
 8008e4c:	e7e1      	b.n	8008e12 <_realloc_r+0x1e>
 8008e4e:	4635      	mov	r5, r6
 8008e50:	e7df      	b.n	8008e12 <_realloc_r+0x1e>

08008e52 <__ascii_wctomb>:
 8008e52:	4603      	mov	r3, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	b141      	cbz	r1, 8008e6a <__ascii_wctomb+0x18>
 8008e58:	2aff      	cmp	r2, #255	; 0xff
 8008e5a:	d904      	bls.n	8008e66 <__ascii_wctomb+0x14>
 8008e5c:	228a      	movs	r2, #138	; 0x8a
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	4770      	bx	lr
 8008e66:	2001      	movs	r0, #1
 8008e68:	700a      	strb	r2, [r1, #0]
 8008e6a:	4770      	bx	lr

08008e6c <fiprintf>:
 8008e6c:	b40e      	push	{r1, r2, r3}
 8008e6e:	b503      	push	{r0, r1, lr}
 8008e70:	4601      	mov	r1, r0
 8008e72:	ab03      	add	r3, sp, #12
 8008e74:	4805      	ldr	r0, [pc, #20]	; (8008e8c <fiprintf+0x20>)
 8008e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e7a:	6800      	ldr	r0, [r0, #0]
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	f000 f83d 	bl	8008efc <_vfiprintf_r>
 8008e82:	b002      	add	sp, #8
 8008e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e88:	b003      	add	sp, #12
 8008e8a:	4770      	bx	lr
 8008e8c:	20000068 	.word	0x20000068

08008e90 <abort>:
 8008e90:	2006      	movs	r0, #6
 8008e92:	b508      	push	{r3, lr}
 8008e94:	f000 fa0a 	bl	80092ac <raise>
 8008e98:	2001      	movs	r0, #1
 8008e9a:	f7f8 ff58 	bl	8001d4e <_exit>

08008e9e <_malloc_usable_size_r>:
 8008e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ea2:	1f18      	subs	r0, r3, #4
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	bfbc      	itt	lt
 8008ea8:	580b      	ldrlt	r3, [r1, r0]
 8008eaa:	18c0      	addlt	r0, r0, r3
 8008eac:	4770      	bx	lr

08008eae <__sfputc_r>:
 8008eae:	6893      	ldr	r3, [r2, #8]
 8008eb0:	b410      	push	{r4}
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	6093      	str	r3, [r2, #8]
 8008eb8:	da07      	bge.n	8008eca <__sfputc_r+0x1c>
 8008eba:	6994      	ldr	r4, [r2, #24]
 8008ebc:	42a3      	cmp	r3, r4
 8008ebe:	db01      	blt.n	8008ec4 <__sfputc_r+0x16>
 8008ec0:	290a      	cmp	r1, #10
 8008ec2:	d102      	bne.n	8008eca <__sfputc_r+0x1c>
 8008ec4:	bc10      	pop	{r4}
 8008ec6:	f000 b933 	b.w	8009130 <__swbuf_r>
 8008eca:	6813      	ldr	r3, [r2, #0]
 8008ecc:	1c58      	adds	r0, r3, #1
 8008ece:	6010      	str	r0, [r2, #0]
 8008ed0:	7019      	strb	r1, [r3, #0]
 8008ed2:	4608      	mov	r0, r1
 8008ed4:	bc10      	pop	{r4}
 8008ed6:	4770      	bx	lr

08008ed8 <__sfputs_r>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	4606      	mov	r6, r0
 8008edc:	460f      	mov	r7, r1
 8008ede:	4614      	mov	r4, r2
 8008ee0:	18d5      	adds	r5, r2, r3
 8008ee2:	42ac      	cmp	r4, r5
 8008ee4:	d101      	bne.n	8008eea <__sfputs_r+0x12>
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	e007      	b.n	8008efa <__sfputs_r+0x22>
 8008eea:	463a      	mov	r2, r7
 8008eec:	4630      	mov	r0, r6
 8008eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef2:	f7ff ffdc 	bl	8008eae <__sfputc_r>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	d1f3      	bne.n	8008ee2 <__sfputs_r+0xa>
 8008efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008efc <_vfiprintf_r>:
 8008efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	460d      	mov	r5, r1
 8008f02:	4614      	mov	r4, r2
 8008f04:	4698      	mov	r8, r3
 8008f06:	4606      	mov	r6, r0
 8008f08:	b09d      	sub	sp, #116	; 0x74
 8008f0a:	b118      	cbz	r0, 8008f14 <_vfiprintf_r+0x18>
 8008f0c:	6a03      	ldr	r3, [r0, #32]
 8008f0e:	b90b      	cbnz	r3, 8008f14 <_vfiprintf_r+0x18>
 8008f10:	f7fe f8e8 	bl	80070e4 <__sinit>
 8008f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f16:	07d9      	lsls	r1, r3, #31
 8008f18:	d405      	bmi.n	8008f26 <_vfiprintf_r+0x2a>
 8008f1a:	89ab      	ldrh	r3, [r5, #12]
 8008f1c:	059a      	lsls	r2, r3, #22
 8008f1e:	d402      	bmi.n	8008f26 <_vfiprintf_r+0x2a>
 8008f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f22:	f7fe f9f6 	bl	8007312 <__retarget_lock_acquire_recursive>
 8008f26:	89ab      	ldrh	r3, [r5, #12]
 8008f28:	071b      	lsls	r3, r3, #28
 8008f2a:	d501      	bpl.n	8008f30 <_vfiprintf_r+0x34>
 8008f2c:	692b      	ldr	r3, [r5, #16]
 8008f2e:	b99b      	cbnz	r3, 8008f58 <_vfiprintf_r+0x5c>
 8008f30:	4629      	mov	r1, r5
 8008f32:	4630      	mov	r0, r6
 8008f34:	f000 f93a 	bl	80091ac <__swsetup_r>
 8008f38:	b170      	cbz	r0, 8008f58 <_vfiprintf_r+0x5c>
 8008f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f3c:	07dc      	lsls	r4, r3, #31
 8008f3e:	d504      	bpl.n	8008f4a <_vfiprintf_r+0x4e>
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	b01d      	add	sp, #116	; 0x74
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	0598      	lsls	r0, r3, #22
 8008f4e:	d4f7      	bmi.n	8008f40 <_vfiprintf_r+0x44>
 8008f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f52:	f7fe f9df 	bl	8007314 <__retarget_lock_release_recursive>
 8008f56:	e7f3      	b.n	8008f40 <_vfiprintf_r+0x44>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5c:	2320      	movs	r3, #32
 8008f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f62:	2330      	movs	r3, #48	; 0x30
 8008f64:	f04f 0901 	mov.w	r9, #1
 8008f68:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800911c <_vfiprintf_r+0x220>
 8008f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f74:	4623      	mov	r3, r4
 8008f76:	469a      	mov	sl, r3
 8008f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f7c:	b10a      	cbz	r2, 8008f82 <_vfiprintf_r+0x86>
 8008f7e:	2a25      	cmp	r2, #37	; 0x25
 8008f80:	d1f9      	bne.n	8008f76 <_vfiprintf_r+0x7a>
 8008f82:	ebba 0b04 	subs.w	fp, sl, r4
 8008f86:	d00b      	beq.n	8008fa0 <_vfiprintf_r+0xa4>
 8008f88:	465b      	mov	r3, fp
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f7ff ffa2 	bl	8008ed8 <__sfputs_r>
 8008f94:	3001      	adds	r0, #1
 8008f96:	f000 80a9 	beq.w	80090ec <_vfiprintf_r+0x1f0>
 8008f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f9c:	445a      	add	r2, fp
 8008f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8008fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 80a1 	beq.w	80090ec <_vfiprintf_r+0x1f0>
 8008faa:	2300      	movs	r3, #0
 8008fac:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fb4:	f10a 0a01 	add.w	sl, sl, #1
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	9307      	str	r3, [sp, #28]
 8008fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8008fc2:	4654      	mov	r4, sl
 8008fc4:	2205      	movs	r2, #5
 8008fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fca:	4854      	ldr	r0, [pc, #336]	; (800911c <_vfiprintf_r+0x220>)
 8008fcc:	f7fe f9a3 	bl	8007316 <memchr>
 8008fd0:	9a04      	ldr	r2, [sp, #16]
 8008fd2:	b9d8      	cbnz	r0, 800900c <_vfiprintf_r+0x110>
 8008fd4:	06d1      	lsls	r1, r2, #27
 8008fd6:	bf44      	itt	mi
 8008fd8:	2320      	movmi	r3, #32
 8008fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fde:	0713      	lsls	r3, r2, #28
 8008fe0:	bf44      	itt	mi
 8008fe2:	232b      	movmi	r3, #43	; 0x2b
 8008fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fec:	2b2a      	cmp	r3, #42	; 0x2a
 8008fee:	d015      	beq.n	800901c <_vfiprintf_r+0x120>
 8008ff0:	4654      	mov	r4, sl
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	f04f 0c0a 	mov.w	ip, #10
 8008ff8:	9a07      	ldr	r2, [sp, #28]
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009000:	3b30      	subs	r3, #48	; 0x30
 8009002:	2b09      	cmp	r3, #9
 8009004:	d94d      	bls.n	80090a2 <_vfiprintf_r+0x1a6>
 8009006:	b1b0      	cbz	r0, 8009036 <_vfiprintf_r+0x13a>
 8009008:	9207      	str	r2, [sp, #28]
 800900a:	e014      	b.n	8009036 <_vfiprintf_r+0x13a>
 800900c:	eba0 0308 	sub.w	r3, r0, r8
 8009010:	fa09 f303 	lsl.w	r3, r9, r3
 8009014:	4313      	orrs	r3, r2
 8009016:	46a2      	mov	sl, r4
 8009018:	9304      	str	r3, [sp, #16]
 800901a:	e7d2      	b.n	8008fc2 <_vfiprintf_r+0xc6>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	1d19      	adds	r1, r3, #4
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	9103      	str	r1, [sp, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	bfbb      	ittet	lt
 8009028:	425b      	neglt	r3, r3
 800902a:	f042 0202 	orrlt.w	r2, r2, #2
 800902e:	9307      	strge	r3, [sp, #28]
 8009030:	9307      	strlt	r3, [sp, #28]
 8009032:	bfb8      	it	lt
 8009034:	9204      	strlt	r2, [sp, #16]
 8009036:	7823      	ldrb	r3, [r4, #0]
 8009038:	2b2e      	cmp	r3, #46	; 0x2e
 800903a:	d10c      	bne.n	8009056 <_vfiprintf_r+0x15a>
 800903c:	7863      	ldrb	r3, [r4, #1]
 800903e:	2b2a      	cmp	r3, #42	; 0x2a
 8009040:	d134      	bne.n	80090ac <_vfiprintf_r+0x1b0>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	3402      	adds	r4, #2
 8009046:	1d1a      	adds	r2, r3, #4
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	9203      	str	r2, [sp, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	bfb8      	it	lt
 8009050:	f04f 33ff 	movlt.w	r3, #4294967295
 8009054:	9305      	str	r3, [sp, #20]
 8009056:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009120 <_vfiprintf_r+0x224>
 800905a:	2203      	movs	r2, #3
 800905c:	4650      	mov	r0, sl
 800905e:	7821      	ldrb	r1, [r4, #0]
 8009060:	f7fe f959 	bl	8007316 <memchr>
 8009064:	b138      	cbz	r0, 8009076 <_vfiprintf_r+0x17a>
 8009066:	2240      	movs	r2, #64	; 0x40
 8009068:	9b04      	ldr	r3, [sp, #16]
 800906a:	eba0 000a 	sub.w	r0, r0, sl
 800906e:	4082      	lsls	r2, r0
 8009070:	4313      	orrs	r3, r2
 8009072:	3401      	adds	r4, #1
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907a:	2206      	movs	r2, #6
 800907c:	4829      	ldr	r0, [pc, #164]	; (8009124 <_vfiprintf_r+0x228>)
 800907e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009082:	f7fe f948 	bl	8007316 <memchr>
 8009086:	2800      	cmp	r0, #0
 8009088:	d03f      	beq.n	800910a <_vfiprintf_r+0x20e>
 800908a:	4b27      	ldr	r3, [pc, #156]	; (8009128 <_vfiprintf_r+0x22c>)
 800908c:	bb1b      	cbnz	r3, 80090d6 <_vfiprintf_r+0x1da>
 800908e:	9b03      	ldr	r3, [sp, #12]
 8009090:	3307      	adds	r3, #7
 8009092:	f023 0307 	bic.w	r3, r3, #7
 8009096:	3308      	adds	r3, #8
 8009098:	9303      	str	r3, [sp, #12]
 800909a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909c:	443b      	add	r3, r7
 800909e:	9309      	str	r3, [sp, #36]	; 0x24
 80090a0:	e768      	b.n	8008f74 <_vfiprintf_r+0x78>
 80090a2:	460c      	mov	r4, r1
 80090a4:	2001      	movs	r0, #1
 80090a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80090aa:	e7a6      	b.n	8008ffa <_vfiprintf_r+0xfe>
 80090ac:	2300      	movs	r3, #0
 80090ae:	f04f 0c0a 	mov.w	ip, #10
 80090b2:	4619      	mov	r1, r3
 80090b4:	3401      	adds	r4, #1
 80090b6:	9305      	str	r3, [sp, #20]
 80090b8:	4620      	mov	r0, r4
 80090ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090be:	3a30      	subs	r2, #48	; 0x30
 80090c0:	2a09      	cmp	r2, #9
 80090c2:	d903      	bls.n	80090cc <_vfiprintf_r+0x1d0>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d0c6      	beq.n	8009056 <_vfiprintf_r+0x15a>
 80090c8:	9105      	str	r1, [sp, #20]
 80090ca:	e7c4      	b.n	8009056 <_vfiprintf_r+0x15a>
 80090cc:	4604      	mov	r4, r0
 80090ce:	2301      	movs	r3, #1
 80090d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090d4:	e7f0      	b.n	80090b8 <_vfiprintf_r+0x1bc>
 80090d6:	ab03      	add	r3, sp, #12
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	462a      	mov	r2, r5
 80090dc:	4630      	mov	r0, r6
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <_vfiprintf_r+0x230>)
 80090e0:	a904      	add	r1, sp, #16
 80090e2:	f7fd fbb1 	bl	8006848 <_printf_float>
 80090e6:	4607      	mov	r7, r0
 80090e8:	1c78      	adds	r0, r7, #1
 80090ea:	d1d6      	bne.n	800909a <_vfiprintf_r+0x19e>
 80090ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ee:	07d9      	lsls	r1, r3, #31
 80090f0:	d405      	bmi.n	80090fe <_vfiprintf_r+0x202>
 80090f2:	89ab      	ldrh	r3, [r5, #12]
 80090f4:	059a      	lsls	r2, r3, #22
 80090f6:	d402      	bmi.n	80090fe <_vfiprintf_r+0x202>
 80090f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090fa:	f7fe f90b 	bl	8007314 <__retarget_lock_release_recursive>
 80090fe:	89ab      	ldrh	r3, [r5, #12]
 8009100:	065b      	lsls	r3, r3, #25
 8009102:	f53f af1d 	bmi.w	8008f40 <_vfiprintf_r+0x44>
 8009106:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009108:	e71c      	b.n	8008f44 <_vfiprintf_r+0x48>
 800910a:	ab03      	add	r3, sp, #12
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	462a      	mov	r2, r5
 8009110:	4630      	mov	r0, r6
 8009112:	4b06      	ldr	r3, [pc, #24]	; (800912c <_vfiprintf_r+0x230>)
 8009114:	a904      	add	r1, sp, #16
 8009116:	f7fd fe37 	bl	8006d88 <_printf_i>
 800911a:	e7e4      	b.n	80090e6 <_vfiprintf_r+0x1ea>
 800911c:	08009664 	.word	0x08009664
 8009120:	0800966a 	.word	0x0800966a
 8009124:	0800966e 	.word	0x0800966e
 8009128:	08006849 	.word	0x08006849
 800912c:	08008ed9 	.word	0x08008ed9

08009130 <__swbuf_r>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	460e      	mov	r6, r1
 8009134:	4614      	mov	r4, r2
 8009136:	4605      	mov	r5, r0
 8009138:	b118      	cbz	r0, 8009142 <__swbuf_r+0x12>
 800913a:	6a03      	ldr	r3, [r0, #32]
 800913c:	b90b      	cbnz	r3, 8009142 <__swbuf_r+0x12>
 800913e:	f7fd ffd1 	bl	80070e4 <__sinit>
 8009142:	69a3      	ldr	r3, [r4, #24]
 8009144:	60a3      	str	r3, [r4, #8]
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	071a      	lsls	r2, r3, #28
 800914a:	d525      	bpl.n	8009198 <__swbuf_r+0x68>
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	b31b      	cbz	r3, 8009198 <__swbuf_r+0x68>
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	6922      	ldr	r2, [r4, #16]
 8009154:	b2f6      	uxtb	r6, r6
 8009156:	1a98      	subs	r0, r3, r2
 8009158:	6963      	ldr	r3, [r4, #20]
 800915a:	4637      	mov	r7, r6
 800915c:	4283      	cmp	r3, r0
 800915e:	dc04      	bgt.n	800916a <__swbuf_r+0x3a>
 8009160:	4621      	mov	r1, r4
 8009162:	4628      	mov	r0, r5
 8009164:	f7ff fda2 	bl	8008cac <_fflush_r>
 8009168:	b9e0      	cbnz	r0, 80091a4 <__swbuf_r+0x74>
 800916a:	68a3      	ldr	r3, [r4, #8]
 800916c:	3b01      	subs	r3, #1
 800916e:	60a3      	str	r3, [r4, #8]
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	6022      	str	r2, [r4, #0]
 8009176:	701e      	strb	r6, [r3, #0]
 8009178:	6962      	ldr	r2, [r4, #20]
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	429a      	cmp	r2, r3
 800917e:	d004      	beq.n	800918a <__swbuf_r+0x5a>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	07db      	lsls	r3, r3, #31
 8009184:	d506      	bpl.n	8009194 <__swbuf_r+0x64>
 8009186:	2e0a      	cmp	r6, #10
 8009188:	d104      	bne.n	8009194 <__swbuf_r+0x64>
 800918a:	4621      	mov	r1, r4
 800918c:	4628      	mov	r0, r5
 800918e:	f7ff fd8d 	bl	8008cac <_fflush_r>
 8009192:	b938      	cbnz	r0, 80091a4 <__swbuf_r+0x74>
 8009194:	4638      	mov	r0, r7
 8009196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009198:	4621      	mov	r1, r4
 800919a:	4628      	mov	r0, r5
 800919c:	f000 f806 	bl	80091ac <__swsetup_r>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d0d5      	beq.n	8009150 <__swbuf_r+0x20>
 80091a4:	f04f 37ff 	mov.w	r7, #4294967295
 80091a8:	e7f4      	b.n	8009194 <__swbuf_r+0x64>
	...

080091ac <__swsetup_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4b2a      	ldr	r3, [pc, #168]	; (8009258 <__swsetup_r+0xac>)
 80091b0:	4605      	mov	r5, r0
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	460c      	mov	r4, r1
 80091b6:	b118      	cbz	r0, 80091c0 <__swsetup_r+0x14>
 80091b8:	6a03      	ldr	r3, [r0, #32]
 80091ba:	b90b      	cbnz	r3, 80091c0 <__swsetup_r+0x14>
 80091bc:	f7fd ff92 	bl	80070e4 <__sinit>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091c6:	0718      	lsls	r0, r3, #28
 80091c8:	d422      	bmi.n	8009210 <__swsetup_r+0x64>
 80091ca:	06d9      	lsls	r1, r3, #27
 80091cc:	d407      	bmi.n	80091de <__swsetup_r+0x32>
 80091ce:	2309      	movs	r3, #9
 80091d0:	602b      	str	r3, [r5, #0]
 80091d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091d6:	f04f 30ff 	mov.w	r0, #4294967295
 80091da:	81a3      	strh	r3, [r4, #12]
 80091dc:	e034      	b.n	8009248 <__swsetup_r+0x9c>
 80091de:	0758      	lsls	r0, r3, #29
 80091e0:	d512      	bpl.n	8009208 <__swsetup_r+0x5c>
 80091e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091e4:	b141      	cbz	r1, 80091f8 <__swsetup_r+0x4c>
 80091e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091ea:	4299      	cmp	r1, r3
 80091ec:	d002      	beq.n	80091f4 <__swsetup_r+0x48>
 80091ee:	4628      	mov	r0, r5
 80091f0:	f7fe ff0e 	bl	8008010 <_free_r>
 80091f4:	2300      	movs	r3, #0
 80091f6:	6363      	str	r3, [r4, #52]	; 0x34
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091fe:	81a3      	strh	r3, [r4, #12]
 8009200:	2300      	movs	r3, #0
 8009202:	6063      	str	r3, [r4, #4]
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	6023      	str	r3, [r4, #0]
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	f043 0308 	orr.w	r3, r3, #8
 800920e:	81a3      	strh	r3, [r4, #12]
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	b94b      	cbnz	r3, 8009228 <__swsetup_r+0x7c>
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800921a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800921e:	d003      	beq.n	8009228 <__swsetup_r+0x7c>
 8009220:	4621      	mov	r1, r4
 8009222:	4628      	mov	r0, r5
 8009224:	f000 f883 	bl	800932e <__smakebuf_r>
 8009228:	89a0      	ldrh	r0, [r4, #12]
 800922a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800922e:	f010 0301 	ands.w	r3, r0, #1
 8009232:	d00a      	beq.n	800924a <__swsetup_r+0x9e>
 8009234:	2300      	movs	r3, #0
 8009236:	60a3      	str	r3, [r4, #8]
 8009238:	6963      	ldr	r3, [r4, #20]
 800923a:	425b      	negs	r3, r3
 800923c:	61a3      	str	r3, [r4, #24]
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	b943      	cbnz	r3, 8009254 <__swsetup_r+0xa8>
 8009242:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009246:	d1c4      	bne.n	80091d2 <__swsetup_r+0x26>
 8009248:	bd38      	pop	{r3, r4, r5, pc}
 800924a:	0781      	lsls	r1, r0, #30
 800924c:	bf58      	it	pl
 800924e:	6963      	ldrpl	r3, [r4, #20]
 8009250:	60a3      	str	r3, [r4, #8]
 8009252:	e7f4      	b.n	800923e <__swsetup_r+0x92>
 8009254:	2000      	movs	r0, #0
 8009256:	e7f7      	b.n	8009248 <__swsetup_r+0x9c>
 8009258:	20000068 	.word	0x20000068

0800925c <_raise_r>:
 800925c:	291f      	cmp	r1, #31
 800925e:	b538      	push	{r3, r4, r5, lr}
 8009260:	4604      	mov	r4, r0
 8009262:	460d      	mov	r5, r1
 8009264:	d904      	bls.n	8009270 <_raise_r+0x14>
 8009266:	2316      	movs	r3, #22
 8009268:	6003      	str	r3, [r0, #0]
 800926a:	f04f 30ff 	mov.w	r0, #4294967295
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009272:	b112      	cbz	r2, 800927a <_raise_r+0x1e>
 8009274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009278:	b94b      	cbnz	r3, 800928e <_raise_r+0x32>
 800927a:	4620      	mov	r0, r4
 800927c:	f000 f830 	bl	80092e0 <_getpid_r>
 8009280:	462a      	mov	r2, r5
 8009282:	4601      	mov	r1, r0
 8009284:	4620      	mov	r0, r4
 8009286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800928a:	f000 b817 	b.w	80092bc <_kill_r>
 800928e:	2b01      	cmp	r3, #1
 8009290:	d00a      	beq.n	80092a8 <_raise_r+0x4c>
 8009292:	1c59      	adds	r1, r3, #1
 8009294:	d103      	bne.n	800929e <_raise_r+0x42>
 8009296:	2316      	movs	r3, #22
 8009298:	6003      	str	r3, [r0, #0]
 800929a:	2001      	movs	r0, #1
 800929c:	e7e7      	b.n	800926e <_raise_r+0x12>
 800929e:	2400      	movs	r4, #0
 80092a0:	4628      	mov	r0, r5
 80092a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092a6:	4798      	blx	r3
 80092a8:	2000      	movs	r0, #0
 80092aa:	e7e0      	b.n	800926e <_raise_r+0x12>

080092ac <raise>:
 80092ac:	4b02      	ldr	r3, [pc, #8]	; (80092b8 <raise+0xc>)
 80092ae:	4601      	mov	r1, r0
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	f7ff bfd3 	b.w	800925c <_raise_r>
 80092b6:	bf00      	nop
 80092b8:	20000068 	.word	0x20000068

080092bc <_kill_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	2300      	movs	r3, #0
 80092c0:	4d06      	ldr	r5, [pc, #24]	; (80092dc <_kill_r+0x20>)
 80092c2:	4604      	mov	r4, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	4611      	mov	r1, r2
 80092c8:	602b      	str	r3, [r5, #0]
 80092ca:	f7f8 fd30 	bl	8001d2e <_kill>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	d102      	bne.n	80092d8 <_kill_r+0x1c>
 80092d2:	682b      	ldr	r3, [r5, #0]
 80092d4:	b103      	cbz	r3, 80092d8 <_kill_r+0x1c>
 80092d6:	6023      	str	r3, [r4, #0]
 80092d8:	bd38      	pop	{r3, r4, r5, pc}
 80092da:	bf00      	nop
 80092dc:	200005e8 	.word	0x200005e8

080092e0 <_getpid_r>:
 80092e0:	f7f8 bd1e 	b.w	8001d20 <_getpid>

080092e4 <__swhatbuf_r>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	460c      	mov	r4, r1
 80092e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ec:	4615      	mov	r5, r2
 80092ee:	2900      	cmp	r1, #0
 80092f0:	461e      	mov	r6, r3
 80092f2:	b096      	sub	sp, #88	; 0x58
 80092f4:	da0c      	bge.n	8009310 <__swhatbuf_r+0x2c>
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	2100      	movs	r1, #0
 80092fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092fe:	bf0c      	ite	eq
 8009300:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009304:	2340      	movne	r3, #64	; 0x40
 8009306:	2000      	movs	r0, #0
 8009308:	6031      	str	r1, [r6, #0]
 800930a:	602b      	str	r3, [r5, #0]
 800930c:	b016      	add	sp, #88	; 0x58
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	466a      	mov	r2, sp
 8009312:	f000 f849 	bl	80093a8 <_fstat_r>
 8009316:	2800      	cmp	r0, #0
 8009318:	dbed      	blt.n	80092f6 <__swhatbuf_r+0x12>
 800931a:	9901      	ldr	r1, [sp, #4]
 800931c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009320:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009324:	4259      	negs	r1, r3
 8009326:	4159      	adcs	r1, r3
 8009328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800932c:	e7eb      	b.n	8009306 <__swhatbuf_r+0x22>

0800932e <__smakebuf_r>:
 800932e:	898b      	ldrh	r3, [r1, #12]
 8009330:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009332:	079d      	lsls	r5, r3, #30
 8009334:	4606      	mov	r6, r0
 8009336:	460c      	mov	r4, r1
 8009338:	d507      	bpl.n	800934a <__smakebuf_r+0x1c>
 800933a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	6123      	str	r3, [r4, #16]
 8009342:	2301      	movs	r3, #1
 8009344:	6163      	str	r3, [r4, #20]
 8009346:	b002      	add	sp, #8
 8009348:	bd70      	pop	{r4, r5, r6, pc}
 800934a:	466a      	mov	r2, sp
 800934c:	ab01      	add	r3, sp, #4
 800934e:	f7ff ffc9 	bl	80092e4 <__swhatbuf_r>
 8009352:	9900      	ldr	r1, [sp, #0]
 8009354:	4605      	mov	r5, r0
 8009356:	4630      	mov	r0, r6
 8009358:	f7fe feca 	bl	80080f0 <_malloc_r>
 800935c:	b948      	cbnz	r0, 8009372 <__smakebuf_r+0x44>
 800935e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009362:	059a      	lsls	r2, r3, #22
 8009364:	d4ef      	bmi.n	8009346 <__smakebuf_r+0x18>
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	f043 0302 	orr.w	r3, r3, #2
 800936e:	81a3      	strh	r3, [r4, #12]
 8009370:	e7e3      	b.n	800933a <__smakebuf_r+0xc>
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	6020      	str	r0, [r4, #0]
 8009376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937a:	81a3      	strh	r3, [r4, #12]
 800937c:	9b00      	ldr	r3, [sp, #0]
 800937e:	6120      	str	r0, [r4, #16]
 8009380:	6163      	str	r3, [r4, #20]
 8009382:	9b01      	ldr	r3, [sp, #4]
 8009384:	b15b      	cbz	r3, 800939e <__smakebuf_r+0x70>
 8009386:	4630      	mov	r0, r6
 8009388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800938c:	f000 f81e 	bl	80093cc <_isatty_r>
 8009390:	b128      	cbz	r0, 800939e <__smakebuf_r+0x70>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f023 0303 	bic.w	r3, r3, #3
 8009398:	f043 0301 	orr.w	r3, r3, #1
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	431d      	orrs	r5, r3
 80093a2:	81a5      	strh	r5, [r4, #12]
 80093a4:	e7cf      	b.n	8009346 <__smakebuf_r+0x18>
	...

080093a8 <_fstat_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	2300      	movs	r3, #0
 80093ac:	4d06      	ldr	r5, [pc, #24]	; (80093c8 <_fstat_r+0x20>)
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	4611      	mov	r1, r2
 80093b4:	602b      	str	r3, [r5, #0]
 80093b6:	f7f8 fd18 	bl	8001dea <_fstat>
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	d102      	bne.n	80093c4 <_fstat_r+0x1c>
 80093be:	682b      	ldr	r3, [r5, #0]
 80093c0:	b103      	cbz	r3, 80093c4 <_fstat_r+0x1c>
 80093c2:	6023      	str	r3, [r4, #0]
 80093c4:	bd38      	pop	{r3, r4, r5, pc}
 80093c6:	bf00      	nop
 80093c8:	200005e8 	.word	0x200005e8

080093cc <_isatty_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	2300      	movs	r3, #0
 80093d0:	4d05      	ldr	r5, [pc, #20]	; (80093e8 <_isatty_r+0x1c>)
 80093d2:	4604      	mov	r4, r0
 80093d4:	4608      	mov	r0, r1
 80093d6:	602b      	str	r3, [r5, #0]
 80093d8:	f7f8 fd16 	bl	8001e08 <_isatty>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_isatty_r+0x1a>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_isatty_r+0x1a>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	200005e8 	.word	0x200005e8

080093ec <_init>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	bf00      	nop
 80093f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f2:	bc08      	pop	{r3}
 80093f4:	469e      	mov	lr, r3
 80093f6:	4770      	bx	lr

080093f8 <_fini>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	bf00      	nop
 80093fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fe:	bc08      	pop	{r3}
 8009400:	469e      	mov	lr, r3
 8009402:	4770      	bx	lr
